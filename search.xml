<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用dcmtk库读取.dcm文件并获取信息+使用OpenCV显示图像</title>
    <url>/2017/08/12/%E4%BD%BF%E7%94%A8dcmtk%E5%BA%93%E8%AF%BB%E5%8F%96-dcm%E6%96%87%E4%BB%B6%E5%B9%B6%E8%8E%B7%E5%8F%96%E4%BF%A1%E6%81%AF-%E4%BD%BF%E7%94%A8OpenCV%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%83%8F/</url>
    <content><![CDATA[<p>借助VS2013和OpenCV的绘图功能，在工程DICOMReader.sln中实现了对单张.dcm图像的读取与显示，以下是详细步骤。</p>
<h2 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h2><p>编译器：VS2013<br>库：dcmtk-3.6.0（已编译）、OpenCV<br>配置方法：</p>
<ul>
<li>【项目属性页】-【VC++ 目录】-【包含目录】&amp;【库目录】，加入如下文件夹<br><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEyMTIzNDA2MTU1.jfif" alt="【项目属性页】-【VC++ 目录】-【包含目录】&amp;【库目录】，加入如下文件夹"></li>
<li>库目录<br><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEyMTMzMzI3NDU1.jfif" alt="库目录"></li>
<li>包含目录<br><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEyMTMzMzUzMzA3.jfif" alt="包含目录"></li>
</ul>
<p>对于OpenCV的配置，还需要在【我的电脑】-【属性】-【高级系统设置】-【环境变量】中的“path”中添加OpenCV的“bin”文件夹<code>${根目录}\opencv\build\x86\vc12\bin;</code>（如果没有path，可以手动添加，至于系统变量还是用户变量，没有太大关系）。</p>
<p><strong>（在win7的系统上配置过的环境变量似乎不能立刻生效，运行程序的时候还是会提示“未能正确安装xxx.dll链接库”之类的话，把VS重启一下就行了）</strong></p>
<p>最后，在【链接器】-【输入】-【附加依赖项】添加如下链接库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netapi32.lib</span><br><span class="line">wsock32.lib</span><br><span class="line">ofstd.lib</span><br><span class="line">oflog.lib</span><br><span class="line">dcmimgle.lib</span><br><span class="line">ijg8.lib</span><br><span class="line">ijg12.lib</span><br><span class="line">ijg16.lib</span><br><span class="line">dcmdata.lib</span><br><span class="line">dcmimage.lib</span><br><span class="line">dcmnet.lib</span><br><span class="line">opencv_core2413d.lib</span><br><span class="line">opencv_features2d2413d.lib</span><br><span class="line">opencv_flann2413d.lib</span><br><span class="line">opencv_highgui2413d.lib</span><br></pre></td></tr></table></figure>
<p>头文件写法：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"dcmtk/dcmdata/dctk.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"dcmtk/dcmimgle/dcmimage.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"dcmtk/dcmdata/dcfilefo.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="读取文件并获取相关信息"><a href="#读取文件并获取相关信息" class="headerlink" title="读取文件并获取相关信息"></a>读取文件并获取相关信息</h2><p>在dcmtk库中，包含了一个DcmFileFormat类，用来对原始.dcm文件进行操作，具体用法如下：</p>
<ul>
<li><p>加载文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">DcmFileFormat dfile;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件路径</span></span><br><span class="line"><span class="built_in">string</span> afile = <span class="string">"...\\**.dcm"</span>;</span><br><span class="line">OFCondition result = dfile.loadFile(path.c_str()); <span class="comment">// 加载文件</span></span><br><span class="line"><span class="keyword">if</span> (result.bad())</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="comment">// 功能函数如上方的loadFile，调用后会返回一个OFCondition类型的数据</span></span><br><span class="line"><span class="comment">// 可以过该类的成员函数bad()函数检测是否调用成功</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取文件相关信息</p>
</li>
</ul>
<p>.dcm文件里面的数据结构大致如下：<br><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEyMTcwNzMwNTk3.jfif" alt="这里写图片描述"></p>
<p>.dcm文件相应的数据存储结构可参照论文：<br><a href="http://www.docin.com/p-760785685.html&amp;dpage=1&amp;key=DIC%E6%80%8E%E4%B9%88%E6%B2%BB" target="_blank" rel="noopener">《DICOM 数据集与 DCM 文件格式》全海英, 杨源, 张歆东, 郭树旭, 刘景鑫
</a></p>
<p>简单来说，一个.dcm格式的文件中，包含了一个数据集（Data set），由如下代码获取这个数据集：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">DcmDataset *data = dfile.getDataset();</span><br></pre></td></tr></table></figure>
<p>而DcmFileFormat类的构造函数，也允许由一个数据集（Data set）创建一个对象：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">DcmFileFormat(); <span class="comment">// default constructor</span></span><br><span class="line">DcmFileFormat(DcmDataset *dataset); <span class="comment">// using dataset</span></span><br><span class="line">DcmFileFormat(<span class="keyword">const</span> DcmFileFormat &amp;old); <span class="comment">// copy constructor</span></span><br></pre></td></tr></table></figure>
<p><strong>.dcm文件就像一个容器，而数据集才是真正的内容。</strong></p>
<p>在数据集（Data set）中，包含了文件的元信息（Meta Information，存储了被封装数据集的标识信息）以及数据元素（Data Element）；通过调用相应的函数来获取文件的元信息以及数据集，代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">DcmMetaInfo *Metalnfo = dfile.getMetaInfo(); <span class="comment">// 文件元信息</span></span><br><span class="line">DcmTag Tag = Metalnfo-&gt;getTag();      <span class="comment">// 从元信息中获取标签</span></span><br><span class="line"></span><br><span class="line">DcmDataset *data = dfile.getDataset(); <span class="comment">// 数据集</span></span><br><span class="line">DcmElement *element = <span class="literal">NULL</span>;</span><br><span class="line">result = data-&gt;findAndGetElement(DCM_PixelData, element);</span><br><span class="line"><span class="keyword">if</span> (result.bad())</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br></pre></td></tr></table></figure></p>
<p>需要特别注意的是：</p>
<ul>
<li>创建数据元素对象的时候，最好给其赋值为NULL，以免初始值指向未知的地址；</li>
<li>findAndGetElement(DCM_PixelData, element);该函数用来获取数据元素，函数中的第一个参数“DCM_PixelData”为用户想要从数据集中获取的数据元素类型，具体的元素类型可以参考头文件“dcdeftag.h”。（共有3250种参数类型）</li>
</ul>
<p>数据元素（Data Element）从逻辑上说就是数据集（Data set）的一个子集，因此，通常来说，通过“findAndGetElement()”函数获得的数据元素会比数据集的长度来的小，可以通过如下方式进行检测：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Uint32 data_len = data-&gt;getLength();</span><br><span class="line">Uint32 element_len = element-&gt;getLength();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"data_len "</span> &lt;&lt; data_len &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"elemetn_len "</span> &lt;&lt; element_len &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<p>获取数据元素（Data Element）只是将数据集（Data set）中的我们感兴趣的部分存储到了由类DcmElement创建的对象里面，那么自然地，我们会想到数据的可视化，这将采取另一种处理方式：</p>
<p>dcmtk库中包含了类“OFString”，这只是一个简单的字符串类，它实现了std的一个子集::string；我们通过函数“findAndGetOFString()”来获取我们要的数据项，并将其保存在类OFString创建的对象中，以此来实现数据可视化。具体代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">OFString PatientName;</span><br><span class="line">data-&gt;findAndGetOFString(DCM_PatientName, PatientName);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"PatientName: "</span> &lt;&lt; PatientName&lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<h2 id="图像的显示"><a href="#图像的显示" class="headerlink" title="图像的显示"></a>图像的显示</h2><p>由之前的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">DcmElement *element = <span class="literal">NULL</span>;</span><br><span class="line">result = data-&gt;findAndGetElement(DCM_PixelData, element);</span><br><span class="line"><span class="keyword">if</span> (result.bad())</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br></pre></td></tr></table></figure>
<p>获取了图像的像素数据，进行进一步的操作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Uint16* pixData16;</span><br><span class="line">result = element-&gt;getUint16Array(pixData16);</span><br><span class="line"><span class="keyword">if</span> (result.bad())</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br></pre></td></tr></table></figure>
<p>由数据元素（Data Element）的成员函数getUint16Array()将对应的像素数据存储到无符号整型（unsigned short，即Uint16，又称无符号16位整型）数组中，获得一个向量；再借助OpenCV的创建矩阵和显示图像的功能，进行图像的显示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">512</span>*<span class="number">512</span>; i++)</span><br><span class="line">    *(pixData16 + i) *= <span class="number">20</span>; <span class="comment">// 灰度拉伸</span></span><br><span class="line">cv::Mat imag = cv::Mat(<span class="number">512</span>, <span class="number">512</span>, CV_16U, pixData16);</span><br><span class="line">cv::imshow(<span class="string">"image"</span>, imag);</span><br><span class="line">cv::waitKey();</span><br></pre></td></tr></table></figure>
<p>在创建矩阵之前，进行了灰度拉伸，以<strong>提升显示的亮度</strong>。</p>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMDIzNDQ0MzAw.jfif" alt="最终效果"></p>
<p>最终效果如上。现在有个问题，在进行数据拉伸的时候，预先已经知道了CT图像的行列值的大小，而应该利用哪个参数或者函数来获取图像的size呢？</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>dcmtk</tag>
        <tag>OpenCV</tag>
        <tag>C++</tag>
        <tag>VS2013</tag>
      </tags>
  </entry>
  <entry>
    <title>sort函数用于vector向量的排序</title>
    <url>/2018/05/12/sort%E5%87%BD%E6%95%B0%E7%94%A8%E4%BA%8Evector%E5%90%91%E9%87%8F%E7%9A%84%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/zhouxiaosong/p/5557990.html" target="_blank" rel="noopener">关于C++中vector和set使用sort方法进行排序</a></p>
<blockquote>
<p>作者注：上面这篇文章写得相当全面，包括对vector和set中不同数据类型（包括结构体）的排序，还有一些还没看懂……特作此摘录，供当前及日后的学习</p>
</blockquote>
<h1 id="一般类型的排序（int，double，char）"><a href="#一般类型的排序（int，double，char）" class="headerlink" title="一般类型的排序（int，double，char）"></a>一般类型的排序（int，double，char）</h1><p>在默认情况下，调用sort函数执行的是从小到大的排序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">	vec.push_back(rand());</span><br><span class="line">&#125;</span><br><span class="line">sort(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = vec.<span class="built_in">begin</span>(); it &lt; vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;<span class="comment">//注意这里使用*表示解引用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="/images/20180512131057453.png" alt="这里写图片描述"></p>
<h1 id="结构体类型的排序（struct）"><a href="#结构体类型的排序（struct）" class="headerlink" title="结构体类型的排序（struct）"></a>结构体类型的排序（struct）</h1><p>结构体定义如下：（试验样本）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ClassDis</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">double</span> distance;</span><br><span class="line">	<span class="keyword">int</span> class1;</span><br><span class="line">	<span class="keyword">int</span> class2;</span><br><span class="line">&#125;ClassDis;</span><br></pre></td></tr></table></figure>
<p>需要自己定义一个比较函数（因为sort默认从小到大排序，因此我们只需要定义什么情况属于“小于”就行了）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义“小于”</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">const</span> ClassDis &amp;a, <span class="keyword">const</span> ClassDis &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.distance &lt; b.distance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;ClassDis&gt; ddd;</span><br><span class="line"><span class="comment">//随机赋值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">double</span> a = <span class="number">0</span>; a &lt; <span class="number">10</span>;a++)</span><br><span class="line">&#123;</span><br><span class="line">	ClassDis aaa&#123; (<span class="keyword">double</span>)rand(), (<span class="keyword">int</span>)a, (<span class="keyword">int</span>)(a + <span class="number">2</span>) &#125;;</span><br><span class="line">	ddd.push_back(aaa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sort</span></span><br><span class="line">sort(ddd.<span class="built_in">begin</span>(), ddd.<span class="built_in">end</span>(), comp);</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;ClassDis&gt;::iterator it = ddd.<span class="built_in">begin</span>(); it &lt; ddd.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; it-&gt;distance &lt;&lt; <span class="string">","</span> &lt;&lt; it-&gt;class1 &lt;&lt; <span class="string">","</span> &lt;&lt; it-&gt;class2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="/images/20180512131106762.png" alt="这里写图片描述"></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据在智慧城市中的应用</title>
    <url>/2018/04/27/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9C%A8%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p><strong>摘要</strong>：文章首先介绍了大数据和智慧城市的概念、大数据的应用潜力和当前国际上智慧城市的建设概况，然后简要介绍了大数据的四个方面共16种关键技术，最后参考欧盟提出的大数据在智慧城市应用的九个方面，提出了自己在这些应用方面的想法。<br><strong>关键词</strong>：大数据，智慧城市，数据采集，数据挖掘，数据处理，数据存储</p>
<h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h1><p>时下最流行的术语要属“大数据”了。在百度指数上，“大数据”一词的搜索次数从2012年以前的每周50次不到，飙升至最高每周9859次，并持续保有热度。顾名思义，大数据的首要特征是其数据量庞大，它的数据量已经从太字节(TB，240)级上升到拍字节(PB，250)级，甚至是泽字节(ZB，270)级。“据统计，如今人们每两天生产的数据量就与人类文明发展至2003年产生的总数据量相当，而迄今为止人类所积累的数据量的90%都来自过去两年。——2015”[1]而在2018的今天，随着科技的进步，数据获取途径更多、数量更大，其中就包括了RFID射频数据、传感器数据、社交网络数据、移动互联网数据等方式获得各种类型的结构化、半结构化及非结构化的海量数据。<br>智慧城市(smart city)这一概念发端于20世纪80年代的信息城市(information city)，经历了20世纪90年代的智能城市(intelligent city)与数字城市(digital city)，在2000年后逐步演化为智慧城市。2009年IBM公司首次提出了智慧城市愿景，使得智慧城市理念与实践在全球范围内迅速传播。[1]在百度指数上，“智慧城市”一词的搜索热度随不及“大数据”，但可以明显看出，从2011年以来，搜索量持续上涨并最终稳定在每周2000次左右。<strong>智慧城市就是基于数字城市、物联网和云计算建立的现实世界与数字世界的融合，运用信息和通信技术手段感测、分析、整合城市运行核心系统的各项关键信息，以实现对人和物的感知、控制和智能服务，从而对包括民生、环保、公共安全、城市服务、工商业活动在内的各种需求做出智能响应。</strong>其实质是利用先进的信息技术，实现城市智慧式管理和运行，进而为城市中的人创造更美好的生活，促进城市的和谐、可持续成长。[2][3]<br>大数据是信息和通信技术领域的概念，而智慧城市的实现依赖于这项技术，因此，研究他们之间的关系，探讨大数据在智慧城市中的应用，对于更好地从民生、环保、公共安全、城市服务等方面促进城市发展，有着至关重要的作用。</p>
<h2 id="1-1-大数据的应用背景"><a href="#1-1-大数据的应用背景" class="headerlink" title="1.1 大数据的应用背景"></a>1.1 大数据的应用背景</h2><p>根据国际商业机器公司（IBM）估计的数据来看，现在我们每天生成的数据高达250兆亿个字节，信息的指数型增长有时被人们视为万灵药，就好比20世纪70年代出现的计算机一样。《连线》杂志的前主编克里斯·安德森曾经在2008年的一篇文章中说：“数量庞大的数据会使人们不再需要理论，甚至不再需要科学的方法。”<br>被誉为大数据时代的预言家的“维克托-迈尔-舍恩伯格”在2012年出版的《大数据时代》一书中说到：“在大数据时代，我们的思维发生了巨大的变革，我们不再关注事物的因果关系，而更多的关注它们的相关关系。”从哲学的层面来讲，大数据时代发生的思维变革主要影响了人们的“理性认知世界”的过程。人类的理性认知主要包括概念、判断、推理三个过程，概念是人们对一个事物进行总结、概括、抽象后的认知，判断是通过学习对事物进行定义，推理是通过已有判断得出新的判断的过程。在过去，人们进行理性认知的过程往往通过部分样本来进行，也就是说，通过事物的样本来获取整体认知，而在大数据时代，样本即总体，对事物的认知方式也来到了一个新的阶段。<br>那么这种认知方式有何好处呢？很显然，它具有高效性和准确性。以往，科学家们在一个科学规律发现之前，往往要进行大量的试验和理论论证，而且实验的样本也难以包含全部，只是一种随机的样本，那么这个试验加上推理论证的方法就会耗费大量的时间，而在实际应用时，又会遇到很多的问题。如今，<strong>云计算理念下的虚拟化技术</strong>大幅提高了人类对数据的处理能力，对海量数据的组织、整理、归纳和学习成为现实，而且由于是对所有的数据进行操作，样本=总体，那么得到的结果也更加准确。同时，由于计算的高效，在获取新的知识后，对已有认知进行更新也将十分迅速。<br>如今，大数据主要被应用于预测领域。美国最具影响力的预测专家纳特·西尔弗在2013年出版的《信号与噪声》一书中列举了大量涉及不同领域的大数据预测。包括政治选举预测、棒球比赛预测、天气预测、地震预测、经济预测、传染性疾病预测、国际象棋大战、扑克牌游戏、股票市场、温室效应、恐怖主义，几乎涵盖了政治、经济、社会、文化、娱乐等方方面面，由此可以看出，大数据在预测方面具有巨大的潜力。</p>
<h2 id="1-2-大数据在智慧城市中的应用潜力"><a href="#1-2-大数据在智慧城市中的应用潜力" class="headerlink" title="1.2 大数据在智慧城市中的应用潜力"></a>1.2 大数据在智慧城市中的应用潜力</h2><p>大数据是智慧城市各个领域都能够实现“智慧化”的关键性支撑技术，智慧城市的建设离不开大数据。建设智慧城市，是城市发展的新范式和新战略。大数据将遍布智慧城市的方方面面，从政府决策与服务，到人们衣食住行的生活方式，再到城市的产业布局和规划，直到城市的运营和管理方式，都将在大数据支撑下走向“智慧化”，大数据成为智慧城市的智慧引擎。[4]<br>我们在前面说到，智慧城市是基于数字城市、物联网和云计算建立的现实世界与数字世界的融合，以实现对人和物的感知、控制和智能服务。感知是数字城市的功能，控制和智能服务是智慧的高级阶段。<br>首先在感知方面，随着科技水平的进步，我们可以多渠道、多方式地采集海量数据，从地下、地表到航空、航天，从室外到室内，或者沿着时间轴，贯穿一个时间段地收集数据。<br>其次是控制和服务方面。正如前面所说，数据量在近两年有了指数级的增长，但这不仅是采集技术进步的功劳。纳特·西弗斯在《信号与噪声中》说：“一旦信息的增长速度过快，而我们处理信息的能力尚且不足，情况就很危险。过去40年的人类历史表明，把信息转变为有用的只是可能还需要很长时间，一不小心，我们就有可能倒退回去。”显然，和大数据一同发展的，还有大数据信息处理技术。我们利用云计算对海量数据进行信息提取，进而利用机器学习的方法，进行预测，就能提供智能服务，也能实现对某些事物的控制。</p>
<h2 id="1-3-智慧城市建设情况-4"><a href="#1-3-智慧城市建设情况-4" class="headerlink" title="1.3 智慧城市建设情况[4]"></a>1.3 智慧城市建设情况[4]</h2><p>目前，我国正处于城镇化加速发展的时期，部分地区“城市病”问题日益严峻。为解决城市发展难题，实现城市可持续发展，建设智慧城市已成为当今世界城市发展不可逆转的历史潮流。智慧城市的建设在国内外许多地区已经展开，并取得了一系列成果，国内的如智慧上海、智慧双流；国外如新加坡的“智慧国计划”、韩国的“U-City计划”等。</p>
<h1 id="2-大数据的关键技术-5"><a href="#2-大数据的关键技术-5" class="headerlink" title="2. 大数据的关键技术[5]"></a>2. 大数据的关键技术[5]</h1><p>大数据应用于智慧城市建设的关键技术主要有四个方面：大数据采集，大数据预处理、大数据存储及管理、大数据分析及挖掘。下面将简要阐述四个方面共16项技术及其在智慧城市建设中的应用。</p>
<h2 id="2-1-大数据采集"><a href="#2-1-大数据采集" class="headerlink" title="2.1 大数据采集"></a>2.1 大数据采集</h2><p>数据采集是大数据生命周期的第一个环节，除了通过RFID射频、传感器等硬件技术获取技术，还可以获取已有数据库数据、社交网络数据、移动互联网数据等各种类型的结构化、半结构化及非结构化的海量数据。由于可能有成千上万的用户同时进行并发访问和操作，因此，必须采用专门针对大数据的采集方法，其主要包括以下几种：</p>
<h3 id="2-1-1-无线射频和传感器"><a href="#2-1-1-无线射频和传感器" class="headerlink" title="2.1.1 无线射频和传感器"></a>2.1.1 无线射频和传感器</h3><p>传感器是一种获取电信号的技术，分为接触式和非接触式；而无线射频技术是一种非接触式通信技术，可通过无线电讯号识别特定目标并读写相关数据。</p>
<h3 id="2-1-2-数据库采集"><a href="#2-1-2-数据库采集" class="headerlink" title="2.1.2 数据库采集"></a>2.1.2 数据库采集</h3><p>从已有的数据库中采集数据。传统的关系型数据库有MySQL和Oracle等。常用的的工具有Sqoop和结构化数据库间的ETL工具，当然当前对于开源的Kettle和Talend本身也包含了大数据集成内容，可以实现和HDFS，HBase和主流NoSQL数据库之间的数据同步和集成。</p>
<h3 id="2-1-3-网络数据采集"><a href="#2-1-3-网络数据采集" class="headerlink" title="2.1.3 网络数据采集"></a>2.1.3 网络数据采集</h3><p>网络数据采集主要是借助网络爬虫或网站公开API等方式，从网站上获取数据信息的过程。可以获取网络上非结构化及半结构化数据，并存储。</p>
<h3 id="2-1-4-文件采集"><a href="#2-1-4-文件采集" class="headerlink" title="2.1.4 文件采集"></a>2.1.4 文件采集</h3><p>使用Flume实现分布式的海量日志采集、聚合和传输。也可以使用轻量级的ELK(Elasticsearch、Logstash、Kibana三个开源软件的组合)进行日志收集处理。</p>
<h2 id="2-2-大数据预处理"><a href="#2-2-大数据预处理" class="headerlink" title="2.2 大数据预处理"></a>2.2 大数据预处理</h2><p>大数据数量巨大，但也会有残缺、虚假、过时的数据。无效的数据不仅没有任何作用，还会影响后续操作，因此数据的预处理就极为重要。大数据预处理就是对采集到的原始数据进行清洗、填补、平滑、合并、规格化以及检查一致性等。主要包括：数据清理、数据集成、数据转换以及数据规约四大部分。</p>
<h3 id="2-2-1-数据清理"><a href="#2-2-1-数据清理" class="headerlink" title="2.2.1 数据清理"></a>2.2.1 数据清理</h3><p>数据清理主要包含遗漏值处理(缺少感兴趣的属性)、噪音数据处理(数据中存在着错误、或偏离期望值的数据)、不一致数据处理。主要的清洗工具是ETL(Extraction/Transformation/Loading)和Potter’s Wheel。</p>
<h3 id="2-2-2-数据集成"><a href="#2-2-2-数据集成" class="headerlink" title="2.2.2 数据集成"></a>2.2.2 数据集成</h3><p>数据集成是指将多个数据源中的数据合并存放到一个一致的数据存储库中。</p>
<h3 id="2-2-3-数据转换"><a href="#2-2-3-数据转换" class="headerlink" title="2.2.3 数据转换"></a>2.2.3 数据转换</h3><p>数据转换包括两类：第一类，数据名称及格式的统一，即数据粒度转换、商务规则计算以及统一的命名、数据格式、计量单位等；第二类，数据仓库中存在源数据库中可能不存在的数据，因此需要进行字段的组合、分割或计算。</p>
<h3 id="2-2-4-数据规约"><a href="#2-2-4-数据规约" class="headerlink" title="2.2.4 数据规约"></a>2.2.4 数据规约</h3><p>数据归约是指在尽可能保持数据原貌的前提下，最大限度地精简数据量，主要包括：数据方聚集、维规约、数据压缩、数值规约和概念分层等。</p>
<h2 id="2-3-大数据存储"><a href="#2-3-大数据存储" class="headerlink" title="2.3 大数据存储"></a>2.3 大数据存储</h2><p>大数据存储与管理要用存储器把采集到的数据存储起来，建立相应的数据库，以便管理和调用。大数据存储技术路线最典型的共有三种：</p>
<h3 id="2-3-1-MPP架构的新型数据库集群"><a href="#2-3-1-MPP架构的新型数据库集群" class="headerlink" title="2.3.1 MPP架构的新型数据库集群"></a>2.3.1 MPP架构的新型数据库集群</h3><p>MPP（Massively Parallel Processing，大规模并行处理系统）。采用Shared Nothing架构，通过列存储、粗粒度索引等多项大数据处理技术，再结合MPP架构高效的分布式计算模式，完成对分析类应用的支撑，运行环境多为低成本 PC Server，<strong>对于企业新一代的数据仓库和结构化数据分析，目前最佳选择是MPP数据库。</strong></p>
<h3 id="2-3-2-基于Hadoop的技术扩展和封装"><a href="#2-3-2-基于Hadoop的技术扩展和封装" class="headerlink" title="2.3.2 基于Hadoop的技术扩展和封装"></a>2.3.2 基于Hadoop的技术扩展和封装</h3><p>这里面有几十种NoSQL技术，也在进一步的细分。<strong>对于非结构、半结构化数据处理、复杂的ETL流程、复杂的数据挖掘和计算模型，Hadoop平台更擅长。</strong></p>
<h3 id="2-3-3-大数据一体机"><a href="#2-3-3-大数据一体机" class="headerlink" title="2.3.3 大数据一体机"></a>2.3.3 大数据一体机</h3><p>这是一种专为大数据的分析处理而设计的软、硬件结合的产品，由一组集成的服务器、存储设备、操作系统、数据库管理系统以及为数据查询、处理、分析用途而预先安装及优化的软件组成，高性能大数据一体机具有良好的稳定性和纵向扩展性。</p>
<h2 id="2-4-大数据分析挖掘"><a href="#2-4-大数据分析挖掘" class="headerlink" title="2.4 大数据分析挖掘"></a>2.4 大数据分析挖掘</h2><p>数据的分析与挖掘主要目的是把隐藏在一大批看来杂乱无章的数据中的信息集中起来，进行萃取、提炼，以找出潜在有用的信息和所研究对象的内在规律的过程。包括可视化分析、数据挖掘算法、预测性分析、语义引擎以及数据质量和数据管理五大方面。</p>
<h3 id="2-4-1-可视化分析"><a href="#2-4-1-可视化分析" class="headerlink" title="2.4.1 可视化分析"></a>2.4.1 可视化分析</h3><p>数据可视化主要是借助于图形化手段，清晰有效地传达与沟通信息。目的是做出简单明了、清晰直观，更易于接受的图表。</p>
<h3 id="2-4-2-数据挖掘算法"><a href="#2-4-2-数据挖掘算法" class="headerlink" title="2.4.2 数据挖掘算法"></a>2.4.2 数据挖掘算法</h3><p>数据挖掘算法是大数据分析的理论核心，数据挖掘的算法多种多样，不同的算法基于不同的数据类型和格式会呈现出数据所具备的不同特点，致力于深入数据内部，挖掘出数据的价值。</p>
<h3 id="2-4-3-预测性分析"><a href="#2-4-3-预测性分析" class="headerlink" title="2.4.3 预测性分析"></a>2.4.3 预测性分析</h3><p>预测性分析结合了多种高级分析功能，包括特别统计分析、预测建模、数据挖掘、文本分析、实体分析、优化、实时评分、机器学习等。</p>
<h3 id="2-4-4-语义引擎"><a href="#2-4-4-语义引擎" class="headerlink" title="2.4.4 语义引擎"></a>2.4.4 语义引擎</h3><p>语义引擎就是给已有的数据（结构化或非结构化）加上语义层。语义技术目的是让用户更快、更准确、更全面地获得所需信息，提高用户的互联网体验。</p>
<h3 id="2-4-5-数据质量管理"><a href="#2-4-5-数据质量管理" class="headerlink" title="2.4.5 数据质量管理"></a>2.4.5 数据质量管理</h3><p>数据质量管理是指对数据从生命周期中每个阶段（计划、获取、存储、共享、维护、应用、消亡）可能引发的各类数据质量问题进行识别、度量、监控、预警等一系列管理活动，并通过改善和提高组织的管理水平使得数据质量获得进一步提高。</p>
<h1 id="3-大数据在智慧城市中的应用-6"><a href="#3-大数据在智慧城市中的应用-6" class="headerlink" title="3. 大数据在智慧城市中的应用[6]"></a>3. 大数据在智慧城市中的应用[6]</h1><p>首先举出当前大数据在智慧城市中应用的九个方面，然后以此为思路导向，提出自己的想法。</p>
<h2 id="3-1-智慧经济"><a href="#3-1-智慧经济" class="headerlink" title="3.1 智慧经济"></a>3.1 智慧经济</h2><p>在商业上，大数据预测可以用于分析用户的购物行为，什么商品搭配在一起会卖得更好，还可以通过分析找到最佳客户。在淘宝平台上，商家可以根据淘宝的数据魔方了解平台上的行业宏观情况、自己品牌的市场状况、消费者行为情况等，并可以据此作出经营决策；阿里公司根据在淘宝网上中小企业的交易状况筛选出财务健康和诚信的企业，从而无需担保来放贷，目前已放贷300多亿元，坏帐率仅0.3％，大大低于商业银行；IBM日本公司建立了一个经济指标预测系统，从互联网新闻中搜索影响制造业的480项经济数据，计算出采购经理人指数（PMI，用于评估行业兴衰）；华尔街对冲基金依据购物网站顾客评论分析企业产品销售状况，华尔街银行根据求职网站岗位数量推断就业率。<br>企业通过信息收集很好的掌握企业的运营状况，分析居民与财务有关的记录包括贷款申请、租赁、房地产、购买零售商品、纳税申报、水电费缴付、有线电视缴费、电话缴费、报纸与杂志订阅、机动车档案等，能够得出消费者的个人信用评分，从而推断客户支付意向与支付能力，发现潜在的商机和欺诈行为。<br>利用大数据分析可实现对合理库存量的管理；利用心情分析方法可以分析用户在购物时的心情，从而为其安排更好的购物方案；通过分析顾客在购买商品时的关联性，超市经营者可以做出更好的商品布局。</p>
<h2 id="3-2-智慧治理"><a href="#3-2-智慧治理" class="headerlink" title="3.2 智慧治理"></a>3.2 智慧治理</h2><p>美国纽约的警察分析交通拥堵与犯罪发生地点的关系，有效改进治安；美国纽约的交通部门从交通违规和事故的统计数据中发现规律，改进了道路设计；电信运营商拥有大量的手机数据，通过对手机数据的挖掘，不针对个人而是着眼于群体行为，可从中分析：实时动态的流动人口的来源及分布情况、出行和实时交通客流信息及拥塞情况；利用手机用户身份和位置的检测可了解突发性事件的聚集情况；MIT的Reality Mining项目，通过对10万多人手机的通话、短信和空间位置等信息进行处理，提取人们行为的时空规则性和重复性，进行流行病预警和犯罪预测；利用短信、微博、微信和搜索引擎可以收集热点事件与舆情挖掘；</p>
<h2 id="3-3-环境监测"><a href="#3-3-环境监测" class="headerlink" title="3.3 环境监测"></a>3.3 环境监测</h2><p>通过卫星、无人机、地面无人车等遥感平台采集空间数据。对森林和植被、湖泊、河流、土地进行数据采集监测和分析，能够判别城市中有没有污染。</p>
<h2 id="3-4-智慧医疗"><a href="#3-4-智慧医疗" class="headerlink" title="3.4 智慧医疗"></a>3.4 智慧医疗</h2><p>智慧医疗主要体现在医疗模式的开发。首先是居家监护，收集中老年人或婴幼儿很长时间（数年甚至数十年）的健康数据，进行分析预测，可以从一定程度上避免意外状况的发生；其次是医疗网络监控，根据网民搜索内容分析全球范围内流感等病疫传播状况；另外还有个性化医疗，有研究表明，同样的治疗对一些病人无效，75％癌症病人，70％的老年痴呆者、50％的关节炎病人、43％的糖尿病患者、40％的哮喘病患者，38％的抑郁症病人，因为人体对药品代谢方式的差异取决于个体特定的基因、酶和蛋白质组合，因此基因信息对选择最优治疗非常关键。对人体个性体质的挖掘会做到真正意义上的对症下药，一个人的基因信息大概1GB；最后，参考舆情监督，可以通过社交网络获取许多患者分享的临床症状和经验，增加医院在这些方面的临床统计资料。</p>
<h2 id="3-5-智能搜索"><a href="#3-5-智能搜索" class="headerlink" title="3.5 智能搜索"></a>3.5 智能搜索</h2><p>如今，搜索引擎不再局限于基于文本字符串的匹配搜索，出现了基于图片的搜索、基于语音的搜索、基于位置的搜索。例如百度搜索，图片搜索和文字搜索已经达到了非常高的精度，而百度旗下的百度地图，在语音搜索和基于位置的搜索也做的相当令人满意。<br>在搜索形式上，除了现有的几种搜索，还可以借助传感器和机器学习，利用大数据分析方法，进行基于气味的搜索、基于视频信息的搜索等。<br>在搜索内容上，智能搜索的理念被用于理解用户的语义，分析用户在进行搜索过程时的心情和状态，据此提供用户真正感兴趣的内容。</p>
<h2 id="3-6-舆情监测"><a href="#3-6-舆情监测" class="headerlink" title="3.6 舆情监测"></a>3.6 舆情监测</h2><p>随着大众传播的发展以及新型传播的发展，传播领域将产生大量数据。互联网具有虚拟性、隐蔽性、发散性、渗透性和随意性等特点，例如微博传播具有裂变性、主动性、即时性、便捷性、交互性、草根性，跟进性和临场感，每一个微博用户既是”服务器”，也是”受众”。<br>通过互联网进行舆情监测，主要可以应用于政府决策、商品销售、产品研发等方面。政府通过舆情监测，及时发现存在的负面舆情，进行引导和调控，稳定社会；公司企业通过舆情监测，分析用户需求和需求分布，控制主流和非主流商品的销售状况；科研机构或大学通过舆情监测，获取社会对科研产品的需求情况，确定研发方向和研究课题。</p>
<h2 id="3-7-精准营销"><a href="#3-7-精准营销" class="headerlink" title="3.7 精准营销"></a>3.7 精准营销</h2><p>精准营销有两个方面的内容，一是根据顾客需求，在合适的时间，通过合适渠道，把合适的营销信息投送给每个顾客；二是通过分析顾客行为，进行商品的预备。<br>第一方面的内容现在许多大公司如今日头条、百度、阿里巴巴都已经做得十分完善，其他的公司也能做得媲美这些大公司。对于第二方面商品预备物资分配的问题仍有更多的开发空间，以身边的商家为例，首先是外卖行业，现在存在送货慢、备餐久等问题，商家可以通过分析点餐者的点餐时段、菜品偏好，提前准备好餐品，并和外送公司达成沟通，提高送餐效率；其次是零售超市，目前存在的问题是，超市和顾客供需不对等，商品月均销量起伏等，这影响了超市的经营和顾客的体验。超市可以通过分析需求，在需求剧烈的时段增加商品供应，或者可以在销售淡季进行回馈活动来增长销量等。</p>
<h2 id="3-8-犯罪预警"><a href="#3-8-犯罪预警" class="headerlink" title="3.8 犯罪预警"></a>3.8 犯罪预警</h2><p>可以通过监测通话、聊天等信息获取可能存在的犯罪。不过这个在中国基本上不能实现。能实现的只有在公共电话、视频监控中进行监测，例如监测视频中的不正常行为，电话中语音内容的识别，但中国人口众多，视频和语音数据量巨大，实现难度相当高。</p>
<h2 id="3-9-市场价格监测"><a href="#3-9-市场价格监测" class="headerlink" title="3.9 市场价格监测"></a>3.9 市场价格监测</h2><p>通过分析，可以发现正常的价格变化规律，如果价格变化持续异常，就可以怀疑存在价格垄断的行为。市场价格监测可以为政府进行宏观调控提供参考依据</p>
<h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>埃里克·西格尔在《大数据预测》一书中说到：“大数据时代下的核心——预测分析已经在商业和社会中得到广泛应用。随着越来越多的数据被记录和整理，未来预测分析必定会成为所有领域的关键技术。”诚如西格尔所言，当大数据与智慧城市完美契合，将是对传统城市模式的一种极大的颠覆。过去人们在城市里生活，思考如何去迎合这个冰冷的钢铁森林，而在智慧城市的服务之下，仿佛一切有了温度，人们在城市的每个角落都能感受到她的温情。智慧城市的理念和技术将成为实现服务型城市的关键。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] <a href="http://www.cbdio.com/BigData/2015-09/08/content_3776453.htm" target="_blank" rel="noopener">刘伦.大数据时代的智慧城市规划：国际经验[J].国际城市规划,2015,(9)</a><br>[2] <a href="https://www.baidu.com" target="_blank" rel="noopener">百度百科</a><br>[3] <a href="http://www.eastups.com/cn_php/news_show_62_860.html" target="_blank" rel="noopener">易事特公司.大数据在智慧城市中的应用,2016,(11)</a><br>[4] <a href="https://www.aliyun.com" target="_blank" rel="noopener">阿里云</a><br>[5] <a href="http://bigdata.51cto.com/art/201610/519300.htm" target="_blank" rel="noopener">51CTO大数据</a><br>[6] <a href="https://www.aliyun.com/zixun/content/2_6_1870887.html" target="_blank" rel="noopener">大数据在智慧城市的10大应用</a></p>
]]></content>
      <categories>
        <category>智慧城市</category>
      </categories>
      <tags>
        <tag>大数据关键技术</tag>
        <tag>大数据应用</tag>
        <tag>智慧城市</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Java+NetBeans设计web服务和页面，用Tomcat部署网页</title>
    <url>/2018/04/25/%E4%BD%BF%E7%94%A8Java-NetBeans%E8%AE%BE%E8%AE%A1web%E6%9C%8D%E5%8A%A1%E5%92%8C%E9%A1%B5%E9%9D%A2%EF%BC%8C%E7%94%A8Tomcat%E9%83%A8%E7%BD%B2%E7%BD%91%E9%A1%B5/</url>
    <content><![CDATA[<h1 id="一-安装NetBeans（自动安装jdk）"><a href="#一-安装NetBeans（自动安装jdk）" class="headerlink" title="一 安装NetBeans（自动安装jdk）"></a>一 安装NetBeans（自动安装jdk）</h1><ol>
<li>进入oracle的下载界面：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></li>
</ol>
<p><img src="/images/20180425005850894.png" alt="图 javaDownload.png"></p>
<ol>
<li>选择右侧那个NetBeans with JDK 8，下载安装，一路绿灯，在这个过程中已经顺带安装好了Java（jdk1.8.0_171），但是当打开NetBeans IDE的时候，会发现无法创建Java web的项目，因此需要继续安装NetBeans。</li>
<li>下载另一个版本的NetBeans，选择包含“Java EE”功能的Java EE或ALL。<ul>
<li>8.2版本：<a href="https://netbeans.org/downloads/8.2/" target="_blank" rel="noopener">https://netbeans.org/downloads/8.2/</a></li>
<li>最新版本：<a href="https://netbeans.org/downloads/" target="_blank" rel="noopener">https://netbeans.org/downloads/</a></li>
</ul>
</li>
</ol>
<p><img src="/images/20180425005959513.png" alt="这里写图片描述"></p>
<ol>
<li>然后安装，一开始有一个额外安装的东西，是两个类似<strong>容器</strong>的东西，以后你的主机作为服务器<strong>发布服务</strong>时会用到，一个叫<strong>GlassFish Server</strong>，另一个是<strong>Apache Tomcat</strong>，全都勾上。最后注意安装目录和第二步安装的那个IDE的位置要一样</li>
<li>配置Java环境变量</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th>变量名</th>
<th>地址</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>JAVA_HOME</strong></td>
<td>JDK所在目录</td>
</tr>
<tr>
<td><strong>CLASSPATH</strong></td>
<td>%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</td>
</tr>
<tr>
<td><strong>Path</strong></td>
<td>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li>NetBeans+Java安装完毕。</li>
</ol>
<blockquote>
<p>补充一下GlassFish和Tomcat的区别（来自知乎用户：chainho）<br>两者本质上不是一类型的东西。Tomcat是Servlet容器，GlassFish是JEE容器。JEE容器必然是包含Servlet容器这一部分功能的。ps:以前版本的GlassFish，其内部的Servlet容器实现就是直接采用的Tomcat。当然，JEE容器提供了更多的功能，同时也有方便的管理控制台可以在界面上进行各种配置和应用部署等，比Tomcat的Manager应用要功能丰富的多。<br>作者：chainho<br>链接：<a href="https://www.zhihu.com/question/20039000/answer/102719430" target="_blank" rel="noopener">https://www.zhihu.com/question/20039000/answer/102719430</a><br>来源：知乎</p>
</blockquote>
<h1 id="二-创建服务器"><a href="#二-创建服务器" class="headerlink" title="二 创建服务器"></a>二 创建服务器</h1><ol>
<li>创建Java web项目，选择Web应用程序</li>
</ol>
<p><img src="/images/20180425010023701.png" alt="选择web应用程序"></p>
<ol>
<li>选择GlassFish服务器，版本什么的默认就好了</li>
</ol>
<p><img src="/images/20180425010037179.png" alt="选择服务器"></p>
<p>一路next之后就创建好了一个项目啦，项目内容差不多就如下这几个</p>
<p><img src="/images/20180425010046699.png" alt="项目内容"></p>
<p>这时候这个index.html就是主界面的源码，然后你可以在左侧右键项目名称添加服务、页面等</p>
<p><img src="/images/2018042501010764.png" alt="项目添加内容"></p>
<p>在添加内容中，可以添加html页面，也可以添加服务，服务就不添加了，添加服务看后续教程，直接使用默认的index.html举例。</p>
<p><img src="/images/20180425010202101.bmp" alt="index.html"></p>
<ol>
<li>至此服务器创建完毕</li>
</ol>
<h1 id="三-发布服务"><a href="#三-发布服务" class="headerlink" title="三 发布服务"></a>三 发布服务</h1><h2 id="1-构建-war包"><a href="#1-构建-war包" class="headerlink" title="1. 构建.war包"></a>1. 构建.war包</h2><p>当你添加完index.html页面或者其他页面或者服务之后，想给发布出去，怎么办呢？右键项目，点击“清理并构建”</p>
<p><img src="/images/20180425010224367.png" alt="这里写图片描述"></p>
<p>然后在项目保存的位置中就多了一个dist文件夹，文件夹里有一个.war文件，这是一个类似于压缩包的东西，在服务器部署（发布）的时候用的到。</p>
<p><img src="/images/20180425010236132.png" alt="这里写图片描述"></p>
<p>有了这个包之后，NetBeans的使命就结束了，关了它！（不然会和Tomcat冲突）</p>
<h2 id="2-配置Tomcat"><a href="#2-配置Tomcat" class="headerlink" title="2. 配置Tomcat"></a>2. 配置Tomcat</h2><p>由于是简单的java web服务，不需要使用在线或远程管理功能，我们使用较为方便的Tomcat来部署服务器，首先测试Tomcat的可用性：</p>
<p>在Tomcat安装目录下的bin文件夹中打开startup.bat</p>
<p><img src="/images/20180425010322208.bmp" alt="这里写图片描述"></p>
<p>好吧一般情况下打不开的，这时候打开cmd，把startup.bat拖进去，打开：</p>
<p><img src="/images/20180425010338300.png" alt="startup.bat报错"></p>
<p>啥意思？CATALINA_HOME环境变量没有正确定义？看来它需要点东西。</p>
<p>把cmd关了，打开环境变量，在系统变量添加<strong>CATALINA_HOME</strong>，路径就放上Tomcat的安装目录，就是上面说到的bin文件夹的上一级（包含bin的那个文件夹），注意<strong>不要有分号</strong></p>
<p>这时候就懒得打开cmd了，直接双击startup.bat，然后它就运行了</p>
<p><img src="/images/20180425010353795.png" alt="这里写图片描述"></p>
<p>这时候你的服务器就算是配置好了。随便打开一个浏览器测试一下，输入<a href="http://localhost:8080，看看效果">http://localhost:8080，看看效果</a></p>
<p><img src="/images/20180425010410644.png" alt="这里写图片描述"></p>
<p>看到这个页面就算成功启动Tomcat了。</p>
<h2 id="3-解析-war包并创建webapp"><a href="#3-解析-war包并创建webapp" class="headerlink" title="3. 解析.war包并创建webapp"></a>3. 解析.war包并创建webapp</h2><p>保持服务器开着的状态，然后把第一步得到的.war文件拖（copy）到Tomcat安装目录（没错就是上面那个环境变量的地址）中的webapps文件夹里</p>
<p><img src="/images/20180425010452716.png" alt="这里写图片描述"></p>
<p>刚进去是这样的：</p>
<p><img src="/images/20180425010500417.png" alt="这里写图片描述"></p>
<p>然后因为服务器开着，过一会儿就自己创建了一个同名的文件夹：</p>
<p><img src="/images/20180425010514762.png" alt="这里写图片描述"></p>
<p>这时候在<code>http://localhost:8080</code>后面加上<code>/文件夹名</code>，就可以看到index.html页面的内容了，这时候算是部署成功了。</p>
<p><img src="/images/20180425010529794.png" alt="这里写图片描述"></p>
<p>那别人要怎么访问呢？？他们只要将localhost换成你电脑的ipv4地址就行了，用cmd里的ipconfig命令获取该地址。（不过由于是本地服务器，只局限于局域网访问该服务器，并且Tomcat必须保持打开的状态，否则无法访问）</p>
<p><img src="/images/20180425010537686.png" alt="这里写图片描述"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>Java</tag>
        <tag>NetBeans</tag>
      </tags>
  </entry>
  <entry>
    <title>利用eigen库简单实现矩阵功能</title>
    <url>/2018/05/19/%E5%88%A9%E7%94%A8eigen%E5%BA%93%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E7%9F%A9%E9%98%B5%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<blockquote>
<p>Eigen是目前运行速度较快的C++矩阵运算库，而且其轻便小巧安装方便的特点简直是吸引人啊！特做此笔记，记录一下这个安装简单、体积轻巧、功能强大的C++库。</p>
</blockquote>
<h1 id="1-下载和安装"><a href="#1-下载和安装" class="headerlink" title="1. 下载和安装"></a>1. 下载和安装</h1><p><a href="http://eigen.tuxfamily.org/index.php?title=Main_Page" target="_blank" rel="noopener">Eigen官网</a>下载Eigen压缩包，大约10M以内。（3.3.4版本的大小为2.91M）</p>
<p>Eigen的另一大优势在于其方便的安装，完全不需要任何安装程序，解压压缩包就可以直接使用。</p>
<ul>
<li>可以放在系统盘上，通过<strong>环境变量</strong>调用。</li>
<li>也可以直接丢到C++工程里，通过<strong>相对路径</strong>调用</li>
</ul>
<p>需要注意的是，调用的时候，只需要把 <strong>解压缩后的文件夹</strong> 作为 <strong>VC++附加包含目录（项目属性-C/C++-附加包含目录）</strong> 添加即可。</p>
<h1 id="2-Hello-World"><a href="#2-Hello-World" class="headerlink" title="2. Hello World"></a>2. Hello World</h1><p>只需要在include中包含<code>&lt;Eigen/Dense&gt;</code>，就可以调用Eigen的所有功能。</p>
<p>例程如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">MatrixXd <span class="title">m</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">	m(<span class="number">0</span>, <span class="number">0</span>) = <span class="number">3</span>;</span><br><span class="line">	m(<span class="number">1</span>, <span class="number">0</span>) = <span class="number">2.5</span>;</span><br><span class="line">	m(<span class="number">0</span>, <span class="number">1</span>) = <span class="number">-1</span>;</span><br><span class="line">	m(<span class="number">1</span>, <span class="number">1</span>) = m(<span class="number">1</span>, <span class="number">0</span>) + m(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<p><img src="/images/20180519213341470.png" alt="这里写图片描述"></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Eigen</tag>
      </tags>
  </entry>
  <entry>
    <title>新时代的媒介</title>
    <url>/2018/05/12/%E6%96%B0%E6%97%B6%E4%BB%A3%E7%9A%84%E5%AA%92%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="1-对于书上理论的理解：麦克卢汉的“冷媒介”和“热媒介”理论"><a href="#1-对于书上理论的理解：麦克卢汉的“冷媒介”和“热媒介”理论" class="headerlink" title="1. 对于书上理论的理解：麦克卢汉的“冷媒介”和“热媒介”理论"></a>1. 对于书上理论的理解：麦克卢汉的“冷媒介”和“热媒介”理论</h1><p>想搞清楚冷热媒介，首先得弄清楚另外一个麦克卢汉经常说起的概念：感官比率。</p>
<p>媒介是人的延伸，换句话讲，媒介在做的事情，一定是人本来就可以做的事情，媒介只是把器官和功能延伸了。比如你本来就可以“看”东西，显微镜只是放大了“眼睛”的功能，让你“看”的更加细微了。</p>
<p>我们以“显微镜作为媒介参与观察”这个事情举例，肉眼看到一片叶子时，你的耳朵还能听到风声，鼻子还能闻到植物气息，甚至还有手碰叶子的触觉。这个时候呢，你调动起来的感官有:眼，耳，鼻，身。你感觉到的讯息呢，有:色，声，香，触。在我们的模型下，此时你动用了四种感官。这个时候，借助媒介（眼睛的延伸），你看的更仔细了。但是!同时由于聚精会神地观察，耳朵、鼻子、触觉的职能也暂时被抑制了!此时你只动用了一种感官功能，就是看。</p>
<p>下面是一个重要结论:</p>
<p>引入显微镜这一媒介前后，你的感官比率是完全不同的。前面有听有看有闻有触，现在只剩下“看”这一官能深度切入。按照麦克卢汉的观点，任何媒介的引入，势必带来感官比率的变化，同时会对外部世界发生挤压。比如高铁引入，扩大了腿的职能，同时也摧毁了从前步行赶路的场景，并诱发世界构成方式的变化。高铁通过售卖自己的功用性，深度改变了你的生活，并形塑了移动场景中的全新感官比率。</p>
<p>冷媒介热媒介，也和感官比率密切相关。</p>
<p><strong>热媒介具有高清晰度，通过它你可以实现某种知觉方式的深度切入，离了它就不行，但是使用的时候，也被媒介定义了唯一的切入方式。</strong></p>
<p>比如使用显微镜，你就不能再像从前一样即时性地又看又听又闻又感受，并且你也不能像开车看风景一样呼啸而过地看。作为一种“观察”的热媒介，显微镜带来的功用是高清晰度的，也是高能动的，你不需要再调动身体各种官能去“参与”，你只需要按照它规定的参与方式去参与就好了。</p>
<p><strong>这就是热媒介的高清晰度、低包容性，或者说低参与度。</strong></p>
<p><strong>与热媒介相反，冷媒介是低清晰的，或者说具有模糊性的。它其实不是“省略”了什么东西，而是在通过“媒介”进行“延伸”的过程中，对“特定官能”延伸的本身就不够。也就是说，要靠你的脑补，发挥能动性，和媒介一起完成一个行动。</strong>比如杜尚的作品《喷泉》，你不主动参与进去，那它就是个小便池。</p>
<p>也是为这个原因，冷媒介才被描述为“低清晰”、“高参与”。这个清晰度，是一种比喻的说法，不是说什么画质不清晰啊像素不够啊什么的。它和画质的清晰度（意味着观察结果的清晰度）的关系，是包含和被包含的关系。</p>
<p><strong>到底什么是清晰度呢？</strong>说白了，就是当媒介引申你的官能时，这种感官所占的比率。这里有个分数。分子是媒介延伸官能的强度，分母是所有官能的总强度。分子越大，比率越高，清晰度越高。</p>
<p>还拿显微镜说事儿。你裸眼观察某物，视觉强度为5，听觉强度为3，触觉强度为2，嗅觉强度为1，此时“裸眼看”的清晰度，用感官比率表示，就是5/11。用显微镜观察呢？视觉强度比方说加强了4倍，就是20，其它肯定都弱化到很小了（这是媒介的使用方式决定的），听觉为1，触觉为0.5，嗅觉为0.5，那么“使用显微镜看”的清晰度，就是20/22。两项对比，后面的大，也就是清晰度更高了。同时，你被“媒介”（即眼睛和显微镜）束缚得也更紧了。</p>
<p>那么，为什么说电视是低清晰的冷媒介，电影是高清晰的热媒介呢？正常情况下，第一，准时准点，电影开始前你会坐到坐位上，等着电影开场。开场之后，你聚精会神，被动接受电影放映给你的故事，并浸入其中。（注意是“浸入”，不是“卷入”。浸入意味完全接受媒介预设的规则，卷入则未必需要完全接受媒介的规则）电影里，英格丽褒曼演一个间谍，那她就是一个间谍。诺兰兄弟用闪回表示回忆，那它就是表示回忆。周润发胸口挨了一枪，那他就是挨了一枪……在这个过程中，你放弃了对规则的解释权，完全由电影带你飞，即便有所思考，也得是在电影规则的基础上思考。</p>
<p>那么如果没有黑社会冲进来火并、房倒屋塌、皇帝死了之类的不可抗因素，你就会交出身体，在两个小时内完完全全沉浸其中。你不会听贝多芬，也不会吃海鲜大餐，更不会对旁边的兄弟来一套军体拳，你只会看，并且主要就是看电影。毕竟黑灯瞎火的，也只能看这个了。</p>
<p><strong>在这里，电影之作为媒介，对你的干预，是非常强硬的。要么你接受它，要么它拒斥你。这就叫热媒介。</strong></p>
<p>下面再说电视。首先电视节目单是安排好了的，条件允许的情况下，二十四小时播出也没关系。对于观众来说，除非是在追某个剧，是死忠粉丝，电视观众很少会非常仪式感地在某个特定时间打开电视，在一片漆黑（像电影院里一样，目的是抑制其它感官）的环境里，一看就看它二十多小时，直到演完才打开灯光，并且还向身边的观众互相问候。就像电影院里理所当然发生的那样。</p>
<p>电视不是这么看的吧？</p>
<p>那我们是怎么看的呢？</p>
<p>任何时候，想看了，无聊了，就打开遥控器。找到感兴趣的节目，或者看起来不错的节目，或者相对不那么烂的节目，不管是不是开场都继续看下去。你也不会把灯关掉，与此同时你的家人很可能在一边做饭、斗地主、打游戏。你也不会以“别打扰我看电视”为由让他们滚（你在电影放映厅里做个猪肉炖粉条子试试）。你们之间甚至还会有交流，你随时会跳出电视节目，去干点别的，抢个红包啊，视个频啊，刷个快手啊，等等。</p>
<p>那么显然，电视节目作为一种媒介的清晰度，对于你是非常低的。<strong>你在看电视的过程中，也完全不耽误调动其它官能。</strong></p>
<p>所以说，电影可以是热媒介，但电视却是冷媒介。</p>
<h1 id="2-在媒介化时代，如何理解媒介的使用？如何理解媒介的“伴随性”？媒介未来的发展是什么样的？"><a href="#2-在媒介化时代，如何理解媒介的使用？如何理解媒介的“伴随性”？媒介未来的发展是什么样的？" class="headerlink" title="2. 在媒介化时代，如何理解媒介的使用？如何理解媒介的“伴随性”？媒介未来的发展是什么样的？"></a>2. 在媒介化时代，如何理解媒介的使用？如何理解媒介的“伴随性”？媒介未来的发展是什么样的？</h1><h2 id="媒体的类型"><a href="#媒体的类型" class="headerlink" title="媒体的类型"></a>媒体的类型</h2><p>在媒介化时代，要谈媒介的使用，首先应该明确现如今存在哪些类型的媒体或媒介。在我们所处的社会中，存在四种类型的媒体。首先是以电视、广播、报纸、书刊为主的传统媒体，以及20世纪六十年代美国哥伦比亚广播公司技术研究所首次提出的“新媒体”(NewMedia)、2002年专栏作家Dan Gillnor提出的“自媒体”(WeMedia)以及最早出现在《什么是社会化媒体》一书中的“社会化媒体”(SocialMedia)。</p>
<p>有别于传统媒体，新媒体、自媒体和社会化媒体可以归结为一类，而且，“自媒体”包含在“新媒体”之中，“社会化媒体”又包含在“自媒体”之中。</p>
<p>下面分别对这三个概念进行解释：</p>
<ul>
<li>联合国教科文组织对新媒体的定义为：“以数字技术为基础，以网络为载体进行信息传播的媒介。”强调其数字化、网络化；</li>
<li>当把新媒体的传播者限定为“个人”时，它们就成为了自媒体，例如：个人博客、个人主页、个人日志等等。这仅仅是传播者发生的变化。</li>
<li>社会化媒体与其它新媒体的区别在于，社会化媒体在网络中模拟了真实世界的人际关系，并且将真实世界的信息传递方式在互联网进行移植、扩大，使得个体的声音被传播得更远。并且，它的传播者也是个人，不是组织。</li>
</ul>
<h2 id="如何理解媒介的伴随性？"><a href="#如何理解媒介的伴随性？" class="headerlink" title="如何理解媒介的伴随性？"></a>如何理解媒介的伴随性？</h2><p>媒介的伴随性是随着手机、智能手表等可移动媒介的出现而被赋予的。参考广播的伴随性，归纳总结媒介伴随性的定义、优势和劣势：</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>“媒介伴随性”包含两层含义：</p>
<ul>
<li>一是指人们在使用媒介的同时可以边做其他的事情。例如一边用手机看新闻，一边听音乐；一边与同事交流，一边查资料。这时候的媒介是作为“背景媒介”出现的。</li>
<li>二是指媒介可以私人化地贴身携带。随时可以查阅消息、访问互联网，这时候的媒介又具有了“贴身”的功能。</li>
</ul>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol>
<li>伴随性使媒介可以移动使用</li>
<li>伴随性使媒介可以贴身使用</li>
<li>伴随性使媒介可以充分发挥想象力的空间(抓住灵感出现的机会)</li>
<li>伴随性可以强化媒介的亲密感、归属感</li>
</ol>
<h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ol>
<li>伴随性使用容易使用户产生疲劳</li>
<li>伴随性迫使用户处在一种无时无刻接收消息的状态，产生一种被信息绑架的感受</li>
<li>伴随性交流的不专注性</li>
</ol>
<h2 id="媒介的使用"><a href="#媒介的使用" class="headerlink" title="媒介的使用"></a>媒介的使用</h2><p>现如今，具有高伴随性的电子媒介逐渐成为人们生活的重要组成部分。人们时时刻刻都在刷微博、聊微信、关注今日要闻。而传统媒介如报纸、杂志、广播、电视等几乎被替代。这似乎成为了信息化社会的必然结果。信息变得触手可得，人与人之间的交流打破了时间和空间的限制，社会服务也逐渐变得高效和精准。</p>
<h3 id="媒介的好处及使用场合"><a href="#媒介的好处及使用场合" class="headerlink" title="媒介的好处及使用场合"></a>媒介的好处及使用场合</h3><ul>
<li>提高了工作效率。在线文档、电话（视频）会议的出现改变了传统的工作模式。同事之间可以共同编辑同一份文档，而不是由一方编辑好了交由另一方审校修改，极大提高了工作效率和工作质量。线上会议则打破了空间的限制，降低了会议的成本，从而让与会者拥有更灵活的时间安排。</li>
<li>降低了沟通成本。通过微信、QQ等社交媒体进行沟通联系，不再通过电话、短信、见面等形式，在保证信息传达的有效性和可回看性的同时，降低了沟通的成本。</li>
<li>提供了大量的学习机会。可以通过自媒体或社会化媒体，直接与大师互动；也可以通过海量电子资源进行学习，如网络课程、电子书刊。</li>
<li>服务更加便捷、精准。通过订餐、订票软件，购买实体服务，使得流程更加便捷、服务更加精准。</li>
</ul>
<h3 id="媒介的不良影响"><a href="#媒介的不良影响" class="headerlink" title="媒介的不良影响"></a>媒介的不良影响</h3><ul>
<li>发表观点的门槛降低。每个人都可以在互联网上发表自己的观点看法及意见，难免良莠不齐，那些不良的、反社会的观点容易引领一些判断力低的网民的价值取向。</li>
<li>被信息绑架。时不时出现的推送，不知什么时候会发来的消息任务，严重扰乱了人们的生活节奏。</li>
<li>“低头族”的出现，人际关系的淡薄。走在路上看手机，不小心就被车撞了；亲朋好友见面也不聊天，拿着个手机面对面坐着，不说一句话。</li>
</ul>
<h2 id="媒介未来的发展方向"><a href="#媒介未来的发展方向" class="headerlink" title="媒介未来的发展方向"></a>媒介未来的发展方向</h2><p>媒介未来的发展方向应该着力于用户体验上。针对当前手机电脑等媒介对用户体验的影响以及存在的问题，我认为媒介未来的发展方向应该包含以下几点：</p>
<ol>
<li>拥有极高的用户隐私保护机制。</li>
<li>提供廉价、高速的互联网访问服务。</li>
<li>提供智能化的消息提示机制。例如提供消息收集器，收集勿扰模式或工作模式下收到的软件提示消息，在用户空闲时批量推出，同时应该具备消息智能筛选功能，通过机器学习的方法判别消息的重要程度，从而进行取舍。</li>
<li>推送消息的系统化。当前存在的问题是，主流公司倾向于固化用户思想，不停推出用户感兴趣的内容，而忽视了人发展的全面性。未来媒介应该具备智能化学习能力，理解用户当前的知识体系，从而推出互补性的内容，并判断用户知识体系的系统性，从而更加智能的进行内容推送。</li>
<li>具备用户个性化设计的功能。当前媒介的款式一般较为固定，甚至容易被知名品牌的设计所引领，除了设计人员缺乏创新性，设计门槛过高也是问题。未来的媒介应该具备较低的设计门槛，让大众可以参与媒介款式设计过程。</li>
</ol>
]]></content>
      <categories>
        <category>大众传播学</category>
      </categories>
      <tags>
        <tag>冷热媒介理论</tag>
        <tag>传播学</tag>
        <tag>伴随性</tag>
      </tags>
  </entry>
  <entry>
    <title>VS2013环境下配置OSG（3.4.0版本）</title>
    <url>/2017/08/13/VS2013%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AEOSG%EF%BC%883-4-0%E7%89%88%E6%9C%AC%EF%BC%89/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>参考了CSDN和OSG中国的文章：</p>
<p><a href="http://blog.csdn.net/lonsegdi/article/details/50579439" target="_blank" rel="noopener">VS2013的OSG开发环境配置_php_Yinglin的博客-CSDN博客</a></p>
<p><a href="http://bbs.osgchina.org/forum.php?mod=viewthread&amp;tid=9223&amp;extra=page=1&amp;_dsign=253e9edb" target="_blank" rel="noopener">OSG+VS2010+win7环境搭建 - OSG教程学习 - OSG中国官方论坛-有您OSG在中国才更好 - Powered by Discuz!</a></p>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>OSG三件套：</p>
<ul>
<li>osg源码（OpenSceneGraph 3.4.0）-<a href="http://trac.openscenegraph.org/downloads/developer_releases/OpenSceneGraph-3.4.0.zip" target="_blank" rel="noopener"> OpenSceneGraph-3.4.0.zip</a></li>
<li>osg第三方库（3rdParty_VS2013_v120_x86_x64_V9_small - <a href="https://download.osgvisual.org/3rdParty_VS2013_v120_x86_x64_V9_small.7z" target="_blank" rel="noopener">3rdParty_VS2013_v120_x86_x64_V9_small.7z</a></li>
<li>数据包（OpenSceneGraph-Data-3.4.0）- <a href="http://www.openscenegraph.org/downloads/stable_releases/OpenSceneGraph-3.4.0/data/OpenSceneGraph-Data-3.4.0.zip" target="_blank" rel="noopener">OpenSceneGraph-Data-3.4.0.zip</a></li>
</ul>
<p>CMake编译工具：<a href="https://cmake.org/files/v3.9/cmake-3.9.1-win32-x86.msi" target="_blank" rel="noopener">cmake-3.9.1-win32-x86.msi</a></p>
<p>【注】可以前往<a href="https://cmake.org/download/" target="_blank" rel="noopener">Download | CMake</a>下载最新版本的CMake安装包，根据自身的系统进行不同的选择：</p>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMTQ1ODI4NTk0.jfif" alt="无"></p>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMTUwMTM1NjMz.jfif" alt="安装时添加到系统变量path"></p>
<p>在CMake的安装过程中部分杀毒软件会进行警告，点击允许即可。</p>
<h1 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h1><p>首先在某个地方创建一个文件夹（我直接在E盘上创建一个名为OSG的文件夹），用来存储数据，在这个文件夹内，创建3个子文件夹（<strong>3rdParty、data、OpenSceneGraph</strong>），分别存储3个压缩包中的内容，如图所示：</p>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMTUxNTEyMDYx.jfif" alt="这里写图片描述"></p>
<p>接着开始解压文件</p>
<ol>
<li>打开OSG第三方库（<strong>3rdParty_VS2013_v120_x86_x64_V9_small.7z\3rdParty_x86_x64</strong>），根据自身的系统选择文件夹（有x86和x64两个），打开文件夹后全选里面所有的东西，解压到指定文件夹：<code>${根目录}\OSG\3rdParty</code>。需要说明的是，x86对应32位系统，x64对应64位系统 <strong>（不过在这里还是推荐选择x86，因为64位的隐患很大，很多库没有64位的，参考链接2里的那位楼主亲自试验过，在后面的VS批生成的时候导致ALL_INSTALL出现了2个失败，在后面的直接4个全失败。所以这里他建议选择使用32位的）</strong></li>
<li>打开数据包（<strong>OpenSceneGraph-Data-3.4.0.zip\OpenSceneGraph-Data</strong>），全选所有内容解压到 <code>${根目录}\OSG\data</code></li>
<li>打开OSG源码（<strong>OpenSceneGraph-3.4.0.zip\OpenSceneGraph-3.4.0</strong>），全选所有内容解压到 <code>${根目录}\OSG\OpenSceneGraph</code>。为了避免文件过于杂乱，建议在解压完文件后，在<code>OpenSceneGraph</code>文件夹中新建两个文件夹bin和build。</li>
</ol>
<h1 id="处理源码"><a href="#处理源码" class="headerlink" title="处理源码"></a>处理源码</h1><p>打开CMake，目录 …\CMake\bin，里面的那个<code>cmake-gui.exe</code>就是（建议在桌面创建一个快捷方式方便打开）。</p>
<p>将OpenSceneGraph文件夹中的CMakeLists.txt拖到CMake中：</p>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMTU0MTE4NTM3.jfif" alt="这里写图片描述"></p>
<p>将Where to build the binaries后的目录地址改为刚刚创建的build文件夹：</p>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMTU0MzU0Nzg2.jfif" alt="这里写图片描述"></p>
<p>接着点击下方的Configure按钮，在弹出的对话框中作如下选择：（为什么不选择VS2013？？因为最新的CMake没有这个选项，不过我们用VS2012的方式也可以解决问题，<strong>具体措施查看文末</strong>）</p>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMTU1NjMxMzU3.jfif" alt="这里写图片描述"></p>
<p>finish之后进行相关的设置：</p>
<ul>
<li><strong>ACTUAL_3RDPARTY_DIR</strong>：…/OSG/3rdParty;</li>
<li><strong>BUILD_OSG_EXAMPLES</strong>：勾上</li>
<li><strong>CMAKE_INSTALL_PREFIE</strong>：…/OSG/OpenSceneGraph/;</li>
</ul>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMTYwMTUwMDQy.jfif" alt="这里写图片描述"></p>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMTYwMTU5NjQ1.jfif" alt="这里写图片描述"></p>
<p>修改完参数的值后，再次点击Configure。完成后，将<strong>BUILD_MFC_EXAMPLE</strong>参数后面的√打上，又一次Configure（如果找不到这个参数，将上方的Advanced选上）：</p>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMTYwNDIwNTk2.jfif" alt="这里写图片描述"></p>
<p>最后点击Generate，源码处理完毕。</p>
<h1 id="编译阶段"><a href="#编译阶段" class="headerlink" title="编译阶段"></a>编译阶段</h1><p>用VS2013打开位于<code>E:/OSG/OpenSceneGraph/build</code>中的工程文件<code>OpenSceneGraph.sln</code>，这个好像是VS2012对应的解决方案文件，不过似乎没什么影响；在打开的过程中会弹出一个对话框问你要不要diable某个option，我不是很清楚就点了否。</p>
<p>打开【菜单栏】-【生成】-【批生成】，对ALL_BUILD进行生成（选择Debug和Release两种配置）：</p>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMTYxNzE5NjE5.jfif" alt="这里写图片描述"></p>
<p>这段编译时间非常长，大致要3-5个小时（似乎和电脑的配置有关系？）</p>
<p><strong>这里要插播一句，因为用的是面向VS2012的解决方案（sln），因此编译结束后输出栏中可能会有一大堆的警告和报错，不用管它。（具体解决措施见文末）</strong></p>
<p>接着对INSTALL执行相同的操作，这部分生成时间较短，在10-20分钟左右。</p>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMTk0MDUwMDUx.jfif" alt="这里写图片描述"></p>
<h1 id="数据整理"><a href="#数据整理" class="headerlink" title="数据整理"></a>数据整理</h1><p>编译结束后，生成了大量的数据（估摸着有3个G），为了方便之后的使用，我们在另外的地方重新创建了一个OSG文件夹，里面包含了四个子文件夹：</p>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMjAwNzQwMzc5.jfif" alt="这里写图片描述"></p>
<p><strong>填充</strong>这四个文件夹就成了下一步我们要做的事。</p>
<ul>
<li>将…\OSG\OpenSceneGraph下的bin,include,lib文件夹直接拷贝至新的OSG文件夹</li>
<li>打开…\OSG\OpenSceneGraph\build，将里面的bin,include,lib文件夹也拷贝到新的OSG文件夹，期间系统弹出的任何关于合并、替换的提示（替换文件夹，替换xx文件等等），选择“合并”和“复制和替换”：</li>
</ul>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMjAxMjM2OTMx.jfif" alt="这里写图片描述"></p>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMjAxMjQ2NDA4.jfif" alt="这里写图片描述"></p>
<ul>
<li>最后，将…\OSG下的data文件夹整个拷贝到新的OSG文件夹。</li>
</ul>
<h1 id="环境变量设置与链接库"><a href="#环境变量设置与链接库" class="headerlink" title="环境变量设置与链接库"></a>环境变量设置与链接库</h1><p>【我的电脑】-【属性】-【高级系统设置】-【高级】-【环境变量】在系统变量PATH后添加新的OSG文件夹中bin文件夹的目录，即在变量值后面用分号隔开写入新的OSG文件夹bin文件夹的目录：…\OSG\bin; </p>
<p>另外，手动在系统变量中添加变量<strong>OSG_FILE_PATH</strong>，并将变量值设置为新的OSG文件夹中data的位置，即 …\OSG\data</p>
<p><strong>注</strong>：win7系统中，环境变量的配置重启后生效，可以配置完毕后再重启。</p>
<p>这时候回到编译器VS2013，先创建一个一般工程用于测验，然后打开【菜单栏】-【项目】-【属性】-【配置属性】-【VC++目录】，在<strong>包含目录</strong>和<strong>库目录</strong>中分别添加新的OSG文件夹中include和lib的位置：</p>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMjAyMTA4MDIw.jfif" alt="这里写图片描述"></p>
<p>以及，在【VC++目录】下两行的【链接器】-【输入】的<strong>附加依赖项</strong>中添加如下代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">OpenThreadsd.lib</span><br><span class="line">osgd.lib</span><br><span class="line">osgDBd.lib</span><br><span class="line">osgUtild.lib</span><br><span class="line">osgGAd.lib</span><br><span class="line">osgViewerd.lib</span><br><span class="line">osgTextd.lib</span><br></pre></td></tr></table></figure>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMjAyMzE3ODE5.jfif" alt="这里写图片描述"></p>
<h1 id="调试阶段"><a href="#调试阶段" class="headerlink" title="调试阶段"></a>调试阶段</h1><p>理论上讲，以上操作结束后，osg就可以在VS2013的环境下发挥作用了，这时候我们借助一些简单的代码来进行调试：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;osgViewer/Viewer&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;osgDB/ReadFile&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	osgViewer::Viewer viewer;</span><br><span class="line">	viewer.setSceneData(osgDB::readNodeFile(<span class="string">"cow.osg"</span>));</span><br><span class="line">	<span class="keyword">return</span> viewer.<span class="built_in">run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于CMake中不存在VS2013的解决方案，我们之前使用的是VS2012的生成方法，并且在编译的时候也忽略了输出框中的一些警告和报错，因此难免会出点问题。</p>
<p>比如我在调试的时候编译器就提示我“缺少zlibd.dll文件”，而使用<a href="http://www.voidtools.com/Everything-1.4.1.877.x64-Setup.exe" target="_blank" rel="noopener">everything</a>搜索了之后，发现（新）OSG/bin文件夹中并没有这个dll文件，只有原来的…\OSG\3rdParty\bin\中有一个，于是我将其中相关的3个文件拷贝到了新的文件夹：</p>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMjAzOTUxNzc4.jfif" alt="这里写图片描述"></p>
<p>问题解决，运行成功！类似地，缺少什么dll文件可以先在电脑中搜索一下，然后手动拷贝到新的bin文件夹里，应该不会有什么大问题。以下是例图：</p>
<p><img src="/images/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODEzMjA1ODIzOTc0.jfif" alt="这里写图片描述"></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>VS2013</tag>
        <tag>OSG</tag>
        <tag>Cmake</tag>
      </tags>
  </entry>
  <entry>
    <title>时空信息云平台简介</title>
    <url>/2018/05/24/%E6%97%B6%E7%A9%BA%E4%BF%A1%E6%81%AF%E4%BA%91%E5%B9%B3%E5%8F%B0%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p><strong>引言</strong></p>
<p>我们正处在大数据时代，巨大的数据量、纷繁复杂的数据结构、迅速发展的大数据解决方案正影响着我们的生活。五中全会首次明确大数据上升为国家战略：“数据驱动经济”，北京、上海、贵州、杭州、武汉等大数据产业和应用发展已取得成效。国家和人民政府为迎合时代变化，更好服务百姓，必须实现政务信息化，而实现政务信息化，必须建立新一代的应用支撑平台——时空信息云平台。时空信息云平台的建设，帮助政府更好地落实智慧城市的建设，进而衍生出智慧管理、智慧技术、智慧人文，智慧民生、智慧产业、智慧服务等。时空信息云平台是大数据时代的产物，也是对大数据应用的一种扩展，同时，是智慧城市建设中必不可少的一个环节，是智慧城市建设在政务管理层面的应用。</p>
<h1 id="1-时空信息云平台的定义及构成"><a href="#1-时空信息云平台的定义及构成" class="headerlink" title="1. 时空信息云平台的定义及构成"></a>1. 时空信息云平台的定义及构成</h1><h2 id="1-1-时空信息云平台的定义"><a href="#1-1-时空信息云平台的定义" class="headerlink" title="1.1 时空信息云平台的定义"></a>1.1 时空信息云平台的定义</h2><p>时空信息云平台是通过泛在网络、传感设备、智能计算等新型高科技手段，实时汇集城市各种时空信息而形成的感知更透彻、互联更广泛、决策更智能、服务更灵性和更加安全可靠的地理信息服务平台，是智慧城市建设的重要空间信息基础设施。<br>时空信息云平台以全覆盖、精细化的备时刻的地理信息为基础，与物联网实时感知相联系，运用云计算技术，面向泛在应用环按需提供地理信息数据、开发接口和功能软件服务，智能化地服务整个智慧城市的建设与运行，是智慧城市运行的智能化时空载体。</p>
<h2 id="1-2-时空信息云平台的子系统"><a href="#1-2-时空信息云平台的子系统" class="headerlink" title="1.2 时空信息云平台的子系统"></a>1.2 时空信息云平台的子系统</h2><p>时空信息云平台的目标是利用GIS技术、分布式存储技术、虚拟化技术、并行计算机技术和宽带网络技术，以构建随时、随地、随需、随意的地理信息服务为目的，以拓展地理信息服务领域、激活地理信息产业发展为宗旨，实现地理信息高效集成、快速交换、充分共享和智慧应用。时空信息云平台一般包含四个子系统，分别是时空动态定位基准系统、时空信息全面感知系统、时空信息融合分析系统和时空信息云服务系统。</p>
<ol>
<li><p>时空动态定位基准系统<br>在国家空间数据基准框架的基础上，利用现代卫星定位技术(包括北斗卫星定位)、计算机信息技术、现代地球重力场确定理论和方法等高新技术手段，建立与信息化测绘体系相适应的，在时域上连续的、在空间上整体的、在体系上完整的，与国家地理空间信息基准框架严密<br>对接的城市时空动态定位基准，包括服务于GNSS(G]oba]Naylgatlon Sat—e]]1 te System)目标的定位基准、服务于移动通讯目标的定位基准、服务于RFID(Radi 0 FreQuency I Denti fi cati on)目标的定位基准、服务于短距离通讯目标的定位基准(W1F1、蓝牙)、服务于图像目标的定位基准和服务于POI目标的定位基准。</p>
</li>
<li><p>时空信息全面感知系统<br>传统的感知手段包括传统地面测量、GPS测量、航空摄影测量和卫星遥感等，随着空间数据获取手段的增多，出现了街景测量、L1 DAR(Light Detect1on And Ran91 ng)、倾斜摄影测量以及通过各种传感器(包括RFID、视频监控设备、温度／气压感应设备、可定位移动终端等)进行信息采集的方式。通过建立城市时空信息的智慧感知体系，实现空地一体化的图云信息感知体系、空属一体化的复合感知体系和时空～体化的移动感知体系，形成全面覆盖、互为补充的城市信息感知和获取途径，建立适应多种卫星、多频、多模信号的新一代定位服务系统，多角度地反映城市状态。</p>
</li>
<li><p>时空信息融合分析系统<br>在对空间数据交换方法、数据互操作模式和数据访问模式进行研究的基础上，建立融合物联网数据的多源数据集中间件、框架体系和工作流程，实现多源、多维、多尺度、多时态地理空间信息的接入与融合，实现城市地上、地表和地下空间信息(包括系列比例尺地形图、航空航天遥感影像、三维模型、地名地址、政务电子地图、政务信息图层、街景影像、工程地质等数据)的统一集中管理。同时，基于统一的空间基准，将各类信息与空间位置进行匹配和关联，实现各种传感器和移动定位终端信息的接入与融合。</p>
</li>
<li><p>时空信息云服务系统<br>在数字城市地理空间框架建设成果的基础上，采用云计算技术，通过对硬件资源、数据资源、软件平台进行虚拟化处理，建立城市地理信息云数据中心，以在线地理信息服务的方式支撑智慧城市和相关专题信皂系绩建设。系统雪馘多源、多维、多尺度、多时态的信息，通过提供信息的浏览、查询和统计等功能，支持通用的地理信息应用，同时，提供二次开发接口，支持个I’生化定制，满足多领域、多部门的应用需求。时空信息云服务系统的建立包含I aaS(I nfrastructure as a Servi ce)时空信息云服务模式、PaaS(P]atform as a servl ce)时空信息云服务模式、SaaS(Software as a servi ce)时空信息云服务模式和DaaS(Data as a servl ce)时空信息云服务模式。</p>
</li>
</ol>
<h2 id="1-3-时空信息云平台的层次结构"><a href="#1-3-时空信息云平台的层次结构" class="headerlink" title="1.3 时空信息云平台的层次结构"></a>1.3 时空信息云平台的层次结构</h2><p>时空信息云平台一般包括五层结构，分别是感知层、网络层、支撑层、服务层、应用层。</p>
<ol>
<li>感知层<br>感知层在城市时空信息云平台中可认为是各种传感器。概括来说，包括RFID、摄像头、环境传感器等地面信息采集系统，卫星等作为补充的天空信息感知手段，由此形成全方位覆盖的感知网络，确保数据的来源途径，或是纵向天空的立体覆盖、横向全面无缝感知的信息感知网络。</li>
<li>网络层<br>网络层在智慧城市的建设中有着十分重要的地位。建立起一个完整可靠的基础通信网络也是必须的。首先是完善光纤通信、无线网络的建设，同时建设起一整套完整的卫星通信网络也十分必要。由此构建起一个完整的通信网络支撑起时空信息云平台乃至智慧城市的框架。</li>
<li>支撑层<br>支撑层是智慧城市的核心部分，也是至关重要的部分。支撑层构建起的时空信息公共平台是按照集中与分散相结合的原则构建起来的。分散是指基础信息是存储在不同部门的数据库中的，而非物理概念上的存储在一起。集中是指时空信息云平台通过调用来自不同部门的信息数据，分析处理后提供给不同的使用者以满足他们的不同需求，为不同用户提供相应的服务。</li>
<li>服务层<br>服务层主要功能分为两个部分：一是将不同来源的海量数据汇集整合、存储、分析、处理后为用户提供服务；二是为不同行业提供数据交换平台，实现多源异构数据聚合、转换与发布，并开放数据预处理、数据挖掘接口，供各行业应用开发者调用并方便的搭建自己的业务系统。</li>
<li>应用层<br>应用层基于时空信息云平台为不同需求用户提供不同的应用服务，包括智慧交通、智慧能源、智慧教育、智慧医疗、智慧旅游、智慧物流、智慧建筑、智慧社区、智慧家庭、智慧环保、智慧政务、智慧安全、智慧食品、智慧港航、智慧商务等15大基础应用，体现了云平台功能的强大性。</li>
</ol>
<h2 id="1-4-时空信息云平台的关键技术"><a href="#1-4-时空信息云平台的关键技术" class="headerlink" title="1.4 时空信息云平台的关键技术"></a>1.4 时空信息云平台的关键技术</h2><ol>
<li>海量数据分布存储技术<br>城市地理时空信息云平台由大量服务器集群组成，需要为大量用户提供不同服务，存储大量的小文件。平台采用分布式存储的方式存储海量地理信息数据，将小文件合并为大的文件。建立两个文件: 一个是数据文件，保存文件数据; 一个是索引文件，保存文件的索引信息；用冗余存储的方式保证数据的可靠性。</li>
<li>虚拟化技术<br>虚拟化是云平台的基础，虚拟化可以在一台物理服务器上聚集多个操作系统和应用程序，可以更好地利用服务器的计算资源。虚拟化平台软件帮助客户搭建公有或私有的虚拟平台，供客户部署应用，实现服务器资源的灵活伸缩，降低维护、升级成本。</li>
<li>负载、压力测试技术<br>不同虚拟机安装的软件不同，实现的功能也不同，如何正确评估虚拟机分配的资源（CPU、内存、网络、硬盘空间）是否满足了系统设计的要求，需要我们对不同类型的服务器进行负载、压力测试，根据测试结果动态调整虚拟机的各项配备资源，最终在保证系统高效运行的同时充分利用资源。</li>
<li>3S技术<br>在云平台中，采用图片引擎技术快速访问地图，采用地理编码技术获取地址匹配服务，采用网格的定位、三维建模等3S技术，实现对客户的地理信息数据、服务数据的快速响应。</li>
</ol>
<h1 id="2-时空信息云平台的功能"><a href="#2-时空信息云平台的功能" class="headerlink" title="2. 时空信息云平台的功能"></a>2. 时空信息云平台的功能</h1><p>时空信息云平台作为智慧城市建设的一部分、作为测绘地理信息技术发展的产物，其主要功能有以下几个方面。</p>
<ol>
<li><p>提供时空信息数据基础设施服务<br>智慧城市时空信息云平台基于云计算技术，提供时空信息数据基础设施服务，对不同架构、不同品牌、不同型号的空间数据服务器硬件进行整合，借助云计算平台的虚拟化基础架构，对这些设备进行统一有效的资源切割、调配和整合，按照应用需求来合理分配计算、存储资源，从而实现实时、动态、高效的时空信息管理。</p>
</li>
<li><p>提供时空信息统一平台环境服务<br>时空信息云平台在统一平台环境服务层面，使用高分辨率遥感影像、高精度卫星定位，运用泛在网络、传感设备、智能计算等新型高科技手段，根据智慧城市的系统架构，引入云计算技术中的SOA(Servi ce-Ori ented Archi tecture)技术，通过统一的数据类型定义、统一化的数据访问、统一接口规范、统一元数据描述和计算规范所建立的开放开发及运行环境，实行各种不同系统信息之间的互联互通，保障信息的有效沟通和整合，从而实现传统分布式地理信息系统平台软件海量数据的快速获取与更新功能、面向地理实体的地理信息数据管理功能、真三维动态建模与可视化功能、地理信息网络服务功能向智能化、智慧化、语音化、真实化方向发展。</p>
</li>
<li><p>提供时空分析应用软件服务<br>在应用软件服务层面，时空信息云平台在一些通用性的应用方面具备成熟的条件，比如空间定位、地址匹配、叠置分析、缓j中区分析和路径分析等时空分析，可以将庞杂的信息收集、深度计算的任务放在云端，将经过处理并展示出来的简洁结果推送到各种有线、无线瘦终端。</p>
</li>
</ol>
<h1 id="3-时空信息云平台的应用案例"><a href="#3-时空信息云平台的应用案例" class="headerlink" title="3. 时空信息云平台的应用案例"></a>3. 时空信息云平台的应用案例</h1><h2 id="3-1-楚天云"><a href="#3-1-楚天云" class="headerlink" title="3.1 楚天云"></a>3.1 楚天云</h2><ol>
<li>简介<br>楚天云是湖北省委、省政府加快智慧湖北建设的重大工程，是集云计算、大数据于一体的全省统一云基础设施综合服务平台和数据交换枢纽平台，依托全省统一的楚天云·省级政务云平台，实现政府数据汇聚共享、互联互通。平台采用国际上最先进的开源云技术和自主、安全、可控软硬件产品，各方面性能达到国内一流水平，面向政府部门和社会提供云计算、云存储、云网络、云安全、云灾备等综合服务。</li>
<li>服务能力</li>
</ol>
<ul>
<li><strong>基础设施服务</strong>：机房资源、网络资源、计算资源、存储资源、灾备资源、专享云等；</li>
<li><strong>软件支撑服务</strong>：公共支撑软件、公共构建、内存数据库、安装及维护等；</li>
<li><strong>大数据服务</strong>：数据交换共享、数据治理、数据仓库、信息资源目录、数据发布、数据创新应用等；</li>
<li><strong>应用功能服务</strong>：电子签章、电子公文传输、通用办公、即时通讯、政务云盘、政务云邮件等；</li>
<li><strong>信息安全技术服务</strong>：基础安全防护、安全接入、安全管理、安全扫描、网站监测等；</li>
<li><strong>其他服务</strong>：应用系统、迁移服务等。</li>
</ul>
<h2 id="3-2-智慧宁波时空信息云平台"><a href="#3-2-智慧宁波时空信息云平台" class="headerlink" title="3.2 智慧宁波时空信息云平台"></a>3.2 智慧宁波时空信息云平台</h2><ol>
<li><p>简介<br>智慧宁波时空信息云平台着力打造集云计算、大数据、物联网和地理信息等先进技术于一体的综合时空信息和服务平台，开拓宁波“市县一体化”应用模式，提供完善的测绘地理信息采集、处理、动态更新及应用搭建的技术体系，形成持续更新、具备时间序列及丰富类型的测绘地理信息数据和切实的示范应用。</p>
</li>
<li><p>服务能力</p>
</li>
</ol>
<ul>
<li>物联网<br>时空信息云平台基于城市网络，结合智能终端，提供强大的实时数据的接入及处理技术，实现即拿即用的可视化分析能力，打造高效的时空信息资源服务。</li>
<li>大数据<br>时空信息云平台搭建了宁波市时空大数据应用框架体系，推动大数据挖掘系统建设，加强智慧宁波时空大数据的存储、查询、分析和挖掘能力，提升智慧宁波决策与监管的信息化水平。 </li>
<li>影像共享服务<br>时空信息云平台基于影像共享服务系统，提供在线影像数据查询，实现多时相影像数据显示、时态回放、对比分析及服务共享等功能，拓展了影像数据的应用维度，助力用户获得丰富的信息化产品。 </li>
<li>地名地址服务<br>基于中文地名分词技术，依照宁波市中文地址规则，高效快速的将宁波市相关的中文地址或地名描述转换为宁波市区域表面上相应位置。提升宁波市政府和企业级用户打造属于自己的中文地理编码服务。</li>
</ul>
<h1 id="4-时空信息云平台与地理空间框架联系与区别"><a href="#4-时空信息云平台与地理空间框架联系与区别" class="headerlink" title="4. 时空信息云平台与地理空间框架联系与区别"></a>4. 时空信息云平台与地理空间框架联系与区别</h1><p>数字城市地理空间框架是基础地理信息资源及其采集、加工、分发、服务所涉及的政策、法规、标准、技术、设施、机制和人力资源的总称，是以公共服务为导向的国家空间信息基础设施，由基础地理信息数据、数据目录与交换体系、政策法规与标准体系、组织运行体系和公共服务体系等构成。其中，基础地理信息数据体系是数字中国地理空间框架的核心，也是国家自然资源和地理空间基础信息库的主要建设内容。建设数字城市地理空间框架，应用服务是宗旨，共建共享是关键，基础设施是支撑，政策法规标准是保障。</p>
<ol>
<li><p>联系<br>时空信息云平台是数字城市地理空间框架成果在智慧城市中应用的载体，以软件即服务、平台即服务、基础设施即服务的方式进行应用。从而使用户不关心数据源在何地、软件在何地、基础设施在何地，由虚拟云端将分布式的数据、软件、硬件进行共享，完成智能化处理，给出最终结果，发出指令或作出行动。</p>
</li>
<li><p>区别</p>
</li>
</ol>
<ul>
<li>研究重点不同<br>地理空间框架的关键技术是GIS技术，着重于数据获取、处理、组织、存储、管理、表达；时空信息云平台在地理空间框架的基础上，将研究重点转移到了虚拟化、数据共享、数据服务上，是对地理空间框架技术的扩展。</li>
<li>面向对象不同<br>地理空间框架主要面向相关专业人员，缺少相关专业知识的人员在使用该框架时具有一定困难性；时空信息云平台则面向群众，主要以时空信息存储与管理服务、地理空间信息浏览服务、地理空间信息获取服务、时空信息分析服务、位置服务等方式在智慧城市中进行具体应用，用户不需要关心数据源、基础设施、技术细节等。</li>
</ul>
<h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>时空信息云平台的建设，是大数据时代数据应用的一个重要方面，平台能够为智慧城市的运行提供智能化的时空载体，是政府运用科技服务百姓的信息载体。时空信息云平台的建设正处在火热时期，其是智慧城市建设中一个重要且关键的环节。时空信息云平台的建设很好地实现了学科间的协同研究，作为信息学领域测绘地理信息学研究的一份子，与文理学领域的城乡规划学巧妙耦合，有利于建立系统、完善的智慧城市发展理念和策略，也有利于实现对智慧城市在空间体系和技术应用方面的研究</p>
<h1 id="6-参考文献"><a href="#6-参考文献" class="headerlink" title="6. 参考文献"></a>6. 参考文献</h1><p>[1]肖建华. 智慧城市时空信息云平台及协同城乡规划研究[J]. 规划师, 2013, 29(2):11-15.<br>[2] 国务院.关于深入推进新型城镇化建设的若干意见[D].2016.02<br>[3] 李晓丽.智慧城市时空信息云平台解决方案[D].2013.10<br>[4] 侯玉莹，邹同元，葛宝玉，鲍珊珊. 时空信息云平台建设总体架构[D]. 哈尔滨： 哈尔滨航天恒星数据系统科技有限公司.2015<br>[5] 郭源生.智慧城市的模块化架构与核心技术[M].北京：国防工业出版社.2014.10<br>[6] 中国城市报.五大事件九大政策：解读2015年中国智慧城市发展状况[D].北京：中国城市报.2015.12<br>[7]刘恒飞,张庆全,周源, 等.数字城市地理空间框架成果在智慧城市建设中的应用研究——以黑龙江省数字城市建设为例[J].测绘与空间地理信息,2015,(2):150-152,158. DOI:10.3969/j.issn.1672-5867.2015.02.046.<br>[8]<a href="https://baike.baidu.com" target="_blank" rel="noopener">https://baike.baidu.com</a></p>
]]></content>
      <categories>
        <category>智慧城市</category>
      </categories>
      <tags>
        <tag>智慧城市</tag>
        <tag>时空信息云平台</tag>
        <tag>地理空间架构</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery学习笔记（1） 初识jQuery</title>
    <url>/2018/07/11/jQuery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89-%E5%88%9D%E8%AF%86jQuery/</url>
    <content><![CDATA[<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>本地文件引用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-3.3.1.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>url引用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.3.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象 $"></a>全局对象 <code>$</code></h1><ul>
<li>jQuery 把所有的属性、操作封装在jQuery对象中，因此每次调用jQuery的功能时，都类似于对象调用或函数使用;</li>
<li>jQuery为自己创建了一个快捷方式<script type="math/tex">`，`</script>等价于<code>jQuery</code>，即:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#foo"</span>);</span><br><span class="line">jQuery(<span class="string">"#foo"</span>);</span><br><span class="line"></span><br><span class="line">$.ajax();</span><br><span class="line">jQuery.ajax();</span><br></pre></td></tr></table></figure>
<h1 id="Hello-World！"><a href="#Hello-World！" class="headerlink" title="Hello World！"></a>Hello World！</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//可简写为：</span></span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="jQuery对象和DOM对象"><a href="#jQuery对象和DOM对象" class="headerlink" title="jQuery对象和DOM对象"></a>jQuery对象和DOM对象</h1><p>jQuery对象和DOM对象获取的不同方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $variable = $(<span class="string">"#foo"</span>);                     <span class="comment">//获取jQuery对象</span></span><br><span class="line"><span class="keyword">var</span> variable = <span class="built_in">document</span>.getElementById(<span class="string">"foo"</span>); <span class="comment">//获取DOM对象</span></span><br></pre></td></tr></table></figure>
<p>jQuery对象和DOM对象之间的相互转换</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jQuery 👉 DOM</span></span><br><span class="line"><span class="keyword">var</span> tVar1 = $variable[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> tVar2 = $variable.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//DOM 👉 jQuery</span></span><br><span class="line"><span class="keyword">var</span> $tVar = $(variable);</span><br></pre></td></tr></table></figure>
<h1 id="冲突的解决"><a href="#冲突的解决" class="headerlink" title="冲突的解决"></a>冲突的解决</h1><p>基于 jQuery 的原理，它为了保持良好的独立性和完整性，将所有的内容封装在了 jQuery 对象中，这个对象的快捷方式是 <script type="math/tex">`。因此，在调用 jQuery 库的时候，会更新 `jQuery` 和 `</script> 的定义，此时，若原先的代码中已经存在 <code>jQuery</code> 或 <code>$</code> 的定义（有可能是给变量赋值直接定义，也有可能是之前加载的库中的定义），相关的定义就会被覆盖，从而导致冲突。</p>
<p>jQuery 为了解决这种冲突，采用了<code>noConflict</code>方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery.noConflict(<span class="literal">true</span>);   <span class="comment">//恢复对jQuery和$的引用</span></span><br><span class="line"></span><br><span class="line">jQuery.noConflict(<span class="literal">false</span>);  <span class="comment">//只恢复对$的引用</span></span><br><span class="line">jQuery.noConflict();       <span class="comment">//默认参数为false</span></span><br></pre></td></tr></table></figure>
<p>一个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//jQuery库在prototype后调用（prototype.js也用到了$的快捷方式）</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/prototype.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-3.3.1.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"JavaScript"</span>&gt;</span></span><br><span class="line">    jQuery.noConflict();</span><br><span class="line"><span class="actionscript">    <span class="comment">//将$作为function的参数传入，可以在函数内使用快捷方式$，这是目前较为常用的方法。</span></span></span><br><span class="line"><span class="actionscript">    jQuery(<span class="function"><span class="keyword">function</span> <span class="params">($)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert($(<span class="keyword">this</span>).text());</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;); </span><br><span class="line"><span class="actionscript">    <span class="comment">//如果不需要快捷方式，直接使用如下</span></span></span><br><span class="line"><span class="actionscript">    jQuery(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        jQuery(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(jQuery(<span class="keyword">this</span>).text());</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;); </span><br><span class="line"><span class="javascript">    $(<span class="string">"pp"</span>).style.display = <span class="string">'none'</span>; <span class="comment">//调用prototype</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//jQuery库在prototype前调用（这时候jQuery的$被覆盖，但还能通过'jQuery'调用它的方法）</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-3.3.1.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/prototype.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"JavaScript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//不需要使用noConflict方法</span></span></span><br><span class="line"><span class="actionscript">    jQuery(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        jQuery(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(jQuery(<span class="keyword">this</span>).text());</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;); </span><br><span class="line"><span class="javascript">    $(<span class="string">"pp"</span>).style.display = <span class="string">'none'</span>; <span class="comment">//调用prototype</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>jQuery</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs学习笔记（2） 阻塞/非阻塞实例 与 Nodejs事件</title>
    <url>/2018/07/19/Nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89-%E9%98%BB%E5%A1%9E-%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%AE%9E%E4%BE%8B-%E4%B8%8E-Nodejs%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="1-Node-js异步编程的特点"><a href="#1-Node-js异步编程的特点" class="headerlink" title="1. Node.js异步编程的特点"></a>1. Node.js异步编程的特点</h1><blockquote>
<p>参考资料：<a href="http://www.runoob.com/nodejs/nodejs-callback.html" target="_blank" rel="noopener">http://www.runoob.com/nodejs/nodejs-callback.html</a></p>
</blockquote>
<p>Node.js 异步编程的直接体现就是回调。</p>
<p>异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。</p>
<p>回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。</p>
<p>例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。</p>
<p>回调函数一般作为参数的最后一个参数出现</p>
<h1 id="2-阻塞与非阻塞的实例"><a href="#2-阻塞与非阻塞的实例" class="headerlink" title="2. 阻塞与非阻塞的实例"></a>2. 阻塞与非阻塞的实例</h1><blockquote>
<p>参考资料：<a href="http://www.runoob.com/nodejs/nodejs-callback.html" target="_blank" rel="noopener">http://www.runoob.com/nodejs/nodejs-callback.html</a></p>
</blockquote>
<h2 id="2-1-阻塞代码实例"><a href="#2-1-阻塞代码实例" class="headerlink" title="2.1 阻塞代码实例"></a>2.1 阻塞代码实例</h2><p>创建一个文件 input.txt ，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">菜鸟教程官网地址：www.runoob.com</span><br></pre></td></tr></table></figure>
<p>创建 main.js 文件, 代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'input.txt'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行结束!"</span>);</span><br></pre></td></tr></table></figure>
<p>以上代码执行结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node main.js</span></span><br><span class="line">菜鸟教程官网地址：www.runoob.com</span><br><span class="line"></span><br><span class="line">程序执行结束!</span><br></pre></td></tr></table></figure>
<h2 id="2-2-非阻塞代码实例"><a href="#2-2-非阻塞代码实例" class="headerlink" title="2.2 非阻塞代码实例"></a>2.2 非阻塞代码实例</h2><p>创建一个文件 input.txt ，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">菜鸟教程官网地址：www.runoob.com</span><br></pre></td></tr></table></figure>
<p>创建 main.js 文件, 代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'input.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行结束!"</span>);</span><br></pre></td></tr></table></figure>
<p>以上代码执行结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node main.js</span></span><br><span class="line">程序执行结束! # 写在后面的语句先执行了</span><br><span class="line">菜鸟教程官网地址：www.runoob.com</span><br></pre></td></tr></table></figure>
<h1 id="3-Node-js的事件驱动"><a href="#3-Node-js的事件驱动" class="headerlink" title="3. Node.js的事件驱动"></a>3. Node.js的事件驱动</h1><blockquote>
<p>参考资料：<a href="http://www.runoob.com/nodejs/nodejs-event-loop.html" target="_blank" rel="noopener">http://www.runoob.com/nodejs/nodejs-event-loop.html</a></p>
</blockquote>
<p>Node.js 基本上所有的事件机制都是用设计模式中<strong>观察者模式</strong>实现。</p>
<p>Node.js 单线程类似进入一个<code>while(true)</code>的事件循环，直到没有事件观察者退出，<strong>每个异步事件都生成一个事件观察者</strong>，如果有事件发生就调用该回调函数。</p>
<p>Node.js 的<strong>事件驱动程序</strong>需要引用<code>events</code>模块， 通过实例化<code>EventEmitter</code>类来绑定和监听事件。</p>
<h1 id="4-事件循环实例"><a href="#4-事件循环实例" class="headerlink" title="4. 事件循环实例"></a>4. 事件循环实例</h1><blockquote>
<p>参考资料：<a href="http://www.runoob.com/nodejs/nodejs-event-loop.html" target="_blank" rel="noopener">http://www.runoob.com/nodejs/nodejs-event-loop.html</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 依赖和实例化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="comment">// 实例化 eventEmitter 类（事件触发器），用来绑定和监听事件</span></span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * eventEmitter.on() 绑定事件</span></span><br><span class="line"><span class="comment"> * eventEmitter.emit() 触发事件</span></span><br><span class="line"><span class="comment"> * ps: 事件触发必须写在在事件绑定之后，且应该注意事件的名称一致</span></span><br><span class="line"><span class="comment"> *     使用程序绑定事件时，应该创建代表函数的变量，使用该变量进行绑定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 1. 使用程序绑定事件</span></span><br><span class="line"><span class="keyword">var</span> connectHandler = <span class="function"><span class="keyword">function</span> <span class="title">connected</span>(<span class="params"></span>) </span>&#123; <span class="comment">//创建程序</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'连接成功。'</span>);</span><br><span class="line">    eventEmitter.emit(<span class="string">'data_received'</span>); <span class="comment">// 触发 data_received 事件</span></span><br><span class="line">&#125;</span><br><span class="line">eventEmitter.on(<span class="string">'connection'</span>, connectHandler); <span class="comment">// 绑定 connection 事件处理程序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用匿名函数绑定事件</span></span><br><span class="line">eventEmitter.on(<span class="string">'data_received'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据接收成功。'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 触发 connection 事件</span></span><br><span class="line">eventEmitter.emit(<span class="string">'connection'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 结束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'程序执行完毕。'</span>);</span><br></pre></td></tr></table></figure>
<p>以上代码的执行结果为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">node main.js</span></span><br><span class="line">连接成功。</span><br><span class="line">数据接收成功。</span><br><span class="line">程序执行完毕。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs学习笔记（1） Nodejs安装 &amp; 借助express模块简单部署服务器</title>
    <url>/2018/07/14/Nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89-Nodejs%E5%AE%89%E8%A3%85-%E5%80%9F%E5%8A%A9express%E6%A8%A1%E5%9D%97%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>先简介一下nodejs和NPM。Nodejs是2009年末Ryan Dahl在柏林的JavaScript大会上宣布的一项新技术，这项技术是关于在<strong>服务器端</strong>运行JavaScript的（是对JavaScript只能在<strong>浏览器端</strong>运行的一种颠覆）。Nodejs是一个基于Chrome V8引擎的JavaScript运行环境，而NPM则是用Nodejs开发的JavaScript包管理工具（作为Nodejs的一个扩展模块）。</p>
<p>有了Nodejs，无需再将书写好的代码部署到<strong>独立安装</strong>的Web服务器中去运行（Nodejs此时轻蔑地看了一眼NetBeans）。</p>
<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h1><h2 id="1-1-下载和安装"><a href="#1-1-下载和安装" class="headerlink" title="1.1 下载和安装"></a>1.1 下载和安装</h2><p>在 <a href="https://nodejs.org" target="_blank" rel="noopener">https://nodejs.org</a> 下载Windows版的msi安装包。有两种版本的（LTS和Current），LTS可以满足大多数用户需求的，Current版本则包含了更多的新特征；</p>
<p>安装过程相当简单，打开安装包一路next就行了，唯一需要注意的是要记住安装的目录，之后<strong>设置模块全局目录</strong>需要用到（如果以后使用时发现安装中遗漏了哪些功能也可以再次打开安装包进行修复，nodejs的设计理念是之一就是只维护少量的依赖，因此其编译和安装变得非常简单）；</p>
<p>安装之后打开<strong>命令行</strong>输入<code>node -v</code>和<code>npm -v</code>验证安装结果，如果安装成功都会出现相应的版本号（现在安装nodejs就顺带安装了npm这个模块了）；</p>
<p>安装结束后，在系统的环境变量<code>PATH</code>中自动被添加了<strong>Nodejs的安装路径</strong>，亲测后发现，如果这个路径丢了或被改了，在终端输入node或npm，cmd就会像看傻子一样告诉你这俩东西”“不是内部或外部命令，也不是可运行的程序或批处理文件”。</p>
<h2 id="1-2-什么是REPL？如何使用？"><a href="#1-2-什么是REPL？如何使用？" class="headerlink" title="1.2 什么是REPL？如何使用？"></a>1.2 什么是REPL？如何使用？</h2><p>REPL(Read Eval Print Loop)，交互式解译器，表示一个电脑的环境，类似于Windows终端（<code>cmd</code>）或者<code>Unix/Linux shell</code>，Node.js 的交互式解释器可以很好的调试 Javascript 代码；</p>
<p>只要在终端中输入<code>node</code>并回车即可启动；</p>
<p>交互式解释器，可以执行以下任务：</p>
<ul>
<li>读取 - 读取用户输入，解析输入了Javascript 数据结构并存储在内存中。</li>
<li>执行 - 执行输入的数据结构</li>
<li>打印 - 输出结果</li>
<li>循环 - 循环操作以上步骤直到用户两次按下 ctrl-c 按钮退出。</li>
</ul>
<p>下面是两个常用的REPL命令：</p>
<ul>
<li><code>Ctrl + C + C</code>或<code>Ctrl + D</code> - 退出REPL（以前不知道每次都要重启cmd）</li>
<li><code>.help</code> - 列出使用命令</li>
</ul>
<h2 id="1-3-npm-外部模块的安装和删除"><a href="#1-3-npm-外部模块的安装和删除" class="headerlink" title="1.3 npm 外部模块的安装和删除"></a>1.3 npm 外部模块的安装和删除</h2><blockquote>
<p>参考自：<a href="https://blog.csdn.net/yihanzhi/article/details/75665959" target="_blank" rel="noopener">https://blog.csdn.net/yihanzhi/article/details/75665959</a></p>
</blockquote>
<p>使用 npm 命令，可以安装、删除外部的模块（ <a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a> ）</p>
<p>安装命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">npm i xxx <span class="comment"># 等同于 npm install xxx</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">npm i xxx -g <span class="comment"># 全局安装</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">npm i xxx -S <span class="comment"># 或 npm i xxx --save，安装并保存到package.json的"dependencies"中</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">npm i xxx --save-dev <span class="comment"># 安装并保存到package.json的"devDependencies"中</span></span></span><br></pre></td></tr></table></figure>
<p>删除命令（怎么安装的就怎么删除）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">npm uninstall xxx</span></span><br><span class="line"><span class="meta">$</span><span class="bash">npm uninstall xxx -g</span></span><br><span class="line"><span class="meta">$</span><span class="bash">npm uninstall xxx --save</span></span><br><span class="line"><span class="meta">$</span><span class="bash">npm uninstall xxx --save-dev</span></span><br></pre></td></tr></table></figure>
<p>安装时如果下载速度太慢，可以使用淘宝提供的镜像安装方式，其安装方法为：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$npm</span> install <span class="literal">-g</span> cnpm -<span class="literal">-registry</span>=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>使用方法与npm完全一致，唯一区别就是命令由<code>npm</code>改为<code>cnpm</code></p>
<h2 id="1-4-设置全局目录"><a href="#1-4-设置全局目录" class="headerlink" title="1.4 设置全局目录"></a>1.4 设置全局目录</h2><p>全局目录包含两部分：cache（缓存）和global（模块包），默认安放在C盘的User\Administrator下，可以通过命令<code>npm config get cache</code>和<code>npm config get prefix</code>查看当前cache目录和global目录。</p>
<p>为了方便管理，我们在nodejs的安装目录下新建两个文件夹：<code>node_cache</code>、<code>node_global</code>，然后在终端使用<code>$ npm config set cache &quot;{global_path}/node_cache&quot;</code>和<code>$ npm config set prefix &quot;{global_path}/node_global&quot;</code>命令设置全局目录。</p>
<p>设置完<code>node_global</code>，来到环境变量，把<code>Path</code>里面的<code>.../AppData/Roaming/npm</code>改成<code>node_global</code>的绝对路径。</p>
<p>设置完成后，安装和删除单个模块时在后方加上<code>-g</code>就可以对该目录下的模块操作了。</p>
<h1 id="2-部署网站"><a href="#2-部署网站" class="headerlink" title="2 部署网站"></a>2 部署网站</h1><h2 id="2-1-安装express模块"><a href="#2-1-安装express模块" class="headerlink" title="2.1 安装express模块"></a>2.1 安装express模块</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">npm install express -g</span></span><br></pre></td></tr></table></figure>
<ul>
<li><a href="http://www.expressjs.com.cn/4x/api.html" target="_blank" rel="noopener">Express 4.x API 中文手册</a></li>
<li><a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">Express:基于 Node.js 平台，快速、开放、极简的 web 开发框架</a></li>
</ul>
<h2 id="2-2-创建服务入口"><a href="#2-2-创建服务入口" class="headerlink" title="2.2 创建服务入口"></a>2.2 创建服务入口</h2><p>首先创建一个<code>js文件</code>，在里面输入代码段：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//部署服务器</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.use(express.static(<span class="string">"G:/MyWebs"</span>)).listen(<span class="number">3333</span>);</span><br></pre></td></tr></table></figure>
<p>代码的意思是将文件夹 G:/MyWebs 作为静态目录部署在端口3333下。</p>
<ul>
<li><code>static()</code>函数里面的字符串是网站的路径名</li>
<li><code>listen()</code>函数里面是端口号</li>
</ul>
<h2 id="2-3-访问"><a href="#2-3-访问" class="headerlink" title="2.3 访问"></a>2.3 访问</h2><p>然后就可以通过REPL打开js文件来部署服务器啦，部署在本地服务器上，域名为<code>localhost</code>或者<code>127.0.0.1</code>，在后面加上端口号就可以访问啦。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://localhost:3333/</span><br><span class="line">https://127.0.0.1:3333/</span><br></pre></td></tr></table></figure>
<h1 id="3-获取本地IP地址"><a href="#3-获取本地IP地址" class="headerlink" title="3 获取本地IP地址"></a>3 获取本地IP地址</h1><blockquote>
<p>参考资料：<br><a href="https://nodejs.org/dist/latest-v8.x/docs/api/os.html#os_os_networkinterfaces" target="_blank" rel="noopener">nodejs官方API的os.networkInterfaces()</a><br><a href="http://zhangyaochun.iteye.com/blog/2028335" target="_blank" rel="noopener">iteye用户zhangyaochun的博客</a></p>
</blockquote>
<p>在局域网内供他人访问，首先要获取自己的IP地址，除了传统的ipconfig命令手动获取添加外，我们有必要考虑如何让nodejs自动获取主机的IP地址。</p>
<p>这里借用nodejs自带的<code>os</code>模块里面的<code>os.networkInterfaces()</code>方法来获取本地连接接口，os就是operation system操作系统模块。</p>
<h2 id="3-1-编写获取IPv4的函数"><a href="#3-1-编写获取IPv4的函数" class="headerlink" title="3.1 编写获取IPv4的函数"></a>3.1 编写获取IPv4的函数</h2><p>编写函数<code>getLocalIPv4()</code>函数，返回当前主机在网络连接中的IPv4地址：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取IPv4地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLocalIPv4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    interfaces = <span class="built_in">require</span>(<span class="string">"os"</span>).networkInterfaces();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> devName <span class="keyword">in</span> interfaces)&#123;<span class="comment">//遍历所有连接</span></span><br><span class="line">        <span class="keyword">var</span> iface = interfaces[devName];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;iface.length; i++)&#123;<span class="comment">//遍历每个连接中的不同地址(family为标识)</span></span><br><span class="line">            <span class="keyword">var</span> alias = iface[i];</span><br><span class="line">            <span class="keyword">if</span>(alias.family == <span class="string">'IPv4'</span>&amp;&amp;alias.address != <span class="string">'127.0.0.1'</span>&amp;&amp;!alias.internal)<span class="comment">//该判断保证为有效的IPv4地址（排除了内部地址和本地地址）</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> alias.address;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ipv4 = getLocalIPv4();</span><br></pre></td></tr></table></figure>
<h2 id="3-2-函数思路解析"><a href="#3-2-函数思路解析" class="headerlink" title="3.2 函数思路解析"></a>3.2 函数思路解析</h2><p>函数的思路如下：</p>
<ol>
<li>首先我们用<code>os.networkInterfaces()</code>获取对象，这个对象具体是啥我也不知道（直接输出<code>devName</code>的话是“无线网络连接”、“Loopback Pseudo-Interface 1”这种鬼东西，好像后者即使没有联网也可以获取，类似于主机对外接口之类的东西吧），所以用<code>devName</code>对其进行遍历，然后通过<code>devName</code>作为索引来反向访问获取到的东西（聪明）；</li>
<li>通过连接名获取连接后，类似于ipconfig得到的连接样式，一个连接下面有IPv4、IPv6等各种各样的连接，这时候就要遍历这些IPv4、IPv6……通过<code>family</code>这个关键字来判断，然后排除掉内部连接和本地连接后，能进入if条件句的就是货真价实的IPv4了。</li>
</ol>
<h2 id="3-3-官方API对networkInterfaces-的解释"><a href="#3-3-官方API对networkInterfaces-的解释" class="headerlink" title="3.3 官方API对networkInterfaces()的解释"></a>3.3 官方API对networkInterfaces()的解释</h2><p>最后我们明确一下<code>os.networkInterfaces()</code>获取到的究竟是个什么东西（<strong>前方大量抄袭！</strong>），官方API告诉我们，获取到的是一个对象(Object)，其数据结构如下：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  lo: [</span><br><span class="line">    &#123;</span><br><span class="line">      address: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">      netmask: <span class="string">'255.0.0.0'</span>,</span><br><span class="line">      family: <span class="string">'IPv4'</span>,</span><br><span class="line">      mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">      internal: <span class="literal">true</span>,</span><br><span class="line">      cidr: <span class="string">'127.0.0.1/8'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      address: <span class="string">'::1'</span>,</span><br><span class="line">      netmask: <span class="string">'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'</span>,</span><br><span class="line">      family: <span class="string">'IPv6'</span>,</span><br><span class="line">      mac: <span class="string">'00:00:00:00:00:00'</span>,</span><br><span class="line">      internal: <span class="literal">true</span>,</span><br><span class="line">      cidr: <span class="string">'::1/128'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  eth0: [</span><br><span class="line">    &#123;</span><br><span class="line">      address: <span class="string">'192.168.1.108'</span>,</span><br><span class="line">      netmask: <span class="string">'255.255.255.0'</span>,</span><br><span class="line">      family: <span class="string">'IPv4'</span>,</span><br><span class="line">      mac: <span class="string">'01:02:03:0a:0b:0c'</span>,</span><br><span class="line">      internal: <span class="literal">false</span>,</span><br><span class="line">      cidr: <span class="string">'192.168.1.108/24'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      address: <span class="string">'fe80::a00:27ff:fe4e:66a1'</span>,</span><br><span class="line">      netmask: <span class="string">'ffff:ffff:ffff:ffff::'</span>,</span><br><span class="line">      family: <span class="string">'IPv6'</span>,</span><br><span class="line">      mac: <span class="string">'01:02:03:0a:0b:0c'</span>,</span><br><span class="line">      internal: <span class="literal">false</span>,</span><br><span class="line">      cidr: <span class="string">'fe80::a00:27ff:fe4e:66a1/64'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>lo是内部地址，eth0是外部地址。</p>
<ul>
<li><code>address</code> 
  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noopener" class="type">&lt;string&gt;</a> The assigned IPv4 or IPv6 address</li>
<li><code>netmask</code> 
  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noopener" class="type">&lt;string&gt;</a> The IPv4 or IPv6 network mask</li>
<li><code>family</code> 
  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noopener" class="type">&lt;string&gt;</a> Either <code>IPv4</code> or <code>IPv6</code></li>
<li><code>mac</code> 
  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noopener" class="type">&lt;string&gt;</a> The MAC address of the network interface</li>
<li><code>internal</code> 
  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noopener" class="type">&lt;boolean&gt;</a> <code>true</code> if the network interface is a loopback or
similar interface that is not remotely accessible; otherwise <code>false</code></li>
<li><code>scopeid</code> 
  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noopener" class="type">&lt;number&gt;</a> The numeric IPv6 scope ID (only specified when <code>family</code>
is <code>IPv6</code>)</li>
<li><code>cidr</code> 
  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noopener" class="type">&lt;string&gt;</a> The assigned IPv4 or IPv6 address with the routing prefix
in CIDR notation. If the <code>netmask</code> is invalid, this property is set
to <code>null</code></li>
</ul>]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
        <tag>Express.js</tag>
      </tags>
  </entry>
  <entry>
    <title>VS code自定义用户代码片段snippet</title>
    <url>/2018/07/19/VS-code%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%A8%E6%88%B7%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5snippet/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p>参考资料: <a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">https://code.visualstudio.com/docs/editor/userdefinedsnippets</a></p>
</blockquote>
<p>我的模板：<a href="/2018/10/26/【VS-Code模板（snippet）】Vue-CLI-开发模式-通用模板">【VS Code模板（snippet）】Vue CLI 开发模式 通用模板</a></p>
<h1 id="1-为什么要自定义代码片段？"><a href="#1-为什么要自定义代码片段？" class="headerlink" title="1. 为什么要自定义代码片段？"></a>1. 为什么要自定义代码片段？</h1><p>在使用Dreamweaver、Webstorm等HTML页面编辑器时，其自带的自动补全功能（我更乐意称之为模板）往往可以减少我们写代码时的工作量，但IDE打开速度慢、占用内存高的缺点不断蚕食我的耐心。当发现VS code的代码片段自定义功能后，我决定将web开发的主战场转移至其上，其轻量级和可扩展性是前所未有的吸引人的。</p>
<h1 id="2-怎么做？"><a href="#2-怎么做？" class="headerlink" title="2. 怎么做？"></a>2. 怎么做？</h1><p>由于是在书写html页面时用到了代码片段功能，因此以创建html文件的代码片段为例说明创建的流程、语法。</p>
<h2 id="2-1-流程"><a href="#2-1-流程" class="headerlink" title="2.1 流程"></a>2.1 流程</h2><p>打开VS code，“文件-首选项-用户代码片段”（file-preference-User Snippets），在下拉列表中选择html文件，此时在VS code的应用数据文件夹内自动新建了一个名为html.json的文件，我们在这个json文件中定义我们的代码片段。</p>
<p>我们需要首先定义snippet name，在snippet name中，<code>prefix</code>和<code>body</code>是必不可少的两个字段(The prefix is what is used to trigger the snippet and the body will be expanded and inserted.)</p>
<p>我们定义一个html框架，命名为<strong>html template</strong>，代码如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"html template": &#123;</span><br><span class="line">    "prefix": "html template",</span><br><span class="line">    "body": [</span><br><span class="line">        "&lt;!DOCTYPE html&gt;",</span><br><span class="line">        "&lt;html lang=\"en\"&gt;",</span><br><span class="line">        "&lt;head&gt;",</span><br><span class="line">        "\t&lt;meta charset=\"UTF-8\"&gt;",</span><br><span class="line">        "\t&lt;title&gt;$&#123;1:Title&#125;&lt;/title&gt;$&#123;2&#125;",</span><br><span class="line">        "&lt;/head&gt;",</span><br><span class="line">        "&lt;body&gt;",</span><br><span class="line">        "\t$&#123;3&#125;",</span><br><span class="line">        "&lt;/body&gt;",</span><br><span class="line">        "&lt;/html&gt;",</span><br><span class="line">        <span class="string">"$&#123;0&#125;"</span></span><br><span class="line">    ],</span><br><span class="line">    "description": "create a html frame"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>保存，新建一个html文件，输入<code>html template</code>，按下Tab键，就可以自动补齐整个框架。</p>
<h2 id="2-2-语法说明"><a href="#2-2-语法说明" class="headerlink" title="2.2 语法说明"></a>2.2 语法说明</h2><ul>
<li>在body中，使用转义字符<code>\</code>来书写制表符<code>Tab</code>、双引号<code>&quot;</code>等内容；</li>
<li>使用<code>${num: default name}</code>来定义输入位置，按下Tab键来递进光标到下一个；</li>
<li><code>num</code>的值为<code>0,1,2,3...</code>。<code>0</code>为光标的最终位置，<code>1,2,3...</code>决定了光标的顺序位置；</li>
<li><code>default name</code>是默认值，可按下Tab不编辑直接跳过。</li>
</ul>
<h2 id="2-3-Global-or-Specific-Snippets"><a href="#2-3-Global-or-Specific-Snippets" class="headerlink" title="2.3 Global or Specific Snippets"></a>2.3 Global or Specific Snippets</h2><p>代码片段分为两种：<strong>全局和特定</strong>，这意味着我们可以定义适用于多种文件类型的代码片段，也可以定义仅仅针对于一种文件类型的代码片段。</p>
<p>全局代码片段的文件后缀名为<code>.code-snippets</code>，在<strong>用户代码片段</strong>下拉列表中，最上方有一个“<strong>新建全局代码片段文件</strong>”。</p>
<p>全局代码片段的语法规则和特定代码片段的语法规则一致，唯一区别在于其增加了一个字段<code>scope</code>，用于指定该规则适用于何种语言：（例）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"For_Loop"</span>: &#123;</span><br><span class="line">        <span class="attr">"prefix"</span>: <span class="string">"for"</span>,</span><br><span class="line">        <span class="attr">"scope"</span>: <span class="string">"javascript,typescript"</span>,</span><br><span class="line">        <span class="attr">"body"</span>: [</span><br><span class="line">            <span class="string">"for (const $&#123;2:element&#125; of $&#123;1:array&#125;) &#123;"</span>,</span><br><span class="line">            <span class="string">"\t$0"</span>,</span><br><span class="line">            <span class="string">"&#125;"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"For Loop"</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-4-自定义引用css和JavaScript的标签的代码片段"><a href="#2-4-自定义引用css和JavaScript的标签的代码片段" class="headerlink" title="2.4 自定义引用css和JavaScript的标签的代码片段"></a>2.4 自定义引用css和JavaScript的标签的代码片段</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"link template": &#123;</span><br><span class="line">    "prefix": "&lt;link rel...",</span><br><span class="line">    "body": [</span><br><span class="line">        <span class="string">"&lt;link rel=\"stylesheet\" type=\"$&#123;1:text/css&#125;\" href=\"$&#123;2&#125;\"&gt;$&#123;0&#125;"</span></span><br><span class="line">    ],</span><br><span class="line">    "description": "complete css link"</span><br><span class="line">&#125;,</span><br><span class="line">"script template": &#123;</span><br><span class="line">    "prefix": "&lt;script type...",</span><br><span class="line">    "body": [</span><br><span class="line">        <span class="string">"&lt;script type=\"$&#123;1:text/javascript&#125;\" src=\"$&#123;2&#125;\"&gt;&lt;/script&gt;$&#123;0&#125;"</span></span><br><span class="line">    ],</span><br><span class="line">    "description": "complete script quote"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>VS Code</category>
      </categories>
      <tags>
        <tag>Snippet</tag>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery学习笔记（2） jQuery选择器</title>
    <url>/2018/07/11/jQuery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89-jQuery%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<p>jQuery的选择器完全继承了CSS的风格，利用jQuery选择器，可以非常便捷和快速地找出特定的DOM元素，然后为它们添加相应的行为。</p>
<h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*标签选择器*/</span></span><br><span class="line"><span class="selector-tag">td</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*ID选择器*/</span></span><br><span class="line"><span class="selector-id">#note</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*类选择器*/</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.note</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dream</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*群组选择器*/</span></span><br><span class="line"><span class="selector-tag">td</span>,<span class="selector-tag">p</span>,<span class="selector-tag">div</span><span class="selector-class">.a</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*后代选择器*/</span></span><br><span class="line"><span class="selector-id">#links</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*通配选择符*/</span></span><br><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>ID和class的区别</strong></p>
<ul>
<li>对于html而言，ID和class都是DOM元素的属性值。不同的地方在于ID属性的值是唯一的，而class属性值可以重复。</li>
<li>一般不会对ID添加样式，使用只对class添加样式。</li>
</ul>
<h1 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h1><p>利用jQuery选择器，可以非常便捷和快速地找出特定的DOM元素，然后为它们添加相应的行为，并且无需担心浏览器是否支持这一选择器（库内部进行了优化）。</p>
<ul>
<li>在HTML中设置事件（JavaScript代码和HTML代码混杂）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">"demo();"</span>&gt;</span></span><br><span class="line">    喵喵喵</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"喵喵喵!"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用jQuery方法做到网页内容和行为分离</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    喵喵喵</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">".demo"</span>).click(<span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"喵喵喵!"</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="jQuery选择器的优势"><a href="#jQuery选择器的优势" class="headerlink" title="jQuery选择器的优势"></a>jQuery选择器的优势</h1><ol>
<li>简洁的写法。对比于DOM方法的<code>getElementById()</code>和<code>getElementsByTagName()</code>函数，更加简洁。</li>
<li>支持CSS1到CSS3选择器</li>
<li>完善的处理机制。使用DOM方法的<code>getElementById()</code>和<code>getElementsByTagName()</code>时，若不存在相应的DOM元素（ID或TagName），浏览器就会报错。但使用jQuery获取网页中不存在的元素也不会报错。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#tt"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注：</strong>若要判断所选择的元素是否存在，应该判断<strong>获取到的元素长度</strong>或者<strong>转换成DOM对象</strong>来判断</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($(<span class="string">"#tt"</span>).length &gt; <span class="number">0</span>) &#123; <span class="comment">//判断长度</span></span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($(<span class="string">"#tt"</span>)[<span class="number">0</span>]) &#123; <span class="comment">//转换成DOM对象</span></span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="jQuery选择器的种类"><a href="#jQuery选择器的种类" class="headerlink" title="jQuery选择器的种类"></a>jQuery选择器的种类</h1><p>jQuery选择器分为<strong>基本选择器、层次选择器、过滤选择器</strong>和<strong>表单选择器</strong>。用以下页面进行试验：</p>
<p><strong>HTML:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">id</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">    id为one，class为one的div</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>Class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">id</span>=<span class="string">"two"</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    id为two，class为one，title为test的div</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"other"</span>&gt;</span>class为mini，title为other<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span>class为mini，title为test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"tesst"</span>&gt;</span>class为mini，title为tesst<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: none;"</span> <span class="attr">class</span>=<span class="string">"none"</span>&gt;</span>style的displ为“none”点的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span>    class为hide的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    包含type为“hidden”的input的div</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">size</span>=<span class="string">"8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"mover"</span>&gt;</span>正在执行动画的span元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>CSS</strong><br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-tag">div</span>,<span class="selector-tag">span</span>,<span class="selector-tag">p</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#aaa</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">#000</span> <span class="number">1px</span> solid;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">17px</span>;</span><br><span class="line">        <span class="attribute">font-family</span>: Verdana;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.mini</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">55px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">55px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#aaa</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.hide</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1. 基本选择器"></a>1. 基本选择器</h2><p>基本选择器是最常用、最简单的选择器，通过元素<strong>id</strong>、<strong>class</strong>和<strong>标签名</strong>来查找DOM元素。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ID</span></span><br><span class="line">$(<span class="string">"#one"</span>)  </span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//类(class)</span></span><br><span class="line">$(<span class="string">".mini"</span>) </span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//元素div</span></span><br><span class="line">$(<span class="string">"div"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有元素</span></span><br><span class="line">$(<span class="string">"*"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//所有&lt;span&gt;元素和id为two的元素</span></span><br><span class="line">$(<span class="string">"span, #two"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="2-层次选择器"><a href="#2-层次选择器" class="headerlink" title="2. 层次选择器"></a>2. 层次选择器</h2><p>通过DOM元素之间的层次关系来获取特定元素。包括<strong>后代元素、子元素、相邻元素、兄弟元素</strong>。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//后代元素：改变&lt;body&gt;内所有&lt;div&gt;的背景色</span></span><br><span class="line">$(<span class="string">"body div"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//子元素：改变&lt;body&gt;内子&lt;div&gt;元素的颜色(仅为body下一级的div元素)</span></span><br><span class="line">$(<span class="string">"body &gt; div"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line">$(<span class="string">"body &gt;&gt; div"</span>)<span class="comment">//可以嵌套，表示下两级</span></span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line">$(<span class="string">"body &gt; div &gt; div"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相邻元素：改变class为one的下一个&lt;div&gt;元素背景色（注意不会选中自身）</span></span><br><span class="line">$(<span class="string">".one + div"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line">$(<span class="string">".one"</span>).next(<span class="string">"div"</span>) <span class="comment">//更常用的方法</span></span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//兄弟元素：改变id为two的元素后面所有&lt;div&gt;兄弟元素的背景色（注意不会选中自身）</span></span><br><span class="line">$(<span class="string">"#two ~ div"</span>) <span class="comment">//所有元素</span></span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line">$(<span class="string">"#two"</span>).nextAll(<span class="string">"div"</span>) <span class="comment">//更常用的方法</span></span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line">$(<span class="string">"#two"</span>).siblings(<span class="string">"div"</span>)<span class="comment">//nextAll只能选择之后的同辈元素，siblings方法可以选择与前后位置无关的同辈元素</span></span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="3-过滤选择器"><a href="#3-过滤选择器" class="headerlink" title="3. 过滤选择器"></a>3. 过滤选择器</h2><p>过滤选择器主要是通过特定的过滤规则来筛选出所需要的DOM元素。选择器以<strong>冒号(:)</strong>开头，搭以不同的过滤规则。在冒号前可以有<strong>一个</strong>元素、<strong>多个</strong>元素、或者<strong>没有</strong>元素。</p>
<p>1. 基本过滤选择器<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"div:first"</span>) <span class="comment">//所有div元素的第一个</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"div:last"</span>) <span class="comment">//所有div元素的最后一个</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"input:not(.myClass)"</span>) <span class="comment">//选择class不是myClass的input</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"input:even"</span>) <span class="comment">//索引为偶数的&lt;input&gt;</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"input:odd"</span>) <span class="comment">//索引为奇数的&lt;input&gt;</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"input:eq(0)"</span>) <span class="comment">//索引等于0的&lt;input&gt;，若索引号为负数，则逆序寻址</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"input:gt(1)"</span>) <span class="comment">//索引大于1的&lt;input&gt;</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"input:lt(10)"</span>) <span class="comment">//索引小于10的&lt;input&gt;</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">":header"</span>) <span class="comment">//所有&lt;h1&gt;&lt;h2&gt;&lt;h3&gt;...</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"div:animated"</span>) <span class="comment">//正在执行动画的&lt;div&gt;</span></span><br></pre></td></tr></table></figure><br>2. 内容过滤选择器<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"div:contains('di')"</span>) <span class="comment">//选择含有文本"di"的&lt;div&gt;</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"div:empty"</span>) <span class="comment">//选择不包含子元素（包括文本元素）的&lt;div&gt;</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"div:has(p)"</span>)  <span class="comment">//选取含有&lt;p&gt;元素的&lt;div&gt;</span></span><br><span class="line">$(<span class="string">":has(#two)"</span>)  <span class="comment">//选取含有id为two的所有元素</span></span><br><span class="line">$(<span class="string">":has(.mini)"</span>) <span class="comment">//选取含有class为mini的所有元素</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"div:parent"</span>) <span class="comment">//选择拥有子元素（包括文本元素）的&lt;div&gt;.（当爸爸了）</span></span><br></pre></td></tr></table></figure><br><strong>注：<code>contains()</code>和<code>has()</code>方法的区别</strong></p>
<ul>
<li><code>contains()</code>方法只选取文本</li>
<li><code>has()</code>方法只可以选取标签、id和class</li>
</ul>
<p>3. 可见性过滤选择器<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//让不可见元素显示。show()是jQuery显示元素的方法，3000是时间，单位是毫秒。</span></span><br><span class="line">$(<span class="string">"div:hidden"</span>).show(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"div:visible"</span>) <span class="comment">//选取可见的div元素</span></span><br></pre></td></tr></table></figure><br><strong>注：常用到的的不可见元素</strong><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span>略略略看不见我<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"visibility: hidden;"</span>&gt;</span>略略略还是看不见我<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>4. 属性过滤选择器</p>
<p>通过元素的属性来获取相应的元素<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 含有属性title的div</span></span><br><span class="line">$(<span class="string">"div[title]"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性title值为test的div</span></span><br><span class="line">$(<span class="string">"div[title=test]"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//title的值不为test的div（不一定要有title）</span></span><br><span class="line">$(<span class="string">"div[title!=test]"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//title以te开头的div</span></span><br><span class="line">$(<span class="string">"div[title^=te]"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//title以st结尾的div</span></span><br><span class="line">$(<span class="string">"div[title$=st]"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//title包含es的div</span></span><br><span class="line">$(<span class="string">"div[title*=es]"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//含有属性id，同时title包含es的div</span></span><br><span class="line">$(<span class="string">"div[id][title*=es]"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br></pre></td></tr></table></figure><br>5. 子元素过滤选择器</p>
<blockquote>
<p><strong>特别强调：</strong>子元素过滤选择器的冒号前一定要有<strong>空格</strong>，不然会报错。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//class为one的div父元素下第二个子元素</span></span><br><span class="line">$(<span class="string">"div.one :nth-child(2)"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//class为one的div父元素的第一个子元素</span></span><br><span class="line">$(<span class="string">"div.one :first-child"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//class为one的div父元素的最后一个子元素</span></span><br><span class="line">$(<span class="string">"div.one :last-child"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择只有一个子元素的class为one的div元素</span></span><br><span class="line">$(<span class="string">"div.one :only-child"</span>)</span><br><span class="line">    .css(<span class="string">"background"</span>,<span class="string">"#bbffaa"</span>);</span><br></pre></td></tr></table></figure>
<p><strong>注：<code>nth-child()</code>和<code>eq()</code>的区别</strong></p>
<ul>
<li><code>eq(index)</code>只匹配一个元素，<code>nth-child(index)</code>将为每一个父元素匹配子元素</li>
<li><code>eq(index)</code>的index从0开始；<code>nth-child(index)</code>的index从1开始</li>
</ul>
<p>6. 表单对象属性过滤选择器</p>
<p>主要是对所选择的表单元素进行过滤，如下拉框、多选框等。</p>
<p>HTML表单页面：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form1"</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">    可用元素：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"add"</span> <span class="attr">value</span>=<span class="string">"可用文本框"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    不可用元素：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span> <span class="attr">value</span>=<span class="string">"不可用文本框"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    可用元素：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"che"</span> <span class="attr">value</span>=<span class="string">"可用文本框"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    不可用元素：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span> <span class="attr">value</span>=<span class="string">"不可用文本框"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    多选框：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"newsletter"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> <span class="attr">value</span>=<span class="string">"test1"</span>/&gt;</span>test1</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"newsletter"</span> <span class="attr">value</span>=<span class="string">"test2"</span>/&gt;</span>test2</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"newsletter"</span> <span class="attr">value</span>=<span class="string">"test3"</span>/&gt;</span>test3</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"newsletter"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> <span class="attr">value</span>=<span class="string">"test4"</span>/&gt;</span>test4</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"newsletter"</span>  <span class="attr">value</span>=<span class="string">"test5"</span>/&gt;</span>test5</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    下拉列表1：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">style</span>=<span class="string">"height: 100px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>浙江<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>湖南<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>湖北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    下拉列表2：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"test2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>浙江<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>湖南<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>湖北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br>表单对象属性过滤选择器：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选取可用元素</span></span><br><span class="line">$(<span class="string">"#form1 input:enabled"</span>)</span><br><span class="line">    .val(<span class="string">"这里变化了"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选取不可用元素</span></span><br><span class="line">$(<span class="string">"#form1 input:disabled"</span>)</span><br><span class="line">    .val(<span class="string">"这里变化了"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选取已被选中的元素（单选框、复选框）</span></span><br><span class="line">$(<span class="string">"#form1 input:checked"</span>).length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选取已被选中的元素（下拉列表）-注意select后面有空格</span></span><br><span class="line">$(<span class="string">"#form1 select :selected"</span>).text();</span><br></pre></td></tr></table></figure></p>
<h2 id="4-表单选择器"><a href="#4-表单选择器" class="headerlink" title="4. 表单选择器"></a>4. 表单选择器</h2><p>表单选择器可以方便用户获取表单的某个或某类型的元素。和表单对象属性过滤选择器的区别在于：表单选择器侧重于选择<strong>表单元素</strong>，而表单对象属性过滤选择器侧重于选择<strong>属性</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">":input"</span>) <span class="comment">//&lt;input&gt;&lt;textarea&gt;&lt;select&gt;&lt;button&gt;元素</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">":text"</span>) <span class="comment">//单行文本框</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">":password"</span>) <span class="comment">//密码框</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">":radio"</span>) <span class="comment">//单选框</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">":checkbox"</span>) <span class="comment">//复选框</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">":submit"</span>) <span class="comment">//提交按钮</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">":image"</span>) <span class="comment">//图像按钮</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">":reset"</span>) <span class="comment">//重置按钮</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">":button"</span>) <span class="comment">//按钮</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">":file"</span>) <span class="comment">//上传域</span></span><br><span class="line">    </span><br><span class="line">$(<span class="string">":hidden"</span>) <span class="comment">//不可见元素</span></span><br></pre></td></tr></table></figure>
<h1 id="选择器中含有空格的注意事项"><a href="#选择器中含有空格的注意事项" class="headerlink" title="选择器中含有空格的注意事项"></a>选择器中含有空格的注意事项</h1><p>来看一个例子：<br>HTML：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span>bb<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span>cc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span>dd<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line">    ee</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span>ff<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span>gg<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>JavaScript：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $t_a = $(<span class="string">".test :hidden"</span>); <span class="comment">//带空格</span></span><br><span class="line"><span class="keyword">var</span> $t_b = $(<span class="string">".test:hidden"</span>); <span class="comment">//不带空格</span></span><br><span class="line"><span class="keyword">var</span> len_a = $t_a.length;</span><br><span class="line"><span class="keyword">var</span> len_b = $t_b.length;</span><br><span class="line">alert(len_a); <span class="comment">//输出5</span></span><br><span class="line">alert(len_b); <span class="comment">//输出3</span></span><br></pre></td></tr></table></figure></p>
<p>区别：</p>
<ul>
<li><code>$(&quot;.test :hidden&quot;); //带空格</code>选取的是class为test的元素中所有的隐藏元素。</li>
<li><code>$(&quot;.test:hidden&quot;); //不带空格</code>选取的是class为test，同时自身是隐藏元素的所有元素。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>jQuery</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 系统 -命令行右键菜单设置（Git/VS Code/cmd）</title>
    <url>/2018/10/06/Windows-%E7%B3%BB%E7%BB%9F-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E8%AE%BE%E7%BD%AE%EF%BC%88Git-VS-Code-cmd%EF%BC%89/</url>
    <content><![CDATA[<h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><h2 id="2021-3-24"><a href="#2021-3-24" class="headerlink" title="2021.3.24"></a>2021.3.24</h2><p>右键在此处打开Anaconda的命令：</p>
<p>cmd<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd.exe &#x2F;s &#x2F;k &quot;title Anaconda&quot; &amp;&amp; D:\Anaconda\anaconda3\Scripts\activate.bat D:\Anaconda\anaconda3</span><br></pre></td></tr></table></figure></p>
<p>powershell<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell.exe -noexit -command Set-Location -literalPath &#39;%V&#39; ; &quot;D:\Anaconda\anaconda3\shell\condabin\conda-hook.ps1&quot; ; &quot;conda activate &#39;D:\Anaconda\anaconda3&#39;&quot;</span><br></pre></td></tr></table></figure></p>
<h1 id="1-打开注册表"><a href="#1-打开注册表" class="headerlink" title="1. 打开注册表"></a>1. 打开注册表</h1><p>右键菜单的设置位于位于注册表中，打开方式如下：</p>
<ul>
<li>Win + R</li>
<li>输入：regedit</li>
<li>找到：HKEY_CLASSES_ROOT</li>
</ul>
<p>右键菜单可以简单分为两类：第一类是右键<strong>单个文件</strong>时打开的右键菜单，另一类是右键<strong>文件夹</strong>时打开的右键菜单。</p>
<h1 id="2-右键单击文件的右键菜单-以-VS-Code-为例"><a href="#2-右键单击文件的右键菜单-以-VS-Code-为例" class="headerlink" title="2. 右键单击文件的右键菜单- 以 VS Code 为例"></a>2. 右键单击文件的右键菜单- 以 VS Code 为例</h1><p>设置目录如下：</p>
<ul>
<li>HKEY_CLASSES_ROOT</li>
<li>*</li>
<li>shell</li>
</ul>
<p>在shell下新建“<strong>项</strong>”，命名为 <code>VS Code</code>，默认数据填写“Open with VS Code”，可以添加一个<strong>可扩充字符串</strong>，命名为<code>Icon</code>，数据为 VS Code的安装路径；</p>
<p>右键 VS Code，新建“<strong>项</strong>”，命名为<code>command</code>，默认的数据填入（VS Code安装路径 + %1，记得双引号(不过没有双引号似乎也不会怎样)）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">"D:\Program Files\Microsoft VS Code\Code.exe" "%1"</span><br></pre></td></tr></table></figure>
<p>这样右键某个文件就可以有“Open with VS Code”的选项啦</p>
<p><img src="/images/20181006170656499.png" alt="在这里插入图片描述"></p>
<h1 id="3-在某个文件夹下的右键菜单"><a href="#3-在某个文件夹下的右键菜单" class="headerlink" title="3. 在某个文件夹下的右键菜单"></a>3. 在某个文件夹下的右键菜单</h1><p>注册表中的位置：</p>
<ul>
<li>HKEY_CLASSES_ROOT</li>
<li>Directory</li>
<li><strong>Background</strong></li>
<li>shell</li>
</ul>
<p><img src="/images/20181006171127902.png" alt="在这里插入图片描述"></p>
<p>同样的方法，在shell下新建项<code>VSCode</code>，添加<code>command</code>命令，需要注意的是，command的值应该输入如下内容（路径 + %V）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">"D:\Program Files\Microsoft VS Code\Code.exe" "%V"</span><br></pre></td></tr></table></figure>
<p>我们可以发现，在该shell目录下，有 命令行、Git 等现有命令，这是安装相应软件时自动配置的环境，可是当我们右键一个文件夹时，<strong>并没有出现打开命令行的选项</strong>，只有当我们按下<code>shift</code>键再右键时，才会出现“在此处打开命令行”选项。这个功能通过<strong>添加 <code>Extended</code> 项</strong>来实现（新建<strong>字符串值</strong>，命名为Extended）。</p>
<p><img src="/images/20181006172101318.png" alt="在这里插入图片描述"></p>
<h2 id="3-1-直接右键点击文件夹的右键菜单"><a href="#3-1-直接右键点击文件夹的右键菜单" class="headerlink" title="3.1 直接右键点击文件夹的右键菜单"></a>3.1 直接右键点击文件夹的右键菜单</h2><p><img src="/images/20181006171724962.png" alt="在这里插入图片描述"></p>
<h2 id="3-2-按住-shift-右键点击文件夹的右键菜单"><a href="#3-2-按住-shift-右键点击文件夹的右键菜单" class="headerlink" title="3.2 按住 shift 右键点击文件夹的右键菜单"></a>3.2 按住 shift 右键点击文件夹的右键菜单</h2><p><img src="/images/20181006171759436.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>System</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs学习笔记（4） 文件操作 fs 及 express 上传</title>
    <url>/2018/07/25/Nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C-fs-%E5%8F%8A-express-%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p><strong>参考资料</strong></p>
<blockquote>
<p><a href="http://www.runoob.com/nodejs/nodejs-fs.html" target="_blank" rel="noopener">Node.js 文件系统 | 菜鸟教程</a><br><a href="http://www.w3school.com.cn/jsref/dom_obj_fileupload.asp" target="_blank" rel="noopener">HTML DOM FileUpload 对象 | W3school</a><br><a href="http://www.w3school.com.cn/tags/tag_form.asp" target="_blank" rel="noopener">HTML &lt;form&gt; 标签 | W3school</a><br><a href="http://www.w3school.com.cn/tags/tag_input.asp" target="_blank" rel="noopener">HTML &lt;input&gt; 标签 | W3school</a><br><a href="http://www.w3school.com.cn/tags/att_input_accept.asp" target="_blank" rel="noopener">HTML &lt;input&gt; 标签的 accept 属性</a><br><a href="https://www.npmjs.com/package/multer" target="_blank" rel="noopener">multer - npm</a><br><a href="https://blog.csdn.net/qq_26766283/article/details/72840498" target="_blank" rel="noopener">multer模块的使用 +文件上传+ 评论 | 维克多噗噗的博客</a></p>
</blockquote>
<hr>
<h1 id="1-fs-模块"><a href="#1-fs-模块" class="headerlink" title="1. fs 模块"></a>1. fs 模块</h1><p>该模块主要执行文件操作，操作的方法均有同步和异步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的 fs.readFileSync()。<br>异步的方法函数<strong>最后一个参数为回调函数</strong>，<strong>回调函数的第一个参数包含了错误信息(error)</strong>。其余参数根据不同的方法有所差异。<br>比起同步，异步方法性能更高，速度更快，而且没有阻塞。在此仅记录我在 express 上传文件操作时所用到的<code>readFile</code>方法、<code>writeFile</code>方法、<code>stat</code>方法和<code>unlink</code>方法，对其余方法仅作简单描述，<strong>详细使用方法和实例参照<a href="http://www.runoob.com/nodejs/nodejs-fs.html" target="_blank" rel="noopener">Node.js文件系统 | 菜鸟教程</a></strong>。</p>
<hr>
<h2 id="1-1-读取文件fs-readFile"><a href="#1-1-读取文件fs-readFile" class="headerlink" title="1.1 读取文件fs.readFile"></a>1.1 读取文件fs.readFile</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.readFile(filename,[,options], callback(err, data));</span><br></pre></td></tr></table></figure>
<p>回调函数的参数：</p>
<ul>
<li><code>err</code> - 错误信息；</li>
<li><code>data</code> - buffer数据流对象，可用<code>data.toString()</code>转换成字符串；<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步读取</span></span><br><span class="line">fs.readFile(<span class="string">'./input.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"异步读取："</span> + data.toString());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="1-2-写入文件fs-writeFile"><a href="#1-2-写入文件fs-writeFile" class="headerlink" title="1.2 写入文件fs.writeFile"></a>1.2 写入文件fs.writeFile</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.writeFile(file, data[, options], callback(err))</span><br></pre></td></tr></table></figure>
<p>writeFile 直接打开文件默认是<code>w</code>模式，所以如果文件存在，该方法写入的内容会<strong>覆盖</strong>旧的文件内容。</p>
<p>参数使用说明如下：</p>
<ul>
<li><code>file</code> - 文件名或文件描述符。</li>
<li><code>data</code> - 要写入文件的数据，可以是String（字符串）或Buffer（流）对象。</li>
<li><code>options</code> - 该参数是一个<strong>对象</strong>，内容如下：<ul>
<li><strong>encoding</strong> - 编码，默认值为<code>utf8</code>；</li>
<li><strong>mode</strong> - 模式（权限），默认值为<code>0666</code>（可读、可写）；</li>
<li><strong>flag</strong> - 文件打开行为，默认值为<code>&#39;w&#39;</code>；</li>
</ul>
</li>
<li><code>callback</code> - 回调函数，回调函数只包含错误信息参数(err)，在写入失败时返回。</li>
</ul>
<p>常见的打开文件的模式（mode）有以下几种：</p>
<table class="reference">
<tr><th>Flag</th><th>描述</th></tr>
<tr><td>r</td><td>以读取模式打开文件。如果文件不存在抛出异常。</td></tr>
<tr><td>r+</td><td> 以读写模式打开文件。如果文件不存在抛出异常。</td></tr>
<tr><td>w</td><td>以写入模式打开文件，如果文件不存在则创建。</td></tr>
<tr><td>w+</td><td>以读写模式打开文件，如果文件不存在则创建。</td></tr>
</table>



<hr>
<h2 id="1-3-获取文件信息"><a href="#1-3-获取文件信息" class="headerlink" title="1.3 获取文件信息"></a>1.3 获取文件信息</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.stat(path, callback(err, stats))</span><br></pre></td></tr></table></figure>
<p>文件的状态信息包含在<strong>回调函数的参数stats</strong>中，这是一个<strong>fs.Stats对象</strong>，其内容如下：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">atime: Wed Jul <span class="number">25</span> <span class="number">2018</span> <span class="number">21</span>:<span class="number">11</span>:<span class="number">59</span> GMT+<span class="number">0800</span> (GMT+<span class="number">08</span>:<span class="number">00</span>) &#123;&#125;</span><br><span class="line">atimeMs: <span class="number">1532524319921.0476</span></span><br><span class="line">birthtime: Wed Jul <span class="number">25</span> <span class="number">2018</span> <span class="number">21</span>:<span class="number">11</span>:<span class="number">59</span> GMT+<span class="number">0800</span> (GMT+<span class="number">08</span>:<span class="number">00</span>) &#123;&#125;</span><br><span class="line">birthtimeMs: <span class="number">1532524319921.0476</span></span><br><span class="line">blksize: <span class="literal">undefined</span></span><br><span class="line">blocks: <span class="literal">undefined</span></span><br><span class="line">ctime: Wed Jul <span class="number">25</span> <span class="number">2018</span> <span class="number">21</span>:<span class="number">11</span>:<span class="number">59</span> GMT+<span class="number">0800</span> (GMT+<span class="number">08</span>:<span class="number">00</span>) &#123;&#125;</span><br><span class="line">ctimeMs: <span class="number">1532524319922.0476</span></span><br><span class="line">dev: <span class="number">6533005</span></span><br><span class="line">gid: <span class="number">0</span></span><br><span class="line">ino: <span class="number">1407374884234476</span></span><br><span class="line">mode: <span class="number">33206</span></span><br><span class="line">mtime: Wed Jul <span class="number">25</span> <span class="number">2018</span> <span class="number">21</span>:<span class="number">11</span>:<span class="number">59</span> GMT+<span class="number">0800</span> (GMT+<span class="number">08</span>:<span class="number">00</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中有四个时间值得我们关注：</p>
<ul>
<li><strong>atime</strong> - 访问时间（access time）；</li>
<li><strong>birthtime</strong> - 创建时间；</li>
<li><strong>ctime</strong> - 状态修改时间（change time），显示的是文件的权限、拥有者、所属的组、链接数发生改变时的时间；</li>
<li><strong>mtime</strong> - 修改时间（modify time），显示的是文件内容被修改的最后时间。</li>
</ul>
<p>每一个时间都是一个JavaScript Date()对象的实例，因此有些方法是可以通用的，例如获取日期、月份、年份：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">stats.birthtime.getDate()</span><br><span class="line"><span class="number">25</span></span><br><span class="line">stats.birthtime.getMonth() <span class="comment">// js的月份从0开始算</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line">stats.birthtime.getFullYear()</span><br><span class="line"><span class="number">2018</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="1-4-删除文件fs-unlink"><a href="#1-4-删除文件fs-unlink" class="headerlink" title="1.4 删除文件fs.unlink"></a>1.4 删除文件fs.unlink</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.unlink(path, callback(err))</span><br></pre></td></tr></table></figure>
<p>直接删除<code>path</code>对应的文件，若文件不存在会通过<code>err</code>报错。</p>
<hr>
<p><strong>其他方法</strong></p>
<table class="reference">
    <tr>
        <th>方法</th>
        <th>作用</th>
    </tr>
    <tr>
        <td>fs.open(path, flags[, mode], callback(err, fd))</td>
        <td>打开文件</td>
    </tr>
    <tr>
        <td>fs.read(fd, buffer, offset, length, position, callback)</td>
        <td>读取文件</td>
    </tr>
    <tr>
        <td>fs.close(fd, callback)</td>
        <td>关闭文件</td>
    </tr>
    <tr>
        <td>fs.ftruncate(fd, len, callback)</td>
        <td>截取文件</td>
    </tr>
    <tr>
        <td>fs.mkdir(path[, mode], callback)</td>
        <td>创建目录</td>
    </tr>
    <tr>
        <td>fs.rmdir(path, callback)</td>
        <td>删除目录</td>
    </tr>
</table>

<hr>
<h2 id="1-5-读取目录fs-readdir"><a href="#1-5-读取目录fs-readdir" class="headerlink" title="1.5 读取目录fs.readdir"></a>1.5 读取目录fs.readdir</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.readdir(path, callback(err, files))</span><br></pre></td></tr></table></figure>
<p><strong>参数说明：</strong></p>
<ul>
<li><code>path</code> - 文件目录名（若<strong>目录不存在</strong>或者<strong>不是目录</strong>，则会将错误信息写入err）；</li>
<li><code>files</code> - 目录下的<strong>文件数组</strong>列表，其包含如下字段：<ul>
<li><strong>length</strong> - 数组大小，记录了该目录下文件和子文件夹的总数；</li>
<li><strong>[0, 1, 2, 3, …]</strong> - files[i]依次记录了文件名（以及子文件夹名）；</li>
</ul>
</li>
</ul>
<p>例如我们使用如下方法输出当前目录下的所有<strong>文件</strong>及<strong>子文件夹</strong>名：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.readdir(<span class="string">'./'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, files</span>) </span>&#123; <span class="comment">// 获取目录下所有文件名</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;files.length; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(files[i].toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>得到的结果（按照文件名排序了）：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">file.js</span><br><span class="line">input.txt</span><br><span class="line">node_modules</span><br><span class="line">package-lock.json</span><br><span class="line">package.json</span><br><span class="line">reference.css</span><br><span class="line">table.html</span><br></pre></td></tr></table></figure></p>
<p>我们还可以配合<strong>fs.unlink</strong>方法来清空一个文件夹：<strong>4.4 缓存管理</strong></p>
<hr>
<h1 id="2-关于-HTTP-文件传输和-multer-控制文件上传的几个问题（写在前面）"><a href="#2-关于-HTTP-文件传输和-multer-控制文件上传的几个问题（写在前面）" class="headerlink" title="2. 关于 HTTP 文件传输和 multer 控制文件上传的几个问题（写在前面）"></a>2. 关于 HTTP 文件传输和 multer 控制文件上传的几个问题（写在前面）</h1><h2 id="2-1-文件选择后（未提交前）放在哪里？"><a href="#2-1-文件选择后（未提交前）放在哪里？" class="headerlink" title="2.1 文件选择后（未提交前）放在哪里？"></a>2.1 文件选择后（未提交前）放在哪里？</h2><p>哪都没放，还在原先的磁盘上，只是根据选择文件信息填充了HTML DOM FileUpload的属性。</p>
<hr>
<h2 id="2-2-文件提交后的路径是什么？"><a href="#2-2-文件提交后的路径是什么？" class="headerlink" title="2.2 文件提交后的路径是什么？"></a>2.2 文件提交后的路径是什么？</h2><p>由服务器设定，在express中由<code>multer({dest: &#39;&#39;})</code>指定。</p>
<hr>
<h2 id="2-3-文件传输在HTTP协议中是如何进行的？"><a href="#2-3-文件传输在HTTP协议中是如何进行的？" class="headerlink" title="2.3 文件传输在HTTP协议中是如何进行的？"></a>2.3 文件传输在HTTP协议中是如何进行的？</h2><p>将文件<strong>编码后存储在请求体中</strong>，且一旦发送请求（包含请求体和请求头），就向服务器指定接收文件的位置发送一个编码文件（存放在<code>multer({dest: &#39;&#39;})</code>指定的路径中）；</p>
<p>服务器可以根据请求头的信息，对编码文件进行操作（解析、读取等）；</p>
<p>若直接修改编码文件的后缀名，可以直接获得原始文件，例如我发送一个png图片，在服务器收到了一个名称为<code>7d5931b2f95ce2cb93e647c6d64f5326</code>的文件，将其后缀名修改为.png，打开，完美还原。</p>
<hr>
<h2 id="2-4-multer-options-中有哪些键？分别有什么用？？"><a href="#2-4-multer-options-中有哪些键？分别有什么用？？" class="headerlink" title="2.4 multer([options])中有哪些键？分别有什么用？？"></a>2.4 multer([options])中有哪些键？分别有什么用？？</h2><ul>
<li><code>dest</code>：指定接收编码文件的路径；（用的最多）</li>
<li><code>fileFilter</code>：控制接收的文件类型；（偶尔用用，在控制文件类型时用到）</li>
<li><code>limits</code>：Limits of the uploaded data；（基本没用）</li>
<li><code>preservePath</code>：Keep the full path of files instead of just the base name；（基本没用）</li>
</ul>
<hr>
<h2 id="2-5-multer-array-有什么用？？"><a href="#2-5-multer-array-有什么用？？" class="headerlink" title="2.5 multer.array()有什么用？？"></a>2.5 multer.array()有什么用？？</h2><p>array()的作用是规定接受的一系列文件共有的字段名（类似于将文件分类）。其可以使用app.use()命名为一个全局中间件，<strong>但这并不理想</strong>，因为在一个脚本文件中可能需要<strong>响应不同类型的文件上传</strong>，有图片、文档、XML、JSON等。</p>
<p>所以更理想的方式是在全局先创建一个multer实例：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> upload = multer(&#123; <span class="attr">dest</span>: <span class="string">'./tmp/'</span>&#125;);</span><br></pre></td></tr></table></figure><br>然后在对每个不同的POST请求响应中，将<code>upload.array(&#39;&#39;)</code>作为<strong>第二个参数</strong>写入：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应请求</span></span><br><span class="line">app.post(<span class="string">'/image_upload'</span>, upload.array(<span class="string">'image'</span>), <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// code...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>一般来说，一个app.post()只能响应一个表单元素的提交，因此<strong>对提交的不同类型的表单元素数据设置不同的字段名(fieldname)，是最理想的选择</strong>。</p>
<hr>
<h2 id="2-6-使用不同浏览器传输文件会有什么不同效果？？"><a href="#2-6-使用不同浏览器传输文件会有什么不同效果？？" class="headerlink" title="2.6 使用不同浏览器传输文件会有什么不同效果？？"></a>2.6 使用不同浏览器传输文件会有什么不同效果？？</h2><p>没有不同效果，都可以成功传输文件，并且都能将编码文件存储到指定文件夹中。只是请求头的<code>user-agent</code>信息会有不同。</p>
<hr>
<h1 id="3-HTML-用于上传文件的元素"><a href="#3-HTML-用于上传文件的元素" class="headerlink" title="3. HTML 用于上传文件的元素"></a>3. HTML 用于上传文件的元素</h1><h2 id="3-1-HTML-lt-form-gt-标签的-enctype-属性"><a href="#3-1-HTML-lt-form-gt-标签的-enctype-属性" class="headerlink" title="3.1 HTML &lt; form &gt; 标签的 enctype 属性"></a>3.1 HTML &lt; form &gt; 标签的 enctype 属性</h2><blockquote>
<p><a href="http://www.w3school.com.cn/tags/tag_form.asp" target="_blank" rel="noopener">HTML &lt;form&gt; 标签 | W3school</a><br><a href="http://www.w3school.com.cn/tags/tag_input.asp" target="_blank" rel="noopener">HTML &lt;input&gt; 标签 | W3school</a></p>
</blockquote>
<p>enctype 属性规定在发送到服务器之前应该如何对表单数据进行编码；<br>默认地，表单数据会编码为 <code>application/x-www-form-urlencoded</code>。就是说，在发送到服务器之前，所有字符都会进行编码（空格转换为 “+” 加号，特殊符号转换为 ASCII HEX 值）；<br>当我们使用文件上传功能时，enctype的值必须设置为<code>multipart/form-data</code>。</p>
<hr>
<p><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form enctype&#x3D;&quot;value&quot;&gt;</span><br></pre></td></tr></table></figure><br><strong>属性值</strong></p>
<table class="dataintable">
  <tr>
    <th>值</th>
    <th>描述</th>
  </tr>  
  <tr>
    <td>application/x-www-form-urlencoded</td>
    <td>在发送前编码所有字符（默认）</td>
  </tr>
  <tr>
    <td>multipart/form-data</td>
    <td>
    <p>不对字符编码。</p>
    <p><strong>在使用包含文件上传控件的表单时，必须使用该值。</strong></p>
    </td>
  </tr>
  <tr>
    <td>text/plain</td>
    <td>空格转换为 &quot;+&quot; 加号，但不对特殊字符编码。</td>
  </tr>
</table>
- - -

## 3.2 HTML DOM FileUpload 对象

> [HTML DOM FileUpload 对象 | W3school](http://www.w3school.com.cn/jsref/dom_obj_fileupload.asp)

在 HTML 文档中 `<input type="file">` 标签每出现一次，一个 FileUpload 对象就会被创建。我们可以通过使用`document.getElementById()`来访问 FileUpload 对象：
.html：
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"uplodaFile"</span> <span class="attr">action</span>=<span class="string">"/file_upload"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"image"</span> <span class="attr">size</span>=<span class="string">"50"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传图片"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
.js（获取 FileUpload 对象）：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"uplodaFile"</span>);</span><br></pre></td></tr></table></figure>
<strong>FileUpload 对象的属性:</strong>

<table class="dataintable">
  <tr>
    <th style="width:25%">属性</th>
    <th>描述</th>
  </tr>
  <tr>
    <td>accept</td>
    <td>
    <p>设置或返回指示文件传输的 MIME 类型的列表（逗号分隔）。</p>
    <p><a href="http://www.runoob.com/http/http-content-type.html" target="_blank" rel="noopener">Content-Type</a></p>
    </td>
  </tr>
  <tr>
    <td>accessKey</td>
    <td>设置或返回访问 FileUpload 对象的快捷键。</td>
  </tr>
  <tr>
    <td>alt</td>
    <td>设置或返回不支持 &lt;input type=&quot;file&quot;&gt; 时显示的替代文字。</td>
  </tr>
  <tr>
    <td>defaultValue</td>
    <td>设置或返回 FileUpload 对象的初始值。</td>
  </tr>
  <tr>
    <td>disabled</td>
    <td>设置或返回是否禁用 FileUpload 对象。</td>
  </tr>
  <tr>
    <td>form</td>
    <td>返回对包含 FileUpload 对象的表单的引用。</td>
  </tr>
  <tr>
    <td>id</td>
    <td>设置或返回 FileUpload 对象的 id。</td>
  </tr>
  <tr>
    <td>name</td>
    <td>设置或返回 FileUpload 对象的名称。</td>
  </tr>
  <tr>
    <td>tabIndex</td>
    <td>设置或返回定义 FileUpload 对象的 tab 键控制次序的索引号。</td>
  </tr>
  <tr>
    <td>type</td>
    <td>返回表单元素的类型。对于 FileUpload ，则是 &quot;file&quot; 。</td>
  </tr>
  <tr>
    <td>value</td>
    <td>返回由用户输入设置的文本后，FileUpload 对象的文件名。</td>
  </tr>
</table>

<hr>
<h1 id="4-express-文件上传"><a href="#4-express-文件上传" class="headerlink" title="4. express 文件上传"></a>4. express 文件上传</h1><h2 id="4-1-文件上传的实例"><a href="#4-1-文件上传的实例" class="headerlink" title="4.1 文件上传的实例"></a>4.1 文件上传的实例</h2><p>upload.html:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Upload Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>UPLOAD IMAGE FILE<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"uploadImg"</span> <span class="attr">action</span>=<span class="string">"/image_upload"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"image"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传图片"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"uploadImg"</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>upload.js:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传图片文件测试脚本</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 依赖</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件</span></span><br><span class="line">app.use(express.static(<span class="string">'./uploads/'</span>));</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制允许接收的文件类型（4.3.3）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fileFilter</span> (<span class="params">req, file, cd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (file.mimetype == <span class="string">"image/png"</span> || file.mimetype == <span class="string">"image/jpeg"</span>)&#123;</span><br><span class="line">        cd(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        req.error = <span class="string">"不允许上传"</span> + file.mimetype + <span class="string">"类型的文件！"</span>;</span><br><span class="line">        cd(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置缓存路径和文件过滤器（4.3）</span></span><br><span class="line"><span class="keyword">var</span> upload = multer(&#123; <span class="attr">dest</span>: <span class="string">'./uploadFiles/tmp/'</span>, <span class="attr">fileFilter</span>: fileFilter&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首页</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.sendFile(__dirname + <span class="string">"/"</span> + <span class="string">"upload.html"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应请求</span></span><br><span class="line">app.post(<span class="string">'/image_upload'</span>, upload.array(<span class="string">'image'</span>), <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 文件信息</span></span><br><span class="line">    <span class="keyword">if</span>(!req.files[<span class="number">0</span>])&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(req.error);</span><br><span class="line">        res.send(req.error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(req.files[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储并响应客户端</span></span><br><span class="line">    <span class="keyword">var</span> des_file = __dirname + <span class="string">"/uploadFiles/"</span> + req.files[<span class="number">0</span>].fieldname + <span class="string">"/"</span> + req.files[<span class="number">0</span>].originalname;</span><br><span class="line">    fs.readFile(req.files[<span class="number">0</span>].path, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        fs.writeFile(des_file, data, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> response = &#123;</span><br><span class="line">                    message: <span class="string">'File uploaded successfully'</span>,</span><br><span class="line">                    filename: req.files[<span class="number">0</span>].originalname</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="built_in">console</span>.log(response);</span><br><span class="line">                res.json(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">3333</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">    <span class="keyword">var</span> port = server.address().port;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为：http://%s:%s"</span>, host, port);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="4-2-multer模块是什么？"><a href="#4-2-multer模块是什么？" class="headerlink" title="4.2 multer模块是什么？"></a>4.2 multer模块是什么？</h2><blockquote>
<p><a href="https://www.npmjs.com/package/multer" target="_blank" rel="noopener">multer - npm</a></p>
</blockquote>
<p>Multer是一个专门用于处理<code>multipart/form-data</code>编码类型数据流的node.js中间件，在进行文件上传操作时常用到。</p>
<p><strong>需要注意的是</strong>，当表单元素的编码类型不是<code>multipart/form-data</code>时，Multer不会对请求进行解析。</p>
<p>我们一般通过如下方法使用multer模块：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"><span class="keyword">var</span> upload = multer(&#123; <span class="attr">dest</span>: <span class="string">'./tmp/'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应请求</span></span><br><span class="line">app.post(<span class="string">'/image_upload'</span>, upload.array(<span class="string">'image'</span>), <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// code...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="4-3-multer如何控制文件传输？"><a href="#4-3-multer如何控制文件传输？" class="headerlink" title="4.3 multer如何控制文件传输？"></a>4.3 multer如何控制文件传输？</h2><blockquote>
<p><a href="https://www.npmjs.com/package/multer" target="_blank" rel="noopener">multer - npm</a></p>
</blockquote>
<hr>
<h3 id="4-3-1-控制编码文件的位置"><a href="#4-3-1-控制编码文件的位置" class="headerlink" title="4.3.1 控制编码文件的位置"></a>4.3.1 控制编码文件的位置</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">multer(&#123; <span class="attr">dest</span>: <span class="string">'./uploadFiles/tmp/'</span> &#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="4-3-2-给不同的文件响应规定字段名"><a href="#4-3-2-给不同的文件响应规定字段名" class="headerlink" title="4.3.2 给不同的文件响应规定字段名"></a>4.3.2 给不同的文件响应规定字段名</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">multer.array(<span class="string">'image'</span>);</span><br><span class="line">multer.array(<span class="string">'myType'</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="4-3-3-控制接收文件的类型"><a href="#4-3-3-控制接收文件的类型" class="headerlink" title="4.3.3 控制接收文件的类型"></a>4.3.3 控制接收文件的类型</h3><blockquote>
<p>IMME文件类型：<a href="http://www.runoob.com/http/http-content-type.html" target="_blank" rel="noopener">Content-Type</a></p>
</blockquote>
<hr>
<p><strong>前端控制</strong></p>
<blockquote>
<p><a href="http://www.w3school.com.cn/tags/att_input_accept.asp" target="_blank" rel="noopener">HTML &lt;input&gt; 标签的 accept 属性</a></p>
</blockquote>
<p>为表单元素<code>&lt;input type=&quot;file&quot;&gt;</code>设置属性<code>accept</code>，限定文件选择对话框中允许选择的文件类型（多种类型用逗号分隔）：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"image"</span> <span class="attr">accept</span>=<span class="string">"image/png, application/pdf"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<hr>
<p><strong>服务端控制</strong></p>
<blockquote>
<p><a href="https://blog.csdn.net/qq_26766283/article/details/72840498" target="_blank" rel="noopener">multer模块的使用 +文件上传+ 评论 | 维克多噗噗的博客</a><br><a href="https://www.npmjs.com/package/multer#filefilter" target="_blank" rel="noopener">multer(fileFilter) - npm</a></p>
</blockquote>
<p>在服务端控制接收文件的类型，主要依靠<code>multer([options])</code>中的<code>fileFilter</code>键（<strong>2.4 multer([options])中有哪些键？分别有什么用？？</strong>）。<code>fileFilter</code>键的使用方法是：创建一个函数<code>fileFilter(req, file, cd){}</code>，来对请求进行解析，进而通过<strong>参数<code>cd</code></strong>决定是否接收发送的文件。</p>
<p>错误的使用：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不能直接规定fileFilter的键值</span></span><br><span class="line"><span class="keyword">var</span> upload = multer(&#123; <span class="attr">dest</span>: <span class="string">'.upload'</span>, <span class="attr">fileFilter</span>: <span class="string">'image/png, image/jpeg'</span>&#125;);</span><br></pre></td></tr></table></figure></p>
<p>正确的使用：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 控制允许接收的文件类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fileFilter</span> (<span class="params">req, file, cd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (file.mimetype == <span class="string">"image/png"</span> || file.mimetype == <span class="string">"image/jpeg"</span>)&#123;</span><br><span class="line">        cd(<span class="literal">null</span>, <span class="literal">true</span>); <span class="comment">// 同意接收文件</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        req.error = <span class="string">"不允许上传"</span> + file.mimetype + <span class="string">"类型的文件！"</span>;</span><br><span class="line">        cd(<span class="literal">null</span>, <span class="literal">false</span>); <span class="comment">// 拒绝接收文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> upload = multer(&#123; <span class="attr">dest</span>: <span class="string">'./uploadFiles/tmp/'</span>, <span class="attr">fileFilter</span>: fileFilter&#125;);</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>file</code>包含以下字段<ul>
<li><code>encoding</code>:”7bit”；</li>
<li><code>fieldname</code>:”image”；（字段名：由<code>upload.array(&#39;image&#39;)</code>定义的）</li>
<li><code>mimetype</code>:”image/jpeg”；</li>
<li><code>originalname</code>:”540ff7cddc29e.jpg”；</li>
</ul>
</li>
<li><code>cd</code>的用法<ul>
<li><code>cd(null, true)</code> - To accept the file pass <code>true</code></li>
<li><code>cd(null, false)</code> - To reject this file pass <code>false</code></li>
</ul>
</li>
</ul>
<hr>
<h2 id="4-4-设置本地存储路径（通过-req-对象的属性）"><a href="#4-4-设置本地存储路径（通过-req-对象的属性）" class="headerlink" title="4.4 设置本地存储路径（通过 req 对象的属性）"></a>4.4 设置本地存储路径（通过 req 对象的属性）</h2><p>在文件目录下创建uploadFiles文件夹，同时根据upload.array()中规定的字段名创建文件夹（一定不能创建出错，不然会提示无法打开相应的文件夹）；</p>
<p>例如<code>upload.array(&#39;image&#39;)</code>，创建<strong>uploadFiles/image</strong>，使用下面方法可以将文件存入到image文件夹中：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> des_file = __dirname + <span class="string">"/uploadFiles/"</span> + req.files[<span class="number">0</span>].fieldname + <span class="string">"/"</span> + req.files[<span class="number">0</span>].originalname;</span><br><span class="line"></span><br><span class="line">fs.readFile(req.files[<span class="number">0</span>].path, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    fs.writeFile(des_file, data, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//callback...</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="4-5-缓存管理"><a href="#4-5-缓存管理" class="headerlink" title="4.5 缓存管理"></a>4.5 缓存管理</h2><p>在接收文件时，服务器将受到大量的编码文件，当完成文件接收后，这些编码的文件仍然存放在服务器主机磁盘上。这些文件的存在有利于数据的恢复，但当其数量达到一定规模时，会对磁盘空间造成较大的压力，因此，应该采取合适的手段进行<strong>编码文件的数量控制</strong>，来保证磁盘空间的可用性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除传输文件时的临时文件</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> desDir = <span class="string">"D:/nodejs/my-sql/uploadFiles/tmp/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先获取该文件夹下所有文件名</span></span><br><span class="line">fs.readdir(desDir, <span class="function"><span class="keyword">function</span> (<span class="params">err, files</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;files.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 使用 unlink 删除</span></span><br><span class="line">        fs.unlink(desDir + files[i], <span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Successfully delete file "</span> + files[i].toString()); <span class="comment">// 注意应转换成字符串</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
        <tag>Express.js</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs学习笔记（5） 文件上传系统实例</title>
    <url>/2018/07/27/Nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%B3%BB%E7%BB%9F%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<blockquote>
<p>MySQL可以存放几乎任何类型的数据（图片、文档、压缩包等），但这不是最好的解决方案，正常情况下都是在数据库中存放文件路径，图片、音乐、视频、压缩包、文档等文件存放在硬盘上。</p>
</blockquote>
<hr>
<p><strong>2018.8.4更新：</strong></p>
<p>在传输文件时，<code>multer().array()</code>设置的字段属性应该和前端中的<strong>&lt;input&gt;</strong>标签的<code>name</code>属性一致，否则会产生错误：“<code>unexpected field: ......</code>”</p>
<hr>
<h1 id="1-代码"><a href="#1-代码" class="headerlink" title="1. 代码"></a>1. 代码</h1><p>index.html<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Upload File&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;Select a File&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;form action="/u</span>pload_file<span class="string">" method="</span>POST<span class="string">" enctype="</span>multipart/form-data<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>file<span class="string">" name="</span>file<span class="string">"&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>submit<span class="string">" value="</span>Submit<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;form action="</span>/delete_all_file<span class="string">" method="</span>GET<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>submit<span class="string">" value="</span>删除所有文件<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;form action="</span>/delete_cache<span class="string">" method="</span>GET<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>submit<span class="string">" value="</span>清除缓存<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>server.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建服务器</span></span><br><span class="line"><span class="comment"> * - 实现文件传输并合理存储</span></span><br><span class="line"><span class="comment"> * - 实现磁盘文件和数据库文件信息的同步一体</span></span><br><span class="line"><span class="comment"> * - 接收文件完毕后自动删除缓存</span></span><br><span class="line"><span class="comment"> * - 可以在前端删除所有文件（同步修改数据库）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************</span></span><br><span class="line"><span class="comment">************ 预定义 **************</span></span><br><span class="line"><span class="comment">*********************************/</span></span><br><span class="line"><span class="comment">//依赖</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> clear = <span class="built_in">require</span>(<span class="string">'./clear'</span>);</span><br><span class="line"><span class="keyword">var</span> db = <span class="built_in">require</span>(<span class="string">'./db'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;)); <span class="comment">// 只解析请求中的字符串和数组（本例暂时没用到）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置文件缓存的目录</span></span><br><span class="line"><span class="keyword">var</span> upload = multer(&#123; <span class="attr">dest</span>: <span class="string">'./uploadFiles/tmp/'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************</span></span><br><span class="line"><span class="comment"> ********************************</span></span><br><span class="line"><span class="comment">*********************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首页</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.sendFile(__dirname + <span class="string">'/'</span> + <span class="string">'index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应文件上传请求</span></span><br><span class="line">app.post(<span class="string">'/upload_file'</span>, upload.array(<span class="string">'file'</span>), <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 文件信息</span></span><br><span class="line">    <span class="keyword">if</span> (req.files[<span class="number">0</span>])&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"----------接收文件----------\n"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(req.files[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 存储</span></span><br><span class="line">    <span class="keyword">var</span> des_file = __dirname + <span class="string">"/uploadFiles/"</span> + req.files[<span class="number">0</span>].fieldname + <span class="string">"/"</span> + req.files[<span class="number">0</span>].originalname;</span><br><span class="line">    fs.readFile(req.files[<span class="number">0</span>].path, <span class="function"><span class="keyword">function</span> (<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.error(error);</span><br><span class="line">        &#125;</span><br><span class="line">        fs.writeFile(des_file, data, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="comment">// 接收失败</span></span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 接收成功</span></span><br><span class="line">                <span class="keyword">var</span> response = &#123;</span><br><span class="line">                    message: <span class="string">'File uploaded successfully!'</span>,</span><br><span class="line">                    filename: req.files[<span class="number">0</span>].originalname</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'\n----------SAVING-----------\n'</span>);</span><br><span class="line">                <span class="comment">// 删除缓存文件</span></span><br><span class="line">                fs.unlink(req.files[<span class="number">0</span>].path, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 将文件信息写入数据库</span></span><br><span class="line">                <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>().toJSON();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> addSQL = <span class="string">'INSERT INTO uploadfiles(fieldname, originalName, tmpName, encoding, mimetype, size, path, tmpPath, addTime) VALUES(?,?,?,?,?,?,?,?,?)'</span>;</span><br><span class="line">                <span class="keyword">var</span> addSqlParams = [req.files[<span class="number">0</span>].fieldname, req.files[<span class="number">0</span>].originalname, req.files[<span class="number">0</span>].filename,</span><br><span class="line">                    req.files[<span class="number">0</span>].encoding, req.files[<span class="number">0</span>].mimetype, req.files[<span class="number">0</span>].size, des_file, __dirname + <span class="string">'/'</span> + req.files[<span class="number">0</span>].path, time];</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 插入数据</span></span><br><span class="line">                db.connection.query(addSQL, addSqlParams, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(response));</span><br><span class="line">                        <span class="built_in">console</span>.log(result);</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'\n----------SUCCEED----------\n\n'</span>);</span><br><span class="line">                        res.json( response );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除所有文件</span></span><br><span class="line">app.get(<span class="string">'/delete_all_file'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (clear.clearAllFile()) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Clear all files successfully!'</span>);</span><br><span class="line">        res.send(<span class="string">'&lt;h1&gt;Clear all files successfully!&lt;/h1&gt;'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(<span class="string">'&lt;h1&gt;Error: When clear all files!&lt;/h1&gt;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除缓存</span></span><br><span class="line">app.get(<span class="string">'/delete_cache'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (clear.clearCache()) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Clear cache successfully!'</span>);</span><br><span class="line">        res.send(<span class="string">'&lt;h1&gt;Clear cache successfully!&lt;/h1&gt;'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(<span class="string">'&lt;h1&gt;Error: When clear cache!&lt;/h1&gt;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取本地IPv4</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLocalIPv4</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    interfaces = <span class="built_in">require</span>(<span class="string">"os"</span>).networkInterfaces();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> devName <span class="keyword">in</span> interfaces)&#123;<span class="comment">//遍历所有连接</span></span><br><span class="line">        <span class="keyword">var</span> iface = interfaces[devName];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;iface.length; i++)&#123;<span class="comment">//遍历每个连接中的不同地址(family为标识)</span></span><br><span class="line">            <span class="keyword">var</span> alias = iface[i];</span><br><span class="line">            <span class="keyword">if</span>(alias.family == <span class="string">'IPv4'</span> &amp;&amp; alias.address != <span class="string">'127.0.0.1'</span> &amp;&amp; !alias.internal)<span class="comment">//该判断保证为有效的IPv4地址（排除了内部地址和本地地址）</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> alias.address;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">3333</span>, getLocalIPv4(), <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">    <span class="keyword">var</span> port = server.address().port;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'访问地址为：http://%s:%s'</span>, host, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>依赖项，package.json<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"node-file"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">    <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">        <span class="attr">"body-parser"</span>: <span class="string">"^1.18.3"</span>,</span><br><span class="line">        <span class="attr">"express"</span>: <span class="string">"^4.16.3"</span>,</span><br><span class="line">        <span class="attr">"fs"</span>: <span class="string">"0.0.1-security"</span>,</span><br><span class="line">        <span class="attr">"multer"</span>: <span class="string">"^1.3.1"</span>,</span><br><span class="line">        <span class="attr">"mysql"</span>: <span class="string">"^2.16.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>clear.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件清理 + 缓存清理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 依赖</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> db = <span class="built_in">require</span>(<span class="string">'./db'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> clearAllFile = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    fs.readdir(<span class="string">'./uploadFiles/file'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, files</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.error(error);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;files.length; i++) &#123;</span><br><span class="line">            fs.unlink(__dirname + <span class="string">"/uploadFiles/file/"</span> + files[i].toString(), <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 在数据库中删除文件信息</span></span><br><span class="line">            <span class="keyword">var</span> dropSql = <span class="string">'delete from uploadfiles where originalName=\''</span>+ files[i].toString()+<span class="string">'\''</span>;</span><br><span class="line">            db.connection.query(dropSql, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> clearCache = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    fs.readdir(<span class="string">'./uploadFiles/tmp'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, files</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.error(error);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;files.length; i++) &#123;</span><br><span class="line">            fs.unlink(__dirname + <span class="string">"/uploadFiles/tmp/"</span> + files[i].toString(), <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.clearAllFile = clearAllFile;</span><br><span class="line">exports.clearCache = clearCache;</span><br></pre></td></tr></table></figure></p>
<p>db.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接数据库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">    user: <span class="string">'mysqljs'</span>,</span><br><span class="line">    password: <span class="string">'mysqljs'</span>,</span><br><span class="line">    database: <span class="string">'uploadfiles'</span></span><br><span class="line">&#125;);</span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line">exports.connection = connection;</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a>2. 思路</h1><p><strong>整体思路</strong>：在前端选择文件并上传至服务器，服务器接收文件同时删除缓存；接收文件成功后，将文件信息读取存入数据库中；删除文件时，同步删除数据库中的相关信息。</p>
<p><strong>详细步骤：</strong></p>
<p>首先我们需要依赖以下几个npm模块：</p>
<ol>
<li><strong>express</strong> - 搭建服务器；</li>
<li><strong>mysql</strong> - 连接数据库；</li>
<li><strong>fs</strong> - 文件操作；</li>
<li><strong>body-parser</strong> - 解析post请求体；</li>
<li><strong>multer</strong> - 对<code>multipart/form-data</code>编码文件解析；</li>
</ol>
<p>然后关联两个自定义模块：clear和db，clear中包含了清除所有文件和清除所有缓存的两个方法，db则返回一个数据库连接；<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> clear = <span class="built_in">require</span>(<span class="string">'./clear'</span>);</span><br><span class="line"><span class="keyword">var</span> db = <span class="built_in">require</span>(<span class="string">'./db'</span>);</span><br></pre></td></tr></table></figure></p>
<p>在<strong>当前文件夹</strong>创建文件夹<strong>uploadFiles</strong>，文件下下创建两个子文件夹<strong>tmp</strong>和<strong>file</strong>，用来存放临时文件和接收文件。然后设置tmp为临时文件的目录：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置文件缓存的目录</span></span><br><span class="line"><span class="keyword">var</span> upload = multer(&#123; <span class="attr">dest</span>: <span class="string">'./uploadFiles/tmp/'</span>&#125;);</span><br></pre></td></tr></table></figure></p>
<p>接着设置应用的请求响应，需要响应四种请求：</p>
<ul>
<li><code>app.get(&#39;/&#39;)</code> - 首页请求，使用<strong>res.sendFile()</strong>把首页丢过去；</li>
<li><code>app.post(&#39;/upload_file&#39;)</code> - 上传文件请求<strong>（见下方解释）</strong>；</li>
<li><code>app.get(&#39;/delete_all_file&#39;)</code> - 删除所有文件请求，调用自定义模块<strong>clear</strong>中的<code>clearAllFile()</code>方法，通过返回值来判断是否成功；</li>
<li><code>app.get(&#39;/delete_cache&#39;)</code> - 清除缓存请求，调用自定义模块<strong>clear</strong>中的<code>clearCache()</code>方法，通过返回值来判断是否成功；</li>
</ul>
<hr>
<h2 id="2-1-文件上传详解"><a href="#2-1-文件上传详解" class="headerlink" title="2.1 文件上传详解"></a>2.1 文件上传详解</h2><p>响应<code>/upload_file</code>请求，使用<code>upload.array(&#39;file&#39;)</code>为所有接受到的文件添加统一的字段<strong>file</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">'/upload_file'</span>, upload.array(<span class="string">'file'</span>), <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;）</span><br></pre></td></tr></table></figure>
<p><code>req.files[0]</code>包含了文件的全部信息（由中间件upload.array(‘file’)写入的），内容如下：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    fieldname: <span class="string">'file'</span>,</span><br><span class="line">    originalname: <span class="string">'542F2294A1566BEA83D1BAE1A00D6C9A.jpg'</span>,</span><br><span class="line">    encoding: <span class="string">'7bit'</span>,</span><br><span class="line">    mimetype: <span class="string">'image/jpeg'</span>,</span><br><span class="line">    destination: <span class="string">'./uploadFiles/tmp/'</span>,</span><br><span class="line">    filename: <span class="string">'b0dcfcd9d88451bab4ca427571c77cd5'</span>,</span><br><span class="line">    path: <span class="string">'uploadFiles\\tmp\\b0dcfcd9d88451bab4ca427571c77cd5'</span>,</span><br><span class="line">    size: <span class="number">217804</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>设置文件存储位置，为当前目录uploadFiles文件夹中file字段对应的文件夹，通过设置不同字段对文件进行分类存储可以保证较好的逻辑清晰性：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> des_file = __dirname + <span class="string">"/uploadFiles/"</span> + req.files[<span class="number">0</span>].fieldname + <span class="string">"/"</span> + req.files[<span class="number">0</span>].originalname;</span><br></pre></td></tr></table></figure></p>
<p>接下来通过读取编码文件来还原上传的文件，用到的方法如下结构：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">'/upload_file'</span>, upload.array(<span class="string">'file'</span>), <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">    fs.readFile(req.files[<span class="number">0</span>].path, <span class="function"><span class="keyword">function</span> (<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">        fs.writeFile(des_file, data, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="comment">// ....</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// ....</span></span><br><span class="line">                <span class="comment">// 删除缓存文件</span></span><br><span class="line">                fs.unlink(req.files[<span class="number">0</span>].path, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                    <span class="comment">// ....</span></span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> addSQL = <span class="string">''</span>;</span><br><span class="line">                <span class="keyword">var</span> addSqlParams = [];</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 插入数据</span></span><br><span class="line">                db.connection.query(addSQL, addSqlParams, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">// ....</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="2-2-自建模块clear和db"><a href="#2-2-自建模块clear和db" class="headerlink" title="2.2 自建模块clear和db"></a>2.2 自建模块clear和db</h2><blockquote>
<p><a href="http://www.runoob.com/nodejs/nodejs-mysql.html" target="_blank" rel="noopener">Node.js 连接 MySQL | 菜鸟教程</a></p>
</blockquote>
<p><strong>db.js</strong>文件结构简单，返回一个数据库连接，使用方法如下：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> db = <span class="built_in">require</span>(<span class="string">'./db'</span>);</span><br><span class="line"></span><br><span class="line">db.connection.query(query1[, query2], callback(err, result)&#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<hr>
<p><strong>clear.js</strong>文件定义了两个方法：清除缓存和清除所有文件，<strong>清除所有文件</strong>除了清除磁盘文件外，还清空了数据库中的相关信息：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> clearAllFile = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取目录信息</span></span><br><span class="line">    fs.readdir(<span class="string">'./uploadFiles/file'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, files</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">        <span class="comment">// 循环删除文件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;files.length; i++) &#123;</span><br><span class="line">            fs.unlink(__dirname + <span class="string">"/uploadFiles/file/"</span> + files[i].toString(), <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// ....</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 在数据库中删除文件信息</span></span><br><span class="line">            <span class="keyword">var</span> dropSql = <span class="string">''</span>;</span><br><span class="line">            db.connection.query(dropSql, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// ....</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line">exports.clearAllFile = clearAllFile;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
        <tag>Express.js</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs学习笔记（5+）文件上传基础 demo （不包括数据库操作）</title>
    <url>/2018/10/11/Nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885-%EF%BC%89%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%9F%BA%E7%A1%80-demo-%EF%BC%88%E4%B8%8D%E5%8C%85%E6%8B%AC%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%EF%BC%89/</url>
    <content><![CDATA[<p>index.html<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/journal/receive_file"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"files"</span> <span class="attr">value</span>=<span class="string">"选择文件"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>server.js<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件缓存目录</span></span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"><span class="keyword">const</span> upload = multer(&#123;</span><br><span class="line">    dest: <span class="string">'D:/rswork/upload/tmp/'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接池集群，管理多个连接</span></span><br><span class="line"><span class="keyword">const</span> poolCluster = mysql.createPoolCluster();</span><br><span class="line">poolCluster.add(<span class="string">'rsjournal'</span>, models.mysql_rsjournal); <span class="comment">// 连接数据库，此处不完整</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收文件</span></span><br><span class="line">app.post(<span class="string">'/receive_file'</span>,upload.array(<span class="string">'files'</span>), (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.files[<span class="number">0</span>]) &#123;</span><br><span class="line">        res.send(<span class="string">'文件传输错误'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> des_file = <span class="string">"D:/rswork/upload/"</span> + req.files[<span class="number">0</span>].fieldname + <span class="string">"/"</span> + req.files[<span class="number">0</span>].originalname</span><br><span class="line"></span><br><span class="line">    fs.readFile(req.files[<span class="number">0</span>].path, <span class="function"><span class="keyword">function</span> (<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.error(error)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// console.log('writeFile前面');</span></span><br><span class="line">        fs.writeFile(des_file, data, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="comment">// 接收失败</span></span><br><span class="line">                res.send(<span class="string">'文件传输错误'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 接收成功</span></span><br><span class="line">                res.send(<span class="string">'成功！'</span>)</span><br><span class="line">                <span class="comment">// 删除缓存文件</span></span><br><span class="line">                fs.unlink(req.files[<span class="number">0</span>].path, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = app.listen(<span class="number">3333</span>, <span class="string">'0.0.0.0'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'实例访问地址: %s:%d'</span>,</span><br><span class="line">        server.address().address,</span><br><span class="line">        server.address().port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
        <tag>Express.js</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs学习笔记（3） 创建服务器：Web 模块(http)与 express 框架</title>
    <url>/2018/07/23/Nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89-%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%9AWeb-%E6%A8%A1%E5%9D%97-http-%E4%B8%8E-express-%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p><strong>参考资料</strong></p>
<blockquote>
<p>《了不起的Node.js》[劳奇(Guillermo Rauch)-2014.1]<br><a href="https://nodejs.org/api/http.html" target="_blank" rel="noopener">HTTP | Node.js Documentation</a><br><a href="http://www.runoob.com/nodejs/nodejs-web-module.html" target="_blank" rel="noopener">Web 模块 | 菜鸟教程</a><br><a href="http://www.runoob.com/nodejs/nodejs-express-framework.html" target="_blank" rel="noopener">Express 模块 | 菜鸟教程</a><br><a href="http://expressjs.com/en/4x/api.html" target="_blank" rel="noopener">express官方API</a><br><a href="https://www.cnblogs.com/whiteMu/p/5983125.html" target="_blank" rel="noopener">whiteMu的博客(博客园)：nodejs之url模块</a><br><a href="http://www.w3school.com.cn/jsref/jsref_substr.asp" target="_blank" rel="noopener">W3school：JavaScript的substr()方法</a><br><a href="http://www.runoob.com/http/http-status-codes.html" target="_blank" rel="noopener">HTTP状态码 | 菜鸟教程</a><br><a href="http://www.runoob.com/http/http-content-type.html" target="_blank" rel="noopener">HTTP content-type | 菜鸟教程</a><br><a href="https://imququ.com/post/transfer-encoding-header-in-http.html" target="_blank" rel="noopener">Jerry Qu的博客：HTTP 协议中的 Transfer-Encoding</a><br><a href="https://www.npmjs.com/package/body-parser" target="_blank" rel="noopener">npm官网 body-parser 的API文档</a><br><a href="http://www.expressjs.com.cn/resources/middleware.html" target="_blank" rel="noopener">express 第三方中间件</a></p>
</blockquote>
<p>大多数服务器不仅可以运行<strong>服务端</strong>的脚本语言，而且可以通过脚本语言从<strong>数据库</strong>获取数据，将结果返回给客户端浏览器。该笔记介绍使用Nodejs实现服务器功能，涉及到两个模块：http和express。http模块主要用于搭建HTTP <strong>服务端</strong>，express是一个简洁而灵活的 Nodejs Web应用框架，提供了一系列强大的特性帮助我们创建各种 Web 应用，同时包含丰富的 HTTP 工具。</p>
<h1 id="1-使用-http-模块创建服务器"><a href="#1-使用-http-模块创建服务器" class="headerlink" title="1. 使用 http 模块创建服务器"></a>1. 使用 http 模块创建服务器</h1><h2 id="1-1-实现思路及代码"><a href="#1-1-实现思路及代码" class="headerlink" title="1.1 实现思路及代码"></a>1.1 实现思路及代码</h2><p>HTTP即超文本传输协议，使用Nodejs http 模块的 createServer 方法创建服务器，获取前端的文件请求，然后根据请求将本地的文件写入到前端页面中，因此，需要依赖 fs 模块来读取文件，依赖 url 模块来解析链接，详细实现代码如下：</p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My test page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Head<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>My paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>server.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务器（要点已标记）</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//解析请求，包括文件名</span></span><br><span class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;  <span class="comment">/***1.3***/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出请求的服务名</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//若不包含文件名，则默认到达首页</span></span><br><span class="line">    <span class="keyword">if</span> (pathname == <span class="string">'/'</span>)&#123;</span><br><span class="line">        pathname = <span class="string">'/index.html'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从文件系统中读取请求的文件内容</span></span><br><span class="line">    fs.readFile(pathname.substr(<span class="number">1</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;  <span class="comment">/***1.4***/</span></span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="comment">// HTTP 状态码: 404 : NOT FOUND</span></span><br><span class="line">            <span class="comment">// Content Type: text/plain</span></span><br><span class="line">            response.writeHead(<span class="number">404</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);<span class="comment">/***1.2***/</span></span><br><span class="line">            response.write(<span class="string">"&lt;h1&gt;Page missing&lt;/h1&gt;"</span>);               <span class="comment">/***1.2***/</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// HTTP 状态码: 200 : OK</span></span><br><span class="line">            <span class="comment">// Content Type: text/plain</span></span><br><span class="line">            response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 响应文件内容</span></span><br><span class="line">            response.write(data.toString());  <span class="comment">/***1.5***/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 发送响应数据</span></span><br><span class="line">        response.end();  <span class="comment">/***1.2***/</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).listen(<span class="number">3333</span>);</span><br></pre></td></tr></table></figure>
<h2 id="1-2-HTTP-结构"><a href="#1-2-HTTP-结构" class="headerlink" title="1.2 HTTP 结构"></a>1.2 HTTP 结构</h2><p>HTTP 协议构建在<strong>请求</strong>和<strong>响应</strong>的概念上，对应在Node.js中就是由<code>http.ServerResquest</code>和<code>http.ServerResponse</code>这两个构造器构造出来的对象，即<code>http.createServer(function(request, response){})</code>中的<code>request</code>和<code>response</code>。</p>
<p> 当用户浏览一个网站时，用户代理（浏览器）会创建一个请求，该请求通过TCP发送给Web服务器，随后服务器会给出响应。</p>
<h3 id="1-2-1-Request中的重要字段"><a href="#1-2-1-Request中的重要字段" class="headerlink" title="1.2.1 Request中的重要字段"></a>1.2.1 Request中的重要字段</h3><p>通过上面的描述，我们知道request是客户端代理（浏览器）发出的请求，这个请求往往来自 HTTP 浏览器，不是由服务端定义的。那么请求包含了哪些内容？有哪些是常用的？这引起了我极大的兴趣。借助VS Code的调试功能，我观察到了request这一参数的内容，在此记录几个（自认为）比较重要的字段：<br> （Win7的系统，在谷歌浏览器中输入<code>http://127.0.0.1:3333</code>，得到的request部分信息）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">△ headers: # 头信息</span><br><span class="line">    -accept-language:"zh-CN,zh;q=0.9"</span><br><span class="line">    -connection:"keep-alive"</span><br><span class="line">    -host:"127.0.0.1:3333"</span><br><span class="line">    -user-agent:"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36"</span><br><span class="line">△ httpVersion:"1.1"</span><br><span class="line">△ method:"GET"</span><br><span class="line">△ socket:Socket &#123;connecting: false, _hadError: false, _handle: TCP, …&#125; # 套接字</span><br><span class="line">△ url:"/"</span><br></pre></td></tr></table></figure>
<h3 id="1-2-2-Response-头信息：文件类型、状态码、连接和转换码"><a href="#1-2-2-Response-头信息：文件类型、状态码、连接和转换码" class="headerlink" title="1.2.2 Response 头信息：文件类型、状态码、连接和转换码"></a>1.2.2 Response 头信息：文件类型、状态码、连接和转换码</h3><p> 当收到请求，服务器借助response对象完成响应。response对象中，最重要的是它的<strong>头信息</strong>——<code>response._header</code>，由于 HTTP 的目的是进行<strong>文档交换</strong>，它在请求和响应消息前使用头信息（header）来描述不同的消息内容。</p>
<p>我们借助<code>response.writeHead()</code>函数来写入头信息（如下）。其中，200是状态码，<code>{&#39;Content-Type&#39;: &#39;text/html&#39;}</code>声明了发送的内容为html文档。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 写入响应头信息</span></span><br><span class="line"><span class="comment"> * response.writeHead(statusCode[, statusMessage][, headers])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> <span class="variable">statusCode</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> <span class="variable">statusMessage</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> <span class="variable">headers</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>Web 页面会发送不同类型的内容：文本（text），HTML，XML，JSON，PNG及JPEG图片，等等。发送内容的类型（type）在Content-Type头信息中标注，下面是常见的文件类型（<a href="http://www.runoob.com/http/http-content-type.html" target="_blank" rel="noopener">HTTP content-type | 菜鸟教程</a>）：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>类型</th>
<th>Content-Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>文本（text）</td>
<td>text/plain</td>
</tr>
<tr>
<td>HTML</td>
<td>text/html</td>
</tr>
<tr>
<td>XML</td>
<td>text/xml</td>
</tr>
<tr>
<td>JSON</td>
<td>application/json</td>
</tr>
<tr>
<td>PNG</td>
<td>image/png</td>
</tr>
<tr>
<td>JPEG</td>
<td>image/jpeg</td>
</tr>
</tbody>
</table>
</div>
<p>除了内容类型，头信息还包括了HTTP状态码（statusCode），状态码就是告诉客户端服务器的响应状态，下面是常见的HTTP状态码（<a href="http://www.runoob.com/http/http-status-codes.html" target="_blank" rel="noopener">HTTP状态码 | 菜鸟教程</a>）：</p>
<ul>
<li><strong>200</strong> - 请求成功</li>
<li><strong>301</strong> - 资源（网页等）被永久转移到其它URL</li>
<li><strong>404</strong> - 请求的资源（网页等）不存在</li>
<li><strong>500</strong> - 内部服务器错误</li>
</ul>
<p>除了状态码<code>statusCode</code>和内容类型<code>Content-Type</code>，头信息还包括了Date，Connection和Transfer-Encoding，这三个内容是 Nodejs 自动生成的。</p>
<p>当我们借助调试功能输出<code>response._header</code>时，得到如下信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Sun, 22 Jul 2018 06:50:19 GMT # Date是响应送出的时间，GMT是格林尼治太阳时（北京时间 - 8h）；</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Transfer-Encoding: chunked</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Connection</strong>：Node设置的默认值是keep-alive，是Node为了通知浏览器：你和我使用保持连接（这是为了提高性能，因为浏览器不想浪费时间去重新建立和关闭TCP连接。当然我们也可以调用writeHead方法传递一个不同的值，如Close，来将其重写掉）；</li>
<li><strong>Transfer-Encoding</strong>：Node设置的默认值是chunked（分块编码），主要的原因是Node天生的<strong>异步机制</strong>，这样响应就可以逐步产生。在头部加入该字段后，就代表这个报文采用了分块编码。详细说明参见：<a href="https://imququ.com/post/transfer-encoding-header-in-http.html" target="_blank" rel="noopener">Jerry Qu的博客：HTTP 协议中的 Transfer-Encoding</a></li>
</ul>
<h3 id="1-2-3-写入数据内容及结尾：response-write-和response-end"><a href="#1-2-3-写入数据内容及结尾：response-write-和response-end" class="headerlink" title="1.2.3 写入数据内容及结尾：response.write()和response.end()"></a>1.2.3 写入数据内容及结尾：response.write()和response.end()</h3><p><code>response.write()</code> 和 <code>response.end()</code> 是为 http 响应中填写内容的主要方法，例如，我们可以直接在write()<strong>或</strong>end()中写入HTML语句：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前提是定义内容类型为html</span></span><br><span class="line">response.writeHead(<span class="number">200</span>, &#123;Content-Type: <span class="string">'text/html'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 写入响应内容</span></span><br><span class="line"><span class="comment"> * response.write(chunk[, encoding][, callback])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String | Buffer&#125;</span> <span class="variable">chunk</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>encoding 默认值 utf-8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> <span class="variable">callback</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">response.write(<span class="string">'&lt;h1&gt;My Head.&lt;/h1&gt;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完成响应（直接结束或返回内容后结束）</span></span><br><span class="line"><span class="comment"> * response.end([data][, encoding][, callback])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String | Buffer&#125;</span> <span class="variable">data</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> <span class="variable">encoding</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> <span class="variable">callback</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;this&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">response.end(<span class="string">'&lt;p&gt;My paragraph.&lt;/p&gt;'</span>);</span><br></pre></td></tr></table></figure>
<p>也可以使用JavaScript的<code>toString()</code>将fs读取到的文件数据(data)转换成字符串放到write()中去（见1.5）.</p>
<p><code>response.end()</code>除了可以发送内容，它本身还是一个信号(signal)，告诉服务器头信息(headers)和内容主体(body)已经送达，且该方法<strong>必须在每个response出现时被调用</strong></p>
<p>在调用end前，我们可以<strong>多次调用</strong><code>response.write()</code>方法来发送数据(This method may be called multiple times to provide successive parts of the body)，由于Node http设置了<code>Transfer-Encoding</code>的默认值是chunked（分块编码），因此每个write及end都将作为一个数据块进行发送。</p>
<h2 id="1-3-url-parse"><a href="#1-3-url-parse" class="headerlink" title="1.3 url.parse()"></a>1.3 url.parse()</h2><p>url.parse()的作用是将一个url的字符串解析并返回一个url对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">url.parse(<span class="string">"http://user:pass@host.com:8080/p/a/t/h?query=string#hash"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  protocol: 'http:',</span></span><br><span class="line"><span class="comment">  slashes: true,</span></span><br><span class="line"><span class="comment">  auth: 'user:pass',</span></span><br><span class="line"><span class="comment">  host: 'host.com:8080',</span></span><br><span class="line"><span class="comment">  port: '8080',</span></span><br><span class="line"><span class="comment">  hostname: 'host.com',</span></span><br><span class="line"><span class="comment">  hash: '#hash',</span></span><br><span class="line"><span class="comment">  search: '?query=string',</span></span><br><span class="line"><span class="comment">  query: 'query=string',</span></span><br><span class="line"><span class="comment">  pathname: '/p/a/t/h',</span></span><br><span class="line"><span class="comment">  path: '/p/a/t/h?query=string',</span></span><br><span class="line"><span class="comment">  href: 'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">没有设置第二个参数为true时，query属性为一个字符串类型</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="1-4-fs-readFile-和-substr"><a href="#1-4-fs-readFile-和-substr" class="headerlink" title="1.4 fs.readFile() 和 substr()"></a>1.4 fs.readFile() 和 substr()</h2><ul>
<li><code>fs.readFile(filename, function (error, data) {})</code>：读取本地名为filename的文件，将读取到的结果存储在data中，通过观察得知data的数据类型为Buffer，以数组的形式存储文件中字符串的ASCII码；</li>
<li><code>pathname.substr(1)</code>：pathname的内容是’/index.html’，substr(1)是JavaScript方法，表示从下标为1开始读取字符串，因此pathname.substr(1) == ‘index.html’；</li>
</ul>
<h2 id="1-5-data-toString"><a href="#1-5-data-toString" class="headerlink" title="1.5 data.toString()"></a>1.5 data.toString()</h2><p><code>data.toString()</code> 的目的是将data中的ASCII码转换成字符串的形式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"><span class="comment">// Buffer(184) [60, 33, 68, 79, 67, 84, 89, 80, …]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.toString());</span><br><span class="line"><span class="comment">// &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment">// &lt;html lang="en"&gt;</span></span><br><span class="line"><span class="comment">// &lt;head&gt;</span></span><br><span class="line"><span class="comment">//     &lt;meta charset="UTF-8"&gt;</span></span><br><span class="line"><span class="comment">//     &lt;title&gt;My test page&lt;/title&gt;</span></span><br><span class="line"><span class="comment">// &lt;/head&gt;</span></span><br><span class="line"><span class="comment">// &lt;body&gt;</span></span><br><span class="line"><span class="comment">//     &lt;h1&gt;My Head&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">//     &lt;p&gt;My paragraph&lt;/p&gt;</span></span><br><span class="line"><span class="comment">// &lt;/body&gt;</span></span><br><span class="line"><span class="comment">// &lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="2-使用-http-模块创建客户端"><a href="#2-使用-http-模块创建客户端" class="headerlink" title="2. 使用 http 模块创建客户端"></a>2. 使用 http 模块创建客户端</h1><p> 这个用的比较少，且方法也比较简单，简单介绍一下，根据代码来就行了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 Node 创建 Web 客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于请求的选项</span></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: <span class="string">'3333'</span>,</span><br><span class="line">    path: <span class="string">'/index.html'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理响应的回调函数</span></span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 不断更新数据</span></span><br><span class="line">    <span class="keyword">var</span> body = <span class="string">''</span>;</span><br><span class="line">    response.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        body += data;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    response.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 数据接收完成</span></span><br><span class="line">        <span class="built_in">console</span>.log(body);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向服务端发送请求</span></span><br><span class="line"><span class="keyword">var</span> req = http.request(options, callback);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure>
<h1 id="3-express-核心特性与第一个实例"><a href="#3-express-核心特性与第一个实例" class="headerlink" title="3. express 核心特性与第一个实例"></a>3. express 核心特性与第一个实例</h1><h2 id="3-1-express-的核心特性"><a href="#3-1-express-的核心特性" class="headerlink" title="3.1 express 的核心特性"></a>3.1 express 的核心特性</h2><p>express 是一个简洁而灵活的 node.js Web应用框架，提供了一系列强大的特性帮助我们创建各种 Web 应用，并提供了丰富的 HTTP 工具，使用 express 可以快速地搭建一个功能完整的网站。</p>
<p>express 框架核心特性：</p>
<ul>
<li>可以设置中间件（app.use()）来响应 HTTP 请求；</li>
<li>定义了路由表用于执行不同的 HTTP 请求动作；</li>
<li>可以通过向模板传递参数来动态渲染 HTML 页面。</li>
</ul>
<h2 id="3-2-第一个实例"><a href="#3-2-第一个实例" class="headerlink" title="3.2 第一个实例"></a>3.2 第一个实例</h2><p>在这个实例中，我们首先在index.html文件中创建了一个表单元素，action指向/insert页面，</p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Submit Your Papers<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>INSERT DATA<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:3333/insert"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">        Paper_ID(9-bit): <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">"Paper_ID"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        Paper_Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Paper_Name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        Paper_Type: <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"Paper_Type"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>EI期刊<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>SCI期刊<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>中文核心<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        Author: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Author"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>server.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 依赖项</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;);<span class="comment">// 编码解析（3.2.1）</span></span><br><span class="line">app.use(urlencodedParser);<span class="comment">// 使用中间件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取首页</span></span><br><span class="line">app.get(<span class="string">'/index.htm*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.sendFile(__dirname + <span class="string">'/'</span> + <span class="string">'index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.sendFile(__dirname + <span class="string">'/'</span> + <span class="string">'index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应 INSERT POST</span></span><br><span class="line">app.post(<span class="string">'/insert'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123; <span class="comment">//GET 和 POST的区别和联系（4.2）</span></span><br><span class="line">    res.type(<span class="string">'application/json'</span>); <span class="comment">// （3.2.2）设置Content-Type的MIME类型</span></span><br><span class="line">    res.json(req.body);           <span class="comment">// （3.2.2）传送JSON响应</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">3333</span>,<span class="string">'localhost'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//（3.2.3）</span></span><br><span class="line">    <span class="keyword">var</span> host = server.address().address</span><br><span class="line">    <span class="keyword">var</span> port = server.address().port</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'应用实例，访问地址为 http://%s:%s'</span>, host, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="3-2-1-编码解析-body-parser"><a href="#3-2-1-编码解析-body-parser" class="headerlink" title="3.2.1 编码解析 body-parser"></a>3.2.1 编码解析 body-parser</h3><blockquote>
<p><a href="https://www.npmjs.com/package/body-parser" target="_blank" rel="noopener">npm官网 body-parser 的API文档</a></p>
</blockquote>
<p>通过body-parser创建<a href="https://blog.csdn.net/WHU_Kevin_Lin/article/details/82921664#middleware" target="_blank" rel="noopener">中间件</a>，当接收到客户端请求时，所有的中间件都会给<code>req.body</code>添加属性（即开始解析请求数据），若请求体为空或者<code>Content-Type</code>不匹配，则解析为空<code>{}</code>（或出现某个错误）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 借助body-parser创建中间件并使用</span></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;);<span class="comment">// 编码解析</span></span><br><span class="line">app.use(urlencodedParser);</span><br></pre></td></tr></table></figure>
<p>由于用于试验的表单内容不包括文件等复杂类型，又可能出现中文内容，因此在处理POST请求时用到了 <code>bodyParser.urlencoded()</code> 来解析请求体，对 <strong>默认类型</strong> <code>application/x-www-form-urlencoded</code> 进行解析。</p>
<p><code>body-parser</code> 提供了多种方法（如下，详细解释见上方参考资料的官方文档）用以解析不同类型的请求数据（类型在表单元素<code>form</code>中定义：<code>&lt;form enctype=&quot;value&quot;&gt;</code>，其中，<code>value</code>的可选值有：<code>application/x-www-form-urlencoded</code>【默认】、<code>multipart/form-data</code>、<code>text/plain</code>）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bodyParser.json([options])</span><br><span class="line">bodyParser.raw([options])</span><br><span class="line">bodyParser.text([options])</span><br><span class="line">bodyParser.urlencoded([options])</span><br></pre></td></tr></table></figure>
<p>options是 <code>urlencoded()</code> 方法中的唯一参数，其是一个包含“键-值对”的数据结构，其中最关键的“键”是<code>extended</code>，其决定了允许解析的请求体（<code>req.body</code>）内容。<strong>当extended的值为false时，req.body的内容可以为字符串或者数组</strong>，<strong>当extended的值为true时，req.body的内容可以为任何类型的数据</strong>。options所有键值如下（详细参考<a href="https://www.npmjs.com/package/body-parser" target="_blank" rel="noopener">官方文档</a>）：</p>
<ul>
<li><strong>extended</strong> - 用于规定解析内容的范围，这取决于调用的是<strong>querystring库</strong>（false）还是<strong>qs库</strong>（true）。默认值为true；</li>
<li><strong>inflate</strong> - 当设置为true，压缩的请求体会被解压；当设置为false，将拒绝接收压缩的请求体。默认值为true；</li>
<li><strong>limit</strong> - 规定了请求体的最大尺寸。如果请求体是数字，则该值表示最大字节数；如果请求体是字符串，则先该值传递到字节库（另一个nodejs模块-bytes）再进行解析。默认值为’100kb’；</li>
<li><strong>parameterLimit</strong> - 规定 URL 编码数据中参数的最大数量，如果超过这个值，就会返回413的状态码给客户端。例如在解析表单元素的POST请求时，设置该值为2，然后在表单元素中设置三个input框，提交数据时就会报错：too many parameters。默认值为1000；</li>
<li><strong>type</strong> - 用于确定中间件将解析何种媒体类型。默认值为application/x-www-form-urlencoded；</li>
<li><strong>verify</strong> - 用于核查的键（不知道有什么用）。</li>
</ul>
<h3 id="3-2-2-res-type-和-res-json-的功能"><a href="#3-2-2-res-type-和-res-json-的功能" class="headerlink" title="3.2.2 res.type() 和 res.json()的功能"></a>3.2.2 res.type() 和 res.json()的功能</h3><ul>
<li>res.type() - 设置 Content-Type 的 MIME 类型，类似于http中的writeHead功能；</li>
<li>res.json() - 传送JSON响应。可以将json数据放在里面传送至客户端，经试验发现，也可以传递一个对象，如本例中的req.body，json()方法能进行相应的格式转换；</li>
<li>express 中 res 和 req 对象的其他<strong>属性</strong>及<strong>方法</strong>详见本文：<strong>4.4 express 的请求(request)和响应(response)对象</strong></li>
</ul>
<h3 id="3-2-3-监听时避免address为“-”的方法"><a href="#3-2-3-监听时避免address为“-”的方法" class="headerlink" title="3.2.3 监听时避免address为“::”的方法"></a>3.2.3 监听时避免address为“::”的方法</h3><p>监听函数：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.listen(port, [hostname], [backlog], [callback])</span><br></pre></td></tr></table></figure></p>
<p>监听时需要调用app的listen方法，若直接采用如下方式调用，console.log()输出的结果是：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">应用实例，访问地址为http://:::3333。</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">3333</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> host = server.address().address</span><br><span class="line">    <span class="keyword">var</span> port = server.address().port</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'应用实例，访问地址为 http://%s:%s'</span>, host, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>因此我们需要在函数参数中制指定主机名称（localhost或者127.0.0.1）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">3333</span>,<span class="string">'localhost'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//（3.2.3）</span></span><br><span class="line">    <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">    <span class="keyword">var</span> port = server.address().port;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'应用实例，访问地址为 http://%s:%s'</span>, host, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="4-express-的更多应用"><a href="#4-express-的更多应用" class="headerlink" title="4. express 的更多应用"></a>4. express 的更多应用</h1><h2 id="4-1-什么是-express-中间件"><a href="#4-1-什么是-express-中间件" class="headerlink" title="4.1 什么是 express 中间件"></a>4.1 什么是 express 中间件</h2><p>中间件（MiddleWare）可以理解为一个对用户请求（request）进行过滤和预处理的东西，就像一张滤网，一般不会直接对客户端进行响应，而是将处理之后的结果传递下去。它是一个过滤器，可以拦截任何请求，可以对请求的request和response做相关处理。</p>
<p>引用中间件最简单的方法就是使用app.use()啦，下面是一个最简单的例子。当然了，中间件除了引用已有的，还可以自定义（需要再写一篇笔记来专门讲讲中间件了），引用及自定义的详细使用方法见<a href="http://www.expressjs.com.cn/4x/api.html#app.use" target="_blank" rel="noopener">官方文档</a>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(express.static(<span class="string">'G:/MyWebs'</span>)); <span class="comment">// 设置静态文件</span></span><br></pre></td></tr></table></figure>
<p>express还有哪些中间件？参考：<a href="http://www.expressjs.com.cn/resources/middleware.html" target="_blank" rel="noopener">express 第三方中间件</a></p>
<h2 id="4-2-GET-and-POST"><a href="#4-2-GET-and-POST" class="headerlink" title="4.2 GET and POST"></a>4.2 GET and POST</h2><h3 id="4-2-1-它们分别是什么？有什么区别？各有什么优缺点？"><a href="#4-2-1-它们分别是什么？有什么区别？各有什么优缺点？" class="headerlink" title="4.2.1 它们分别是什么？有什么区别？各有什么优缺点？"></a>4.2.1 它们分别是什么？有什么区别？各有什么优缺点？</h3><blockquote>
<p>参考资料：<a href="https://www.cnblogs.com/logsharing/p/8448446.html" target="_blank" rel="noopener">在途中#的博客：GET和POST两种基本请求方法的区别</a></p>
</blockquote>
<p>GET 和 POST 是 HTTP 请求的两种基本方法，最直观的区别就是 GET 把参数包含在 URL 中，POST 通过 request body （请求体）传递参数，大致的区别和优缺点如下：</p>
<ul>
<li>GET 请求只能进行url编码，而 POST 支持<strong>多种编码方式</strong>；</li>
<li>GET 请求在 URL 中传送的参数是有长度限制的，而 POST 没有；</li>
<li>对于参数的数据类型，GET 只接受 ASCII 字符，而POST没有限制；</li>
<li>GET 比 POST <strong>更不安全</strong>，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息；</li>
<li>GET 参数通过 <strong>URL</strong> 传递，POST 放在 <strong>request body</strong> 中。</li>
</ul>
<blockquote>
<p> 在我大万维网世界中，TCP就像汽车，我们用TCP来运输数据，它很可靠，从来不会发生丢件少件的现象。但是如果路上跑的全是看起来一模一样的汽车，那这个世界看起来是一团混乱，送急件的汽车可能被前面满载货物的汽车拦堵在路上，整个交通系统一定会瘫痪。为了避免这种情况发生，交通规则HTTP诞生了。HTTP给汽车运输设定了好几个服务类别，有GET, POST, PUT, DELETE等等，HTTP规定，当执行GET请求的时候，要给汽车贴上GET的标签（设置method为GET），而且要求把传送的数据放在车顶上（url中）以方便记录。如果是POST请求，就要在车上贴上POST的标签，并把货物放在车厢里。当然，你也可以在GET的时候往车厢内偷偷藏点货物，但是这是很不光彩；也可以在POST的时候在车顶上也放一些数据，让人觉得傻乎乎的。HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。</p>
<p>在我大万维网世界中，还有另一个重要的角色：<strong>运输公司</strong>。不同的浏览器（发起http请求）和服务器（接受http请求）就是不同的运输公司。 虽然理论上，你可以在车顶上无限的堆货物（url中无限加参数）。但是运输公司可不傻，装货和卸货也是有很大成本的，他们会<strong>限制单次运输量来控制风险</strong>，数据量太大对浏览器和服务器都是很大负担。业界不成文的规定是，（大多数）浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url。超过的部分，恕不处理。如果你用GET服务，在request body偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然GET可以带request body，也不能保证一定能被接收到哦。</p>
<p>好了，现在你知道，GET和POST本质上就是TCP链接，<strong>并无差别</strong>。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。</p>
</blockquote>
<p>总结来说，HTTP 对 GET 和 POST 参数的传送渠道（url还是request body）提出了要求。这是一个关于<strong>安全or性能</strong>的问题，想要安全性和更大的数据量，那么请使用 POST（例如我们经常用到的<strong>HTML表单</strong>，多数情况下使用POST传输），若想要快速且直观地传输数据，那么请使用 GET（例如大多数搜索引擎对于<strong>关键字的传递</strong>，用的就是GET）。</p>
<h3 id="4-2-2-获取-app-get-和-app-post-中表单字段的方法"><a href="#4-2-2-获取-app-get-和-app-post-中表单字段的方法" class="headerlink" title="4.2.2 获取 app.get 和 app.post 中表单字段的方法"></a>4.2.2 获取 app.get 和 app.post 中表单字段的方法</h3><p>鉴于 GET 和 POST 传递参数时参数位置的不同（url 中还是 request body 中），因此在获取表单元素的字段时，采用不同的方法。</p>
<p>仅针对表单元素的请求req。以一个简单的表单为例（如下）。当method为GET时，使用app.get()+req.query来获取字段的值；当method为POST时，使用app.post()+req.body来获取字段的值。</p>
<p>四个地方需要注意：</p>
<ol>
<li>html中form的method属性(GET or POST)；</li>
<li>js中app.get和app.post使用；</li>
<li>js中req.query和req.body使用；</li>
<li>在使用app.post()前，应使用body-parser中间件（<strong>3.2.1 编码解析 body-parser</strong>）</li>
</ol>
<p><strong>使用GET方法</strong></p>
<p>.html（GET）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:3333/insert_get"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">    INPUT: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"input_text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>.js（响应insert_get，使用<code>req.query</code>访问字段）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/insert_get'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(req.query.input_text); <span class="comment">// 发送数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用POST方法</strong></p>
<p>.html（POST）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:3333/insert_post"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">    INPUT: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"input_text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>.js（响应insert_post，使用<code>req.body</code>访问字段）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">'/insert_post'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(req.body.input_text); <span class="comment">// 发送数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-3-静态文件-express-static"><a href="#4-3-静态文件-express-static" class="headerlink" title="4.3 静态文件(express.static)"></a>4.3 静态文件(express.static)</h2><p>express 提供了内置的中间件<code>express.static</code>来设置静态文件如：图片， CSS，JavaScript 等。</p>
<p>可以使用express.static中间件来设置静态文件路径。例如，想将写好的静态网页、CSS文件、js文件、图片、文档（放在G:/MyWebs/中）提供给大家访问，那么可以这么写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br></pre></td></tr></table></figure>
<p>若要将脚本文件所在的文件夹（当前目录）作为静态文件，可以这么写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(express.static(<span class="string">'./'</span>));</span><br></pre></td></tr></table></figure>
<h2 id="4-4-express-的请求-request-和响应-response-对象"><a href="#4-4-express-的请求-request-和响应-response-对象" class="headerlink" title="4.4 express 的请求(request)和响应(response)对象"></a>4.4 express 的请求(request)和响应(response)对象</h2><p><strong>request</strong> 和 <strong>response</strong> 对象的具体介绍：</p>
<p><strong>Request 对象</strong> - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p>
<ul>
<li><code>req.app</code>：当callback为外部文件时，用req.app访问express的实例</li>
<li><code>req.baseUrl</code>：获取路由当前安装的URL路径</li>
<li><code>req.body / req.cookies</code>：获得「请求主体」/ Cookies</li>
<li><code>req.fresh / req.stale</code>：判断请求是否还「新鲜」</li>
<li><code>req.hostname / req.ip</code>：获取主机名和IP地址</li>
<li><code>req.originalUrl</code>：获取原始请求URL</li>
<li><code>req.params</code>：获取路由的parameters</li>
<li><code>req.path</code>：获取请求路径</li>
<li><code>req.protocol</code>：获取协议类型</li>
<li><code>req.query</code>：获取URL的查询参数串</li>
<li><code>req.route</code>：获取当前匹配的路由</li>
<li><code>req.subdomains</code>：获取子域名</li>
<li><code>req.accepts()</code>：检查可接受的请求的文档类型</li>
<li><code>req.acceptsCharsets / req.acceptsEncodings /req.acceptsLanguages</code>：返回指定字符集的第一个可接受字符编码</li>
<li><code>req.get()</code>：获取指定的HTTP请求头</li>
<li><code>req.is()</code>：判断请求头Content-Type的MIME类型</li>
</ul>
<p><strong>Response 对象</strong> - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p>
<ul>
<li><code>res.app：</code>同req.app一样</li>
<li><code>res.append()</code>：追加指定HTTP头</li>
<li><code>res.set()</code>在res.append()后将重置之前设置的头</li>
<li><code>res.cookie(name，value [，option])</code>：设置Cookie<ul>
<li><code>opition: domain / expires / httpOnly / maxAge / path / secure / signed</code></li>
</ul>
</li>
<li><code>res.clearCookie()</code>：清除Cookie</li>
<li><code>res.download()</code>：传送指定路径的文件</li>
<li><code>res.get()</code>：返回指定的HTTP头</li>
<li><code>res.json()</code>：<strong>传送JSON响应</strong></li>
<li><code>res.jsonp()</code>：传送JSONP响应</li>
<li><code>res.location()</code>：只设置响应的Location HTTP头，不设置状态码或者close response</li>
<li><code>res.redirect()</code>：<strong>设置响应的Location HTTP头，并且设置状态码302</strong></li>
<li><code>res.render(view,[locals],callback)</code>：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</li>
<li><code>res.send()</code>：<strong>传送HTTP响应</strong></li>
<li><code>res.sendFile(path [，options] [，fn])</code>：<strong>传送指定路径的文件 - 会自动根据文件extension设定Content-Type</strong></li>
<li><code>res.set()</code>：设置HTTP头，传入object可以一次设置多个头</li>
<li><code>res.status()</code>：设置HTTP状态码</li>
<li><code>res.type()</code>：设置Content-Type的MIME类型</li>
</ul>
<p>除了所列的这些 response 方法，express 还<strong>继承</strong>了 http response 中常用的<code>writeHead()</code>、<code>write()</code>、<code>end()</code>方法，其中，writeHead已经进化为<code>res.type()</code>，end方法也不再是每次response出现时都必须调用，但当我们想要<strong>按顺序发送响应数据</strong>时，依旧可以使用write()方法实现分块编码。</p>
<h3 id="res-send-方法和response-write-方法的比较"><a href="#res-send-方法和response-write-方法的比较" class="headerlink" title="res.send()方法和response.write()方法的比较"></a>res.send()方法和response.write()方法的比较</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.type(<span class="string">'html'</span>); <span class="comment">// 直接使用write时，仍需要指定类型，不然会是乱码</span></span><br><span class="line">res.write(<span class="string">'&lt;h1&gt;啊哈！&lt;/h1&gt;'</span>); <span class="comment">// 允许书写多个write</span></span><br><span class="line">res.write(<span class="string">'&lt;h2&gt;哈你大爷呢！&lt;/h2&gt;'</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.send(<span class="string">'&lt;h1&gt;啊哈！&lt;/h1&gt;'</span>); <span class="comment">// send()方法会自动解析数据类型并予以发送</span></span><br><span class="line">res.write(<span class="string">'&lt;h2&gt;哈你大爷呢！&lt;/h2&gt;'</span>); <span class="comment">// 在send() 之后的write()或send()将不起作用</span></span><br><span class="line">res.send(<span class="string">'&lt;h3&gt;哈你二爷呢！&lt;/h3&gt;'</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
        <tag>Express.js</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 学习笔记（1）管理一台电脑上的多个公钥</title>
    <url>/2018/10/19/Git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%E7%AE%A1%E7%90%86%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E4%B8%8A%E7%9A%84%E5%A4%9A%E4%B8%AA%E5%85%AC%E9%92%A5/</url>
    <content><![CDATA[<h1 id="1-前提条件"><a href="#1-前提条件" class="headerlink" title="1. 前提条件"></a>1. 前提条件</h1><p>安装 Git，参考：</p>
<blockquote>
<p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰老师的 Git 教程</a><br><a href="https://git-scm.com/" target="_blank" rel="noopener">Git 官网</a></p>
</blockquote>
<h1 id="2-创建公钥"><a href="#2-创建公钥" class="headerlink" title="2. 创建公钥"></a>2. 创建公钥</h1><p>打开<code>.ssh</code>文件夹（位于：<strong>C:\Users\Administrator\.ssh</strong>），右键文件夹空白处，打开 <code>Git Bash</code>（<strong>Git Bash here</strong>）</p>
<p>创建命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">ssh-keygen -t rsa -C <span class="string">"emailname@example.com"</span> <span class="comment"># 邮箱名自定</span></span></span><br></pre></td></tr></table></figure>
<p>设置存储公钥的文件名：（可以直接回车跳过，<strong>默认文件名为id_rsa</strong>）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/325-43/.ssh/id_rsa): id_rsa_rswork</span><br></pre></td></tr></table></figure>
<p>之后设置密码啥的直接跳过就可以了（如果不是特别必要的话）。</p>
<h1 id="3-添加公钥到远程仓库"><a href="#3-添加公钥到远程仓库" class="headerlink" title="3. 添加公钥到远程仓库"></a>3. 添加公钥到远程仓库</h1><p>公钥的所有内容（一大串以我们设置的邮箱结尾的字符串）都存放在<code>.pub</code>文件中，添加到对应的<strong>远程仓库</strong>就可以啦。</p>
<h1 id="4-管理多个公钥"><a href="#4-管理多个公钥" class="headerlink" title="4. 管理多个公钥"></a>4. 管理多个公钥</h1><p>此时有两个公钥：</p>
<p><img src="/images/20181019120835741.png" alt="在这里插入图片描述"></p>
<p>在同一个平台（GitHub，GitLab，码云……）下，一个<strong>本地公钥只能给一个账户使用</strong>，但是<strong>多个平台的账户可以共用一个本地公钥</strong>。因此，当需要使用一个平台下的多个账号时（例如一个人使用多个账号参与多个项目），如果直接进行<code>clone</code>或<code>push</code>操作时，会提示：<code>Access Denied</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> git@gitee.com:XXX/xxx.git</span></span><br><span class="line">Cloning into 'xxx'...</span><br><span class="line">Access denied: Access Denied</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure>
<p>在默认情况下，Git 会检验.ssh文件中 <code>id_rsa.pub</code> 的公钥对于 <code>clone</code> 或 <code>push</code> 的仓库的可访问性，当出现多个公钥时，我们就需要告诉 Git 如何使用<strong>正确的公钥</strong>来访问项目。</p>
<p>比如现在，我所访问的这个项目是一个<strong>私有项目</strong>，而我已经将 <code>id_rsa_rswork.pub</code> 中的公钥添加到了该账号下的ssh中了，然而直接clone依旧提示<code>Access Denied</code>，说明 Git 并没有正确使用公钥，我们打开<code>.ssh</code>文件夹，在文件夹下创建文件 <strong>config</strong>，在里面写入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">HOST pubKey1</span><br><span class="line">HostName gitee.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_rswork</span><br></pre></td></tr></table></figure>
<p>保存，退出。其中，<strong>pubKey1</strong>是自定义的变量名，用于告诉 Git <strong>应该使用哪个公钥</strong>。</p>
<p>此时我们使用如下命令来克隆仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> pubKey1:XXX/xxx.git</span></span><br></pre></td></tr></table></figure>
<p>成功。</p>
<h2 id="简要原理"><a href="#简要原理" class="headerlink" title="简要原理"></a>简要原理</h2><p>当我们 <code>clone</code>、<code>push</code> 不同账户或不同平台仓库时，我们希望能控制<strong>在不同的地方使用不同的公钥</strong>。</p>
<p>注意到仓库提供的克隆 ssh 为：（XXX是账户名，xxx是仓库名，<code>git@gitee.com</code> 指定了远程仓库的地址，config文件中的User和HostName分别对应这里的<code>git</code>和<code>gitee.com</code>）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git@gitee.com:XXX/xxx.git  # 码云</span><br><span class="line">git@github.com:XXX/xxx.git # github</span><br></pre></td></tr></table></figure>
<p>当我们使用官方提供的标识信息时，默认只读取 <code>.ssh</code> 文件夹下 <code>id_rsa.pub</code> 中的公钥。</p>
<p>config<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">HOST pubKey1</span><br><span class="line">HostName gitee.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_rswork</span><br></pre></td></tr></table></figure></p>
<p>配置文件 <code>config</code> 的内容大致呈 <code>1 + 3</code>的结构， <code>HOST</code> 类似于变量名，该变量下由<code>HostName</code>和<code>User</code>来定义标识信息，<code>IdentityFile</code> 则声明了公钥的位置，因此我们可以使用如下命令来克隆仓库：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> pubKey1:XXX/xxx.git</span></span><br></pre></td></tr></table></figure></p>
<h2 id="归纳：push和clone"><a href="#归纳：push和clone" class="headerlink" title="归纳：push和clone"></a>归纳：push和clone</h2><p>指定公钥后，相应的<code>push</code>和<code>clone</code>操作如下：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> pubKey1:XXX/xxx.git <span class="comment"># clone</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加并查看远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git remote add gitee pubKey1:XXX/xxx.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git remote -v</span></span><br><span class="line">gitee   pubKey1:XXX/xxx.git (fetch)</span><br><span class="line">gitee   pubKey1:XXX/xxx.git (push)</span><br><span class="line"><span class="meta">#</span><span class="bash"> push</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git push gitee master</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>cesium 学习笔记（1）安装及环境配置</title>
    <url>/2018/10/06/cesium-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h1><p>貌似用国内的网络访问这些资源速度有点不尽人意，有条件的同学可以科学访问，或者慢慢等也是可以哒。</p>
<blockquote>
<ul>
<li>官网 - <a href="https://cesiumjs.org/" target="_blank" rel="noopener">https://cesiumjs.org/</a></li>
<li>安装包(官网 - <a href="https://cesiumjs.org/downloads/" target="_blank" rel="noopener">https://cesiumjs.org/downloads/</a><ul>
<li>1.5.0 - <a href="https://github.com/AnalyticalGraphicsInc/cesium/releases/download/1.50/Cesium-1.50.zip" target="_blank" rel="noopener">https://github.com/AnalyticalGraphicsInc/cesium/releases/download/1.50/Cesium-1.50.zip</a></li>
<li>1.4.9 - <a href="https://github.com/AnalyticalGraphicsInc/cesium/releases/download/1.49/Cesium-1.49.zip" target="_blank" rel="noopener">https://github.com/AnalyticalGraphicsInc/cesium/releases/download/1.49/Cesium-1.49.zip</a></li>
</ul>
</li>
<li>官方教程 - <a href="https://cesiumjs.org/tutorials/" target="_blank" rel="noopener">https://cesiumjs.org/tutorials/</a></li>
<li>官方教程(Getting Started) - <a href="https://cesiumjs.org/tutorials/cesium-up-and-running/#making-sure-that-your-browser-is-cesium-ready" target="_blank" rel="noopener">https://cesiumjs.org/tutorials/cesium-up-and-running/#making-sure-that-your-browser-is-cesium-ready</a></li>
<li>github - <a href="https://github.com/AnalyticalGraphicsInc/cesium" target="_blank" rel="noopener">https://github.com/AnalyticalGraphicsInc/cesium</a></li>
<li>API - <a href="https://cesiumjs.org/refdoc/" target="_blank" rel="noopener">https://cesiumjs.org/refdoc/</a></li>
<li>官方博客 - <a href="https://cesium.com/blog/" target="_blank" rel="noopener">https://cesium.com/blog/</a></li>
<li>cesium-workshop(github) - <a href="https://github.com/AnalyticalGraphicsInc/cesium-workshop" target="_blank" rel="noopener">https://github.com/AnalyticalGraphicsInc/cesium-workshop</a></li>
<li>在线Demo(用于测试浏览器支持 - <a href="https://cesiumjs.org/Cesium/Build/Apps/CesiumViewer/" target="_blank" rel="noopener">https://cesiumjs.org/Cesium/Build/Apps/CesiumViewer/</a></li>
<li>在线运行环境 - <a href="https://cesiumjs.org/Cesium/Build/Apps/Sandcastle/" target="_blank" rel="noopener">https://cesiumjs.org/Cesium/Build/Apps/Sandcastle/</a></li>
</ul>
</blockquote>
<h1 id="安装包结构"><a href="#安装包结构" class="headerlink" title="安装包结构"></a>安装包结构</h1><p><img src="/images/20181006120957602.png" alt="在这里插入图片描述"></p>
<p>在此主要关注三个地方（我们下面都会用到的）：</p>
<ol>
<li><strong>Build</strong> - <code>Cesium.js</code> 资源包及其相关依赖的集合；</li>
<li><strong>server.js</strong> - 官方提供的基于 <code>Node.js</code> 的运行环境搭建的脚本文件；</li>
<li><strong>Apps</strong> - 一个最简单的官方实例，包含了一些样本数据和程序框架，我们可以借鉴其中的内容。</li>
</ol>
<p>引用官网下载页面的文件结构描述：</p>
<p><img src="/images/20181006122309447.png" alt="在这里插入图片描述"></p>
<h1 id="运行实例与环境搭建"><a href="#运行实例与环境搭建" class="headerlink" title="运行实例与环境搭建"></a>运行实例与环境搭建</h1><p>由于<code>cesium</code>的特性（具体是啥我不太清楚），其调试和运行必须在<strong>网络环境</strong>下进行，因此自行搭建服务器就成了必不可少的一个步骤。当前很多IDE（集成开发环境）如<strong>Visual Studio</strong>、<strong>WebStorm</strong>等都提供了本地服务器的功能，供我们调试本地项目，除此之外，我们还可以利用 <code>Node.js</code> 自行搭建服务器。<br>下面分别介绍 <strong>借助IDE搭建</strong> 和 <strong>利用<code>Node.js</code>搭建</strong> 两种方法。</p>
<h2 id="最简单-借助VS（IDE）"><a href="#最简单-借助VS（IDE）" class="headerlink" title="最简单-借助VS（IDE）"></a>最简单-借助VS（IDE）</h2><p>创建一个新的文件夹，就叫做<code>1.50-test</code>吧，在里面新建一个文件夹<code>static</code> 和一个html文件<code>index.html</code>。</p>
<p><img src="/images/20181006122703269.png" alt="在这里插入图片描述"></p>
<p>将 <strong>Build\CesiumUnminified</strong> 文件夹下的所有东西拷贝到<code>static</code>中，然后将<strong>Apps/HelloWorld.html</strong>的内容拷贝到<code>index.html</code>中，注意<strong>修改html文件中对于js文件和css文件的引用相对路径</strong>。</p>
<p><img src="/images/20181006123054578.png" alt="在这里插入图片描述"></p>
<p><img src="/images/20181006123511613.png" alt="在这里插入图片描述"></p>
<p>打开<strong>VS2013</strong>（2010/2015/2017都行），将包含<code>static</code>和<code>index.html</code>的文件夹作为网站打开</p>
<p><img src="/images/20181006123821167.png" alt="在这里插入图片描述"></p>
<p>然后点击<strong>在浏览器中查看</strong></p>
<p><img src="/images/20181006123952619.png" alt="在这里插入图片描述"></p>
<p>就可以看到我们的 Cesium 实例被成功部署到了 4186 端口上（这个端口号是随机生成的，从空闲的端口号中随意选一个这样）。<br>然而下面这张图貌似有点问题（地球呢？？？），不知什么原因，使用1.5.0（2018年10月1日发布）版本通过VS方法搭建运行环境时，<strong>地球体无法加载</strong>，如果使用1.4.9版本（更早的没试过）就不会出现这个问题（过程完全一致，1.4.9的下载包结构和1.5.0基本一毛一样）。</p>
<p><img src="/images/20181006124741544.png" alt="在这里插入图片描述"></p>
<h2 id="使用Node-js"><a href="#使用Node-js" class="headerlink" title="使用Node.js"></a>使用Node.js</h2><p>Node.js是一个基于 chrome V8 引擎的 JavaScript 运行环境，普遍用于搭建服务器和前端项目模块化开发，是前端开发中重要的一部分。其使用和操作可以参照这篇博文：</p>
<blockquote>
<p><a href="/2018/07/14/Nodejs学习笔记（1）-Nodejs安装-借助express模块简单部署服务器">Nodejs学习笔记（1） Nodejs安装+借助express模块简单部署服务器</a></p>
</blockquote>
<h3 id="自行搭建（超简单）"><a href="#自行搭建（超简单）" class="headerlink" title="自行搭建（超简单）"></a>自行搭建（超简单）</h3><p>在 Node.js 搭建服务器的过程中，我们一般使用 <code>express</code> 来创建服务并监听，我们可以通过下面这段脚本将我们的 Cesium 实例部署为一个网络服务（<strong>需要安装 <code>express</code> 模块</strong>）</p>
<p>server.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">3333</span>, <span class="string">'0.0.0.0'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'实例访问地址: %s:%d'</span>,</span><br><span class="line">    server.address().address,</span><br><span class="line">    server.address().port);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>使用node server命令执行（<code>0.0.0.0</code>的意思是允许使用127.0.0.1、localhost、IPv4等访问，只要对方能ping得通服务器，就可以用这种方法访问）</p>
<p><img src="/images/20181006151354128.png" alt="在这里插入图片描述"></p>
<p>文件夹结构</p>
<p><img src="/images/20181006151752332.png" alt="在这里插入图片描述"></p>
<p>package.json 文件内容（该文件可以通过在文件夹下执行命令<code>npm init -y</code>生成）；安装 express 时附加参数 save，即可保存在 package.json 中的 <code>dependencies</code> 字段中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">npm i express --save</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/2018100615192185.png" alt="在这里插入图片描述"></p>
<h3 id="官方脚本搭建（也不会太复杂）"><a href="#官方脚本搭建（也不会太复杂）" class="headerlink" title="官方脚本搭建（也不会太复杂）"></a>官方脚本搭建（也不会太复杂）</h3><p>官方教程中，推荐我们直接在安装目录下使用两条命令来设置和创建一个可以让 Cesium 应用运行的 Web 服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">npm install</span></span><br><span class="line"><span class="meta">$</span><span class="bash">node server.js</span></span><br></pre></td></tr></table></figure>
<p>显然，<code>server.js</code> 文件是创建服务的脚本文件。</p>
<p>我们新建一个文件夹（命名 <code>1.50-test1</code> 吧）。在里面新建一个文件夹<code>static</code> 和一个html文件<code>index.html</code>。</p>
<p><img src="/images/20181006122703269-1590135103476.png" alt="在这里插入图片描述"></p>
<p>将 <strong>Build\CesiumUnminified</strong> 文件夹下的所有东西拷贝到<code>static</code>中，然后将<strong>Apps/HelloWorld.html</strong>的内容拷贝到<code>index.html</code>中，注意<strong>修改html文件中对于js文件和css文件的引用相对路径</strong>。</p>
<p><img src="/images/20181006123054578-1590135105953.png" alt="在这里插入图片描述"></p>
<p><img src="/images/20181006123511613-1590135108032.png" alt="在这里插入图片描述"></p>
<p>（好吧就是模仿一下使用 IDE 部署服务的那些个操作，最终得到<strong>static</strong>和<strong>index.html</strong>）</p>
<p>接着把下载的包里面的 server.js 文件也拷贝到这个文件夹中</p>
<p><img src="/images/2018100615292260.png" alt="在这里插入图片描述"></p>
<p>接着我们研究一下这个 <code>server.js</code> 要运行究竟需要什么东西：</p>
<p><img src="/images/20181006153101776.png" alt="在这里插入图片描述"></p>
<p>它需要就安装咯（不清楚那个 <code>compression</code> 和<code>request</code>具体有什么用，字面意思理解，就先放着吧，以后用到了再说）。当前文件夹下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">npm init -y</span></span><br><span class="line"><span class="meta">$</span><span class="bash">npm i express compression fs url request yargs --save</span></span><br></pre></td></tr></table></figure>
<p>进入package.json，看到 <code>dependencies</code> 字段已经添加：</p>
<p><img src="/images/20181006153807724.png" alt="在这里插入图片描述"></p>
<p>运行脚本文件 <code>server.js</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">node server.js</span></span><br><span class="line">Cesium development server running locally.  Connect to http://localhost:8080/</span><br></pre></td></tr></table></figure>
<p>默认情况下服务部署在了本地，端口号为8080，<strong>如何改变端口号以及如何部署到公网或局域网中呢？</strong></p>
<p>我们可以借助 <code>yargs</code> 模块来控制命令行参数，进而控制端口号和部署范围。</p>
<p>注意到 <code>server.js</code> 文件中有这么一段：</p>
<p><img src="/images/20181006154425521.png" alt="在这里插入图片描述"></p>
<p><code>yargs</code>为我们提供了port和public等一系列参数让我们控制命令行窗口，因此我们可以使用如下命令来设置<strong>端口号</strong>和<strong>部署位置</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">node server --public <span class="literal">true</span> <span class="comment"># 公网</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">node server --public <span class="comment"># 公网</span></span></span><br><span class="line">Cesium development server running publicly.  Connect to http://localhost:8080/</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">node server --public <span class="literal">false</span> <span class="comment"># 本机</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">node server <span class="comment"># 本机</span></span></span><br><span class="line">Cesium development server running locally.  Connect to http://localhost:8080/</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">node server --public --port 3303 <span class="comment"># 设置端口号</span></span></span><br><span class="line">Cesium development server running publicly.  Connect to http://localhost:3303/</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>就用上面那最后一条命令来搭建服务器吧：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">node server --public --port 3303</span></span><br><span class="line">Cesium development server running publicly.  Connect to http://localhost:3303/</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="/images/20181006155546990.png" alt="在这里插入图片描述"></p>
<p><img src="/images/20181006155615222.png" alt="在这里插入图片描述"></p>
<p>使用 <code>Node.js</code> 搭建服务器虽然麻烦了那么一丢丢，但相对于笨重的 IDE，其轻便型可想而知，而且它的可靠性和可操作性较好（IDE没办法加载出1.5.0的地球模型的问题在 <code>Node.js</code> 的搭建过程中并没有出现），推荐对前端感兴趣、愿意进一步学习的小伙伴们使用 <code>Node.js</code> 搭建啦~</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>HTML</tag>
        <tag>Cesium.js</tag>
      </tags>
  </entry>
  <entry>
    <title>【VS Code模板（snippet）】Vue CLI 开发模式 通用模板</title>
    <url>/2018/10/26/%E3%80%90VS-Code%E6%A8%A1%E6%9D%BF%EF%BC%88snippet%EF%BC%89%E3%80%91Vue-CLI-%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F-%E9%80%9A%E7%94%A8%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>仅作为一个记录，这是如何设置代码片段的博文：<a href="/2018/07/19/VS-code自定义用户代码片段snippet">VS code自定义用户代码片段snippet</a></p>
<ol>
<li>包括模块声明</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"Vue CDN Test Template": &#123;</span><br><span class="line">    "prefix": "Vue Test",</span><br><span class="line">    "body": [</span><br><span class="line">        "&lt;!DOCTYPE html&gt;",</span><br><span class="line">        "&lt;html lang=\"en\"&gt;",</span><br><span class="line">        "&lt;head&gt;",</span><br><span class="line">        "    &lt;meta charset=\"UTF-8\"&gt;",</span><br><span class="line">        "    &lt;title&gt;$&#123;0: Test Name&#125; | Vue CDN Test&lt;/title&gt;",</span><br><span class="line">        "    &lt;script src=\"./Vue.js/2.5.17/vue.js\"&gt;&lt;/script&gt;",</span><br><span class="line">        "    ",</span><br><span class="line">        "    &lt;script&gt;",</span><br><span class="line">        "            // 注册组件的script放在头文件中预渲染",</span><br><span class="line">        "        Vue.component('', &#123;",</span><br><span class="line">        "            props: [],",</span><br><span class="line">        "            template: ''",</span><br><span class="line">        "        &#125;)",</span><br><span class="line">        "    &lt;/script&gt;",</span><br><span class="line">        "    ",</span><br><span class="line">        "&lt;/head&gt;",</span><br><span class="line">        "&lt;body&gt;",</span><br><span class="line">        "    ",</span><br><span class="line">        "    &lt;div id=\"app\"&gt;",</span><br><span class="line">        "    ",</span><br><span class="line">        "    &lt;/div&gt;",</span><br><span class="line">        "    ",</span><br><span class="line">        "    &lt;script&gt;",</span><br><span class="line">        "        var vm = new Vue(&#123;",</span><br><span class="line">        "            el: '#app',",</span><br><span class="line">        "            data() &#123;",</span><br><span class="line">        "                return &#123;",</span><br><span class="line">        "                    ",</span><br><span class="line">        "                &#125;",</span><br><span class="line">        "            &#125;,",</span><br><span class="line">        "            methods: &#123;",</span><br><span class="line">        "                ",</span><br><span class="line">        "            &#125;",</span><br><span class="line">        "        &#125;)",</span><br><span class="line">        "    &lt;/script&gt;",</span><br><span class="line">        "    ",</span><br><span class="line">        "&lt;/body&gt;",</span><br><span class="line">        "&lt;/html&gt;",</span><br><span class="line">    ],</span><br><span class="line">    "description": "Vue CDN Test html template"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>不包括模块声明</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"Vue CDN Test Template No Component": &#123;</span><br><span class="line">    "prefix": "Vue Test No Component",</span><br><span class="line">    "body": [</span><br><span class="line">        "&lt;!DOCTYPE html&gt;",</span><br><span class="line">        "&lt;html lang=\"en\"&gt;",</span><br><span class="line">        "&lt;head&gt;",</span><br><span class="line">        "    &lt;meta charset=\"UTF-8\"&gt;",</span><br><span class="line">        "    &lt;title&gt;$&#123;0: Test Name&#125; | Vue CDN Test&lt;/title&gt;",</span><br><span class="line">        "    &lt;script src=\"./Vue.js/2.5.17/vue.js\"&gt;&lt;/script&gt;",</span><br><span class="line">        "&lt;/head&gt;",</span><br><span class="line">        "&lt;body&gt;",</span><br><span class="line">        "    ",</span><br><span class="line">        "    &lt;div id=\"app\"&gt;",</span><br><span class="line">        "    ",</span><br><span class="line">        "    &lt;/div&gt;",</span><br><span class="line">        "    ",</span><br><span class="line">        "    &lt;script&gt;",</span><br><span class="line">        "        var vm = new Vue(&#123;",</span><br><span class="line">        "            el: '#app',",</span><br><span class="line">        "            data() &#123;",</span><br><span class="line">        "                return &#123;",</span><br><span class="line">        "                    ",</span><br><span class="line">        "                &#125;",</span><br><span class="line">        "            &#125;,",</span><br><span class="line">        "            methods: &#123;",</span><br><span class="line">        "                ",</span><br><span class="line">        "            &#125;",</span><br><span class="line">        "        &#125;)",</span><br><span class="line">        "    &lt;/script&gt;",</span><br><span class="line">        "    ",</span><br><span class="line">        "&lt;/body&gt;",</span><br><span class="line">        "&lt;/html&gt;",</span><br><span class="line">    ],</span><br><span class="line">    "description": "Vue CDN Test html template"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>VS Code</category>
      </categories>
      <tags>
        <tag>Snippet</tag>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title>ER_NOT_SUPPORTED_AUTH_MODE - mysqljs 运行时错误</title>
    <url>/2018/10/30/ER-NOT-SUPPORTED-AUTH-MODE-mysqljs-%E8%BF%90%E8%A1%8C%E6%97%B6%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>在安装了最新下载的 <code>MySQL 8.x</code> 之后，用 nodejs 测试时发现了错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ER_NOT_SUPPORTED_AUTH_MODE</span><br></pre></td></tr></table></figure>
<p>意思是不支持的验证模式（用户登录时），在<strong>Stack Overflow</strong>上看到大神回答，在此做个记录。</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/44946270/er-not-supported-auth-mode-mysql-server" target="_blank" rel="noopener">https://stackoverflow.com/questions/44946270/er-not-supported-auth-mode-mysql-server</a></p>
</blockquote>
<p>在 8.0 之后的版本，通过以下命令来<strong>修改插件</strong>。直接当成 sql 语句执行就可以了，注意<code>root</code>/<code>localhost</code>/<code>password</code>可以根据需要修改。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">'password'</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>MySQL.js</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Office PPT 放映后鼠标卡死的办法</title>
    <url>/2018/11/06/%E8%A7%A3%E5%86%B3-Office-PPT-%E6%94%BE%E6%98%A0%E5%90%8E%E9%BC%A0%E6%A0%87%E5%8D%A1%E6%AD%BB%E7%9A%84%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>遇到了个问题，在使用 office ppt 放映 PPT 之后，鼠标就卡死了，只好重启或者注销才能解决。</p>
<p><img src="/images/20181106104549518.jpg" alt="在这里插入图片描述"></p>
<p>后来下载了个 WPS 勉强解决问题。</p>
<p>但是用过 WPS 的人大致都知道（我也是用了才知道QAQ[心痛]），这玩意儿特别喜欢侵入用户空间，开会员呀，弹广告呀，<strong>更新一次就又把所有办公软件的默认打开方式变成它自己了</strong>……</p>
<p><img src="/images/20181106104627625.jpg" alt="在这里插入图片描述"></p>
<p>还默认云备份本地文件（<strong>那些我根本不想上网也不能上网的好吗！这样是违法的好不好！</strong>），算了算了，算我倒霉，可是你自己上传就算了，自己把空间塞满了还老提醒我开会员是怎么回事！！！！！</p>
<p><img src="/images/20181106104706709.jpg" alt="在这里插入图片描述"></p>
<p>最可恶的是一不小心就被安装了一个全家桶！！！我不要什么浏览器啊！！！我不要音乐播放器啊！！！我不要看图软件压缩软件杀毒软件啊啊啊！！！</p>
<p>你这样子谁还敢下载更新啊，这些我都有了啊，还让我装你这是嫌我空间太多了要<strong>为民除害</strong>吗！</p>
<p><img src="/images/20181106105027273.jpg" alt="在这里插入图片描述"></p>
<hr>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><blockquote>
<p>抱歉最近心情不好话有点多，吐槽一下痛快一点</p>
</blockquote>
<p>算了吐槽完了，接下来介绍办法，反正 WPS 是卸了，然后用回了 office（我的是2016），参考下面这个帖子，解决了 office PPT 放映后鼠标卡死的问题。</p>
<blockquote>
<p><a href="https://tieba.baidu.com/p/5121774788?pn=0&amp;" target="_blank" rel="noopener">https://tieba.baidu.com/p/5121774788?pn=0&amp;</a></p>
</blockquote>
<p>归纳一下：</p>
<h2 id="1-如果已经失灵了"><a href="#1-如果已经失灵了" class="headerlink" title="1. 如果已经失灵了"></a>1. 如果已经失灵了</h2><ul>
<li>按下 <code>Ctrl + Alt + Delete</code> 打开资源管理器</li>
<li>关闭一个名为 <code>WISPTIS.EXE</code> 的进程，然后</li>
<li>将 <code>C:\Windows\SysWOW64\</code> 下的 <code>WISPTIS.EXE</code> 重命名为 <code>WISPTIS.EXE.bak</code></li>
</ul>
<h2 id="2-还未失灵但问题仍然存在（比如失灵重启后）"><a href="#2-还未失灵但问题仍然存在（比如失灵重启后）" class="headerlink" title="2. 还未失灵但问题仍然存在（比如失灵重启后）"></a>2. 还未失灵但问题仍然存在（比如失灵重启后）</h2><p>将 <code>C:\Windows\SysWOW64\</code> 下的 <code>WISPTIS.EXE</code> 重命名为 <code>WISPTIS.EXE.bak</code></p>
]]></content>
      <categories>
        <category>System</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>疑难杂症</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用操作</title>
    <url>/2019/03/01/Git-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="1-远程仓库操作"><a href="#1-远程仓库操作" class="headerlink" title="1. 远程仓库操作"></a>1. 远程仓库操作</h1><h2 id="检查保存的远程仓库地址"><a href="#检查保存的远程仓库地址" class="headerlink" title="检查保存的远程仓库地址"></a>检查保存的远程仓库地址</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add [name] [ssh-url]</span><br><span class="line"><span class="meta">#</span><span class="bash"> eg: git remote add gitee git@gitee.com:whuls/example.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     git remote add github git@github.com:whuls/example.git</span></span><br></pre></td></tr></table></figure>
<h2 id="移除远程仓库地址"><a href="#移除远程仓库地址" class="headerlink" title="移除远程仓库地址"></a>移除远程仓库地址</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote rm [name]</span><br><span class="line"><span class="meta">#</span><span class="bash"> eg: git remote rm gitee</span></span><br></pre></td></tr></table></figure>
<h2 id="查看远程仓库地址"><a href="#查看远程仓库地址" class="headerlink" title="查看远程仓库地址"></a>查看远程仓库地址</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> gitee git@gitee.com:whuls/example.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> github git@github.com:whuls/example.git</span></span><br></pre></td></tr></table></figure>
<h2 id="从远程仓库同步分支信息"><a href="#从远程仓库同步分支信息" class="headerlink" title="从远程仓库同步分支信息"></a>从远程仓库同步分支信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch [name] [branch]</span><br><span class="line"><span class="meta">#</span><span class="bash"> eg: git fetch origin master</span></span><br></pre></td></tr></table></figure>
<h2 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push [name] [branch]</span><br><span class="line"><span class="meta">#</span><span class="bash"> eg: git push origin master</span></span><br></pre></td></tr></table></figure>
<p>可以为当前的分支设置上传流（<code>upstream</code>），设置方式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout branch1</span><br><span class="line">git branch --set-upstream-to origin/branch1</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout branch1</span><br><span class="line">git branch -u origin/branch1</span><br></pre></td></tr></table></figure>
<p>设置上传流之后表明确定了当前分支默认关联的远程分支，不需要每次推送（push）时都指定分支，因此推送操作可以简化为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin</span><br></pre></td></tr></table></figure>
<p>也可以设置上传流为本地分支，不过好像除了检查同步之外没有别的便利之处。</p>
<h1 id="2-分支操作"><a href="#2-分支操作" class="headerlink" title="2. 分支操作"></a>2. 分支操作</h1><h2 id="查看本地及远程分支"><a href="#查看本地及远程分支" class="headerlink" title="查看本地及远程分支"></a>查看本地及远程分支</h2><p>xxxxxxx是分支所在的版本id，msg是该版本对应的提交信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -v -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> branch1               xxxxxxx msg......</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> master                xxxxxxx msg......</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> remotes/origin/master xxxxxxx msg......</span></span><br></pre></td></tr></table></figure>
<h2 id="创建新的分支"><a href="#创建新的分支" class="headerlink" title="创建新的分支"></a>创建新的分支</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch [local_branch_name]</span><br><span class="line"><span class="meta">#</span><span class="bash"> eg: git branch branch1</span></span><br></pre></td></tr></table></figure>
<h2 id="更改当前分支"><a href="#更改当前分支" class="headerlink" title="更改当前分支"></a>更改当前分支</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout [local_branch_name]</span><br><span class="line"><span class="meta">#</span><span class="bash"> eg: git checkout branch1</span></span><br></pre></td></tr></table></figure>
<h2 id="对比分支"><a href="#对比分支" class="headerlink" title="对比分支"></a>对比分支</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log -p [branch1]..[branch2]</span><br></pre></td></tr></table></figure>
<p>两个分支可以是本地分支也可以是远程分支。只有写在后面的分支比前面的分支新，这条命令才会显示对比信息，否则显示为空。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log -p master..branch1</span><br><span class="line"><span class="meta">#</span><span class="bash"> commit dca801bdbddb005bac36bf6a296b333952c54dac (HEAD -&gt; linetrack)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Author: whuls &lt;hayzlsls@163.com&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Date:   Wed May 5 15:52:54 2021 +0800</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    123</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> diff --git a/aaa b/aaa</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> new file mode 100644</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> index 0000000..e69de29</span></span><br></pre></td></tr></table></figure>
<h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>合并（远程）分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge [name]/[branch]</span><br><span class="line"><span class="meta">#</span><span class="bash"> eg: git merge gitee/branch1</span></span><br></pre></td></tr></table></figure>
<p>合并（本地）分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge [local_branch_name]</span><br><span class="line"><span class="meta">#</span><span class="bash"> eg: git merge branch1</span></span><br></pre></td></tr></table></figure>
<h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><p>删除本地分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -d branch1</span><br></pre></td></tr></table></figure>
<p>如果branch1与当前分支不同（存在更改），则可以合并后再删除，或者使用强制命令<code>-D</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -D branch1</span><br></pre></td></tr></table></figure>
<p>删除远程分支：在push的时候加上<code>--delete</code>参数或者在分支前加上冒号<code>:</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin --delete branch1</span><br><span class="line">git push origin :branch1</span><br></pre></td></tr></table></figure>
<h1 id="3-常用组合技"><a href="#3-常用组合技" class="headerlink" title="3. 常用组合技"></a>3. 常用组合技</h1><h2 id="一次提交"><a href="#一次提交" class="headerlink" title="一次提交"></a>一次提交</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">git remote add origin git@gitee.com:whuls/whuls</span><br><span class="line">git add .</span><br><span class="line">git commit -m "Your message"</span><br><span class="line">git push origin</span><br></pre></td></tr></table></figure>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>强制回退到上一个版本、上上个版本…上100个版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br><span class="line">git reset --hard HEAD^^</span><br><span class="line"><span class="meta">#</span><span class="bash"> ...</span></span><br><span class="line">git reset --hard HEAD~100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者使用版本号</span></span><br><span class="line">git reset --hard 54abdcf</span><br></pre></td></tr></table></figure>
<p>撤销提交</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset 54abdcf</span><br><span class="line">git reset HEAD^</span><br></pre></td></tr></table></figure>
<p>二者的区别在于是否强制更改文件内容。使用<code>--hard</code>参数时会强制改变文件内容，不仅会回退到指定版本，还会把文件也改了，而不指定该参数则只会修改提交内容，不会更改文件。</p>
<h2 id="查看提交记录-版本变更记录"><a href="#查看提交记录-版本变更记录" class="headerlink" title="查看提交记录/版本变更记录"></a>查看提交记录/版本变更记录</h2><p>查看提交记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 直接在命令行打印</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 简化版</span></span><br><span class="line">git log --pretty=oneline</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印到文件</span></span><br><span class="line">git log &gt; log.txt</span><br></pre></td></tr></table></figure>
<p>查看版本变更记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<p>如果命令太长，在命令行内显示后无法退出，按下<code>q</code>即可。</p>
<h3 id="在命令行打印时出现乱码"><a href="#在命令行打印时出现乱码" class="headerlink" title="在命令行打印时出现乱码"></a>在命令行打印时出现乱码</h3><blockquote>
<p><a href="https://blog.csdn.net/FollowGodSteps/article/details/96271359" target="_blank" rel="noopener">PowerShell | git log 中文乱码问题解决</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global core.quotepath false</span><br><span class="line">git config --global gui.encoding utf-8</span><br><span class="line">git config --global i18n.commit.encoding utf-8</span><br><span class="line">git config --global i18n.logoutputencoding utf-8</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以下二者均可</span></span><br><span class="line"><span class="meta">$</span><span class="bash">env:LESSCHARSET=<span class="string">'utf-8'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">env:LC_ALL=<span class="string">'C.UTF-8'</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cmd</span></span><br><span class="line">set LESSCHARSET=utf-8  # 设置</span><br><span class="line">set LC_ALL=C.UTF-8</span><br><span class="line">set LESSCHARSET        # 查看</span><br><span class="line">set LC_ALL</span><br></pre></td></tr></table></figure>
<p>或者直接把<code>LESSCHARSET</code>，<code>LC_ALL</code>添加到系统环境变量。</p>
<h3 id="powershell中输出到文件出现乱码"><a href="#powershell中输出到文件出现乱码" class="headerlink" title="powershell中输出到文件出现乱码"></a>powershell中输出到文件出现乱码</h3><p>在cmd窗口中，设置环境变量后打印在命令行不会出现中文乱码；不设置环境变量时直接输出到文件不会出现中文乱码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set LESSCHARSET=utf-8</span><br><span class="line">git log</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log &gt; a.txt</span><br></pre></td></tr></table></figure>
<p>以上代码的执行结果都不会出现乱码。唯独这该死的powershell啊，无论有没有设置环境变量，输出到文件均会出现乱码😡。</p>
<p>这是由于powershell输出重定向（操作<code>&gt;</code>）文件编码默认为<code>UTF-16(LE)</code>，将其改为<code>UTF-8</code>的方法如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git log | <span class="built_in">Out-File</span> a.txt <span class="literal">-Encoding</span> utf<span class="literal">-8</span></span><br></pre></td></tr></table></figure>
<p>但是输出的文件编码格式为<code>UTF-8 With BOM</code>，还是乱码，暂时无法解决。</p>
<h2 id="添加、查看、删除远程仓库"><a href="#添加、查看、删除远程仓库" class="headerlink" title="添加、查看、删除远程仓库"></a>添加、查看、删除远程仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin git@gitee.com:whuls/whuls</span><br><span class="line">git remote -v</span><br><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure>
<h2 id="查看远程仓库的分支更新情况并合并"><a href="#查看远程仓库的分支更新情况并合并" class="headerlink" title="查看远程仓库的分支更新情况并合并"></a>查看远程仓库的分支更新情况并合并</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git branch -v -a</span><br><span class="line">git checkout branch1</span><br><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure>
<h2 id="创建一个分支"><a href="#创建一个分支" class="headerlink" title="创建一个分支"></a>创建一个分支</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch branch1</span><br><span class="line">git checkout branch1</span><br></pre></td></tr></table></figure>
<h2 id="合并分支-1"><a href="#合并分支-1" class="headerlink" title="合并分支"></a>合并分支</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -v -a</span><br><span class="line">git checkout branch1</span><br><span class="line">git merge master</span><br></pre></td></tr></table></figure>
<h2 id="使文件（夹）与其他分支的一至"><a href="#使文件（夹）与其他分支的一至" class="headerlink" title="使文件（夹）与其他分支的一至"></a>使文件（夹）与其他分支的一至</h2><p>例如在master分支下更新了README.md文件，或更新了docs文件夹的文件，在branch1中要使对应的文件一至，可以使用如下操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout branch1</span><br><span class="line">git checkout master README.md  # 文件</span><br><span class="line">git checkout master docs       # 文件夹</span><br></pre></td></tr></table></figure>
<p>该操作仅仅是将文件或文件内容复制过来，并不会修改版本号之类的东西。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 在鼠标位置缩放图像</title>
    <url>/2019/06/11/Qt-%E5%9C%A8%E9%BC%A0%E6%A0%87%E4%BD%8D%E7%BD%AE%E7%BC%A9%E6%94%BE%E5%9B%BE%E5%83%8F/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>使用Qt的<code>QGraphicsView</code>显示图像时，鼠标滚轮的动作由其自带的<code>wheelEvent</code>事件控制。滚动滚轮可以控制图像上下移动。</p>
<p>现希望通过滚动滚轮实现图像缩放，且缩放的中心为鼠标所在位置。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="1-自定义GraphicsView类"><a href="#1-自定义GraphicsView类" class="headerlink" title="1. 自定义GraphicsView类"></a>1. 自定义<code>GraphicsView</code>类</h2><p><code>HighGraphicsView</code>类继承自<code>QGraphicsView</code>类，重写了<code>wheelEvent</code>和<code>mouseMoveEvent</code>两个事件。其中，对<code>mouseMoveEvent</code>，在原有的基础上加入了触发鼠标位置变化的事件，这个鼠标位置是相对于<code>View</code>的<code>(x,y)</code>坐标。对<code>wheelEvent</code>，放弃原有事件，记录滚动间隔，发送信号。</p>
<p>HighGraphicsView.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qgraphicsview.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMouseEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWheelEvent&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QScrollBar&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HighGraphicsView</span> :</span></span><br><span class="line">    <span class="keyword">public</span> QGraphicsView</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    HighGraphicsView(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~HighGraphicsView();</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mousePositionChanged</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wheelScrollChanged</span><span class="params">(<span class="keyword">int</span> <span class="built_in">step</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wheelEvent</span><span class="params">(QWheelEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// Mouse Position</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<p>HighGraphicsView.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HighGraphicsView.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HighGraphicsView::HighGraphicsView(QWidget *parent)</span><br><span class="line">    :QGraphicsView(parent)</span><br><span class="line">{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HighGraphicsView::~HighGraphicsView()</span><br><span class="line">{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HighGraphicsView::wheelEvent</span><span class="params">(QWheelEvent *event)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QPoint numPixels, numDegrees;</span><br><span class="line">    numPixels = event-&gt;pixelDelta();</span><br><span class="line">    numDegrees = event-&gt;angleDelta() / <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!numPixels.isNull())</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">step</span> = numPixels.y();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!numDegrees.isNull())</span><br><span class="line">    {</span><br><span class="line">        QPoint numSteps = numDegrees / <span class="number">15</span>;</span><br><span class="line">        <span class="built_in">step</span> = numSteps.y();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enlarge: +; Shrink: -</span></span><br><span class="line">    <span class="function">emit <span class="title">wheelScrollChanged</span><span class="params">(<span class="built_in">step</span>)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HighGraphicsView::mouseMoveEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QGraphicsView::mouseMoveEvent(event);</span><br><span class="line"></span><br><span class="line">    x = event-&gt;x();</span><br><span class="line">    y = event-&gt;y();</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">mousePositionChanged</span><span class="params">(x, y)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="2-记录鼠标位置"><a href="#2-记录鼠标位置" class="headerlink" title="2. 记录鼠标位置"></a>2. 记录鼠标位置</h2><p>鼠标的位置包括三类：</p>
<ol>
<li>图像上的位置；</li>
</ol>
<script type="math/tex; mode=display">
(x_0,y_0)</script><ol>
<li><code>View</code>中的位置；</li>
</ol>
<script type="math/tex; mode=display">
(x,y)</script><ol>
<li><code>Scene</code>中的位置；</li>
</ol>
<script type="math/tex; mode=display">
(X,Y)</script><p>其对应的转换关系如下所示：</p>
<script type="math/tex; mode=display">
x_0 = X * scaleX</script><script type="math/tex; mode=display">
y_0 = Y * scaleY</script><script type="math/tex; mode=display">
X = x + horizontal = x + h</script><script type="math/tex; mode=display">
Y = y + vertical = y + v</script><p>其中，<script type="math/tex">horizontal</script>是<code>View-&gt;horizontalScrollBar()-&gt;value()</code>的值，<script type="math/tex">vertical</script>是<code>View-&gt;verticalScrollBar()-&gt;value()</code>的值，<script type="math/tex">scaleX, scaleY</script>是当前图像<script type="math/tex">x,y</script>方向上的缩放比例，其表达式为：</p>
<script type="math/tex; mode=display">
scaleX = \frac{Width}{currentWidth}</script><script type="math/tex; mode=display">
scaleY = \frac{Height}{currentHeight}</script><p>在引用<code>HighGraphicsView</code>的类中，存储两类鼠标位置<script type="math/tex">(x_0,y_0), (x,y)</script>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Mouse Position</span></span><br><span class="line"><span class="keyword">int</span> x, y;         <span class="comment">// x0,y0</span></span><br><span class="line"><span class="keyword">int</span> viewX, viewY; <span class="comment">// x,y</span></span><br></pre></td></tr></table></figure>
<p>创建槽<code>onMousePositionChanged</code>，用来接收<code>View</code>发出的<code>mousePositionChanged</code>信号</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onMousePositionChanged</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    viewX = x;</span><br><span class="line">    viewY = y;</span><br><span class="line"></span><br><span class="line">    QRectF <span class="built_in">rect</span> = View-&gt;mapToScene(View-&gt;viewport()-&gt;geometry()).boundingRect();</span><br><span class="line">    x += <span class="keyword">int</span>(<span class="built_in">rect</span>.x() - <span class="number">1</span>); <span class="comment">// Rectangle begin with (1,1)</span></span><br><span class="line">    y += <span class="keyword">int</span>(<span class="built_in">rect</span>.y() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    x = <span class="keyword">int</span>(<span class="keyword">double</span>(x) * (<span class="keyword">double</span>(Width) / <span class="keyword">double</span>(currentWidth)));</span><br><span class="line">    y = <span class="keyword">int</span>(<span class="keyword">double</span>(y) * (<span class="keyword">double</span>(Height) / <span class="keyword">double</span>(currentHeight)));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">    <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x &gt;= Width || x &lt; <span class="number">0</span> || y &gt;= Height || y &lt; <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        ui.statusBar-&gt;showMessage(<span class="string">u8"Outside"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        ui.statusBar-&gt;showMessage(QString().<span class="built_in">sprintf</span>(<span class="string">u8"(x=%d, y=%d)"</span>, x, y));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>绑定信号与槽</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Receive (x,y) coordinate</span></span><br><span class="line"><span class="built_in">connect</span>(View, SIGNAL(mousePositionChanged(<span class="keyword">int</span>, <span class="keyword">int</span>)), <span class="keyword">this</span>, SLOT(onMousePositionChanged(<span class="keyword">int</span>, <span class="keyword">int</span>)));</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="3-图像缩放"><a href="#3-图像缩放" class="headerlink" title="3. 图像缩放"></a>3. 图像缩放</h2><p>要以鼠标为中心进行图像缩放，可以分为两个步骤进行：1. 缩放；2. 平移。缩放过程较为简单，只需要根据比例对原图进行缩放即可。平移的目的是为了使图像在缩放前后鼠标所在的位置相对于图像不变、相对于视窗（<code>View</code>）不变，不变量为<script type="math/tex">(x,y)</script>、<script type="math/tex">(x_0, y_0)</script>。</p>
<p>根据<script type="math/tex">(x,y), (x_0,y_0), (X,Y)</script>之间的关系（见第1小节），可以得到</p>
<script type="math/tex; mode=display">
x_0 = X * scaleX = \frac{(x + h) * Width}{currentWidth}</script><script type="math/tex; mode=display">
y_0 = Y * scaleY = \frac{(y + v) * Height}{currentHeight}</script><p>由于<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.169ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2284.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(961, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1405.7, 0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1895.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.995ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3091.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(572, -150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1364.6, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1809.2, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(490, -150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(2702.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>是不变量，因此可以得到变化量<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="3.406ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 1505.7 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mo" transform="translate(576, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1020.7, 0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container>的值，即<code>View</code>相对于<code>Scene</code>的偏移量：</p>
<script type="math/tex; mode=display">
h = \frac{x_0 * currentWidth}{Width} - x</script><script type="math/tex; mode=display">
v = \frac{y_0 * currentHeight}{Height} - y</script><p>通过<code>View-&gt;horizontalScrollBar()-&gt;setValue()</code>和<code>View-&gt;verticalScrollBar()-&gt;setValue()</code>设置偏移量，完成平移。</p>
<p>创建响应滚轮变化信号的槽：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onWheelScrollChanged</span><span class="params">(<span class="keyword">int</span> <span class="built_in">step</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    currentHeight += currentHeight / <span class="number">20</span> * <span class="built_in">step</span>;</span><br><span class="line">    currentWidth += currentWidth / <span class="number">20</span> * <span class="built_in">step</span>;</span><br><span class="line">    ImageItem-&gt;setPixmap(QPixmap::fromImage(Image.scaled(currentWidth, currentHeight)));</span><br><span class="line"></span><br><span class="line">    Scene = <span class="keyword">new</span> QGraphicsScene(<span class="keyword">this</span>);</span><br><span class="line">    Scene-&gt;addItem(ImageItem);</span><br><span class="line">    View-&gt;setScene(Scene);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> horizontal, vertical;</span><br><span class="line">    horizontal = <span class="keyword">int</span>(<span class="keyword">double</span>(x * currentWidth) / <span class="keyword">double</span>(Width) - viewX);</span><br><span class="line">    vertical = <span class="keyword">int</span>(<span class="keyword">double</span>(y * currentHeight) / <span class="keyword">double</span>(Height) - viewY);</span><br><span class="line"></span><br><span class="line">    View-&gt;horizontalScrollBar()-&gt;setValue(horizontal);</span><br><span class="line">    View-&gt;verticalScrollBar()-&gt;setValue(vertical);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>绑定信号与槽</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Receive wheel scroll signal</span></span><br><span class="line"><span class="built_in">connect</span>(View, SIGNAL(wheelScrollChanged(<span class="keyword">int</span>)), <span class="keyword">this</span>, SLOT(onWheelScrollChanged(<span class="keyword">int</span>)));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>ol5显示WMTS资源</title>
    <url>/2019/06/14/ol5%E6%98%BE%E7%A4%BAWMTS%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<h1 id="WMTS资源介绍"><a href="#WMTS资源介绍" class="headerlink" title="WMTS资源介绍"></a>WMTS资源介绍</h1><p>WMTS全称Web Map Tile Service，是允许用户访问切片地图（Tile Map）的一种服务标准。下面是一些常用的WMTS资源：</p>
<ul>
<li><a href="http://gis.sinica.edu.tw/ccts/wmts/1.0.0/WMTSCapabilities.xml" target="_blank" rel="noopener">http://gis.sinica.edu.tw/ccts/wmts/1.0.0/WMTSCapabilities.xml</a><br>由台湾中央研究院开发的中国历史地图<ul>
<li><a href="https://services.arcgisonline.com/arcgis/rest/services/NatGeo_World_Map/MapServer/WMTS/1.0.0/WMTSCapabilities.xml" target="_blank" rel="noopener">https://services.arcgisonline.com/arcgis/rest/services/NatGeo_World_Map/MapServer/WMTS/1.0.0/WMTSCapabilities.xml</a><br>National Geographic和Esri联合开发的包括行政边界，城市，保护区，高速公路，道路，铁路，水景，建筑物和地标等内容的地图</li>
<li><a href="https://services.arcgisonline.com/arcgis/rest/services/Demographics/USA_Population_Density/MapServer/WMTS/" target="_blank" rel="noopener">https://services.arcgisonline.com/arcgis/rest/services/Demographics/USA_Population_Density/MapServer/WMTS/</a><br>美国人口密度图</li>
</ul>
</li>
<li><a href="https://services.arcgisonline.com/arcgis/rest/services/USA_Topo_Maps/MapServer/WMTS/1.0.0/WMTSCapabilities.xml" target="_blank" rel="noopener">https://services.arcgisonline.com/arcgis/rest/services/USA_Topo_Maps/MapServer/WMTS/1.0.0/WMTSCapabilities.xml</a><br>美国地质调查局（USGS）纸质地形图的无缝扫描图像，展示了世界范围内的土地利用类型图，和美国详细的地形图（数字线划图形DLG）</li>
<li><a href="https://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/WMTS/1.0.0/WMTSCapabilities.xml" target="_blank" rel="noopener">https://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/WMTS/1.0.0/WMTSCapabilities.xml</a><br>世界范围内的卫星地图，包含15米TerraColor影像、2.5米的SPOT影像、南极洲15米的Landsat影像。在美国大陆分辨率能达到0.3米，在西欧部分地图分辨率为0.6米。</li>
<li><a href="https://services.arcgisonline.com/arcgis/rest/services/World_Shaded_Relief/MapServer/WMTS/1.0.0/WMTSCapabilities.xml" target="_blank" rel="noopener">https://services.arcgisonline.com/arcgis/rest/services/World_Shaded_Relief/MapServer/WMTS/1.0.0/WMTSCapabilities.xml</a><br>以地形阴影表示高程的世界高程图。美国地区分辨率为30米，北纬60度到南纬56度之间区域分辨率为90米，在这个纬度范围之外的分辨率为1KM</li>
<li><a href="https://services.arcgisonline.com/arcgis/rest/services/World_Street_Map/MapServer/WMTS/1.0.0/WMTSCapabilities.xml" target="_blank" rel="noopener">https://services.arcgisonline.com/arcgis/rest/services/World_Street_Map/MapServer/WMTS/1.0.0/WMTSCapabilities.xml</a><br>世界范围内的公路/路网信息地图</li>
<li><a href="https://services.arcgisonline.com/arcgis/rest/services/World_Terrain_Base/MapServer/WMTS/1.0.0/WMTSCapabilities.xml" target="_blank" rel="noopener">https://services.arcgisonline.com/arcgis/rest/services/World_Terrain_Base/MapServer/WMTS/1.0.0/WMTSCapabilities.xml</a><br>包含水深的、以地形阴影表示高程的地形图（世界范围内）</li>
</ul>
<p>更多资源可以访问各大官网：</p>
<ul>
<li>Esri：<a href="https://services.arcgisonline.com/arcgis/rest/services" target="_blank" rel="noopener">https://services.arcgisonline.com/arcgis/rest/services</a></li>
<li>天地图：<a href="https://service.tianditu.gov.cn/" target="_blank" rel="noopener">https://service.tianditu.gov.cn/</a></li>
</ul>
<p>打开服务对应的链接（这是一个xml文件），可以看到文件结构如图1所示。</p>
<p><img src="/images/20190614165136412.png" alt="图1 WMTSCapabilities.xml文件结构"></p>
<p>图层信息全都保存在<code>&lt;Contents&gt;</code>标签中，我们引用地图服务的引用信息就包含在这个标签内。<code>&lt;Contents&gt;</code>标签里面包含了<code>&lt;Layer&gt;</code>标签和<code>&lt;TileMatrixSet&gt;</code>标签，我们感兴趣的是前者。若该服务提供的图层数目较多，会存在多个<code>&lt;Layer&gt;</code>标签。在每个<code>&lt;Layer&gt;</code>标签中，包含了这个图层的<code>Title</code>和<code>Identifier</code>，如图2所示。一般来说，调用WMTS服务的某个图层，只需要声明该图层的<code>Identifier</code>即可。</p>
<p><img src="/images/20190614170224896.png" alt="图2 Layer结构"></p>
<h1 id="Openlayer的WMTS解析器"><a href="#Openlayer的WMTS解析器" class="headerlink" title="Openlayer的WMTS解析器"></a>Openlayer的WMTS解析器</h1><p>Openlayers自带解析WMTS资源和创建WMTS图层的工具，引入这些工具的语句为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WMTS loader</span></span><br><span class="line"><span class="keyword">import</span> WMTS, &#123;optionsFromCapabilities&#125; <span class="keyword">from</span> <span class="string">'ol/source/WMTS'</span>;</span><br><span class="line"><span class="keyword">import</span> WMTSCapabilities <span class="keyword">from</span> <span class="string">'ol/format/WMTSCapabilities'</span>;</span><br></pre></td></tr></table></figure>
<p>创建解析器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> parser = <span class="keyword">new</span> WMTSCapabilities();</span><br></pre></td></tr></table></figure>
<p>获取WMTS的数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> wmtsString = <span class="string">'http://gis.sinica.edu.tw/ccts/wmts/1.0.0/WMTSCapabilities.xml'</span>;</span><br><span class="line">fetch(wmtsString)</span><br><span class="line">    .then( <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response.text();</span><br><span class="line">    &#125;).then( <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Parse WMTS data</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>解析数据并创建WMTS数据源</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> identifier = <span class="string">'ad1208'</span>;</span><br><span class="line"><span class="keyword">let</span> results = parser.read(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> options = optionsFromCapabilities(results, &#123;</span><br><span class="line">    layer: identifier,</span><br><span class="line">    matrixSet: <span class="string">'GoogleMapsCompatible'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wmtsSource = <span class="keyword">new</span> WMTS(options));</span><br><span class="line">layer.setSource(wmtsSource);</span><br></pre></td></tr></table></figure>
<h1 id="引用WMTS服务的MainMap-vue"><a href="#引用WMTS服务的MainMap-vue" class="headerlink" title="引用WMTS服务的MainMap.vue"></a>引用WMTS服务的MainMap.vue</h1><p>MainMap.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;map&quot; :style&#x3D;&quot;MapStyle&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F; Openlayers based modules</span><br><span class="line">import &#39;ol&#x2F;ol.css&#39;;</span><br><span class="line">import &#123;Map, View&#125; from &#39;ol&#39;;</span><br><span class="line">import TileLayer from &#39;ol&#x2F;layer&#x2F;Tile&#39;;</span><br><span class="line">import OSM from &#39;ol&#x2F;source&#x2F;OSM&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Map Control</span><br><span class="line">import &#123;defaults&#125; from &#39;ol&#x2F;control&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; WMTS loader</span><br><span class="line">import WMTS, &#123;optionsFromCapabilities&#125; from &#39;ol&#x2F;source&#x2F;WMTS&#39;;</span><br><span class="line">import WMTSCapabilities from &#39;ol&#x2F;format&#x2F;WMTSCapabilities&#39;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;MainMap&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      Map: &#123;&#125;,</span><br><span class="line">      View: &#123;&#125;,</span><br><span class="line">      Layers: [],</span><br><span class="line">      MapStyle: &#123;</span><br><span class="line">        height: innerHeight + &#39;px&#39;,</span><br><span class="line">        width: innerWidth + &#39;px&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      basedLayer: new TileLayer(&#123;</span><br><span class="line">        opacity: 0.7</span><br><span class="line">      &#125;),</span><br><span class="line">      wmtsLayer: new TileLayer(&#123;</span><br><span class="line">        opacity: 0.9</span><br><span class="line">      &#125;),</span><br><span class="line">      wmtsResults: undefined,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  created() &#123;</span><br><span class="line">    const self &#x3D; this;</span><br><span class="line"></span><br><span class="line">    onresize &#x3D; e &#x3D;&gt; &#123;</span><br><span class="line">      let win &#x3D; e.currentTarget;</span><br><span class="line">      self.MapStyle.height &#x3D; win.innerHeight + &#39;px&#39;;</span><br><span class="line">      self.MapStyle.width &#x3D; win.innerWidth + &#39;px&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  mounted() &#123;</span><br><span class="line">    const self &#x3D; this;</span><br><span class="line">    &#x2F;&#x2F; View</span><br><span class="line">    const center &#x3D; [12175093.67465372, 4209022.808896985];</span><br><span class="line">    const zoom &#x3D; 5;</span><br><span class="line">    const projecton &#x3D; &#39;EPSG:3857&#39;;</span><br><span class="line"></span><br><span class="line">    self.View &#x3D; new View(&#123;</span><br><span class="line">      center: center,</span><br><span class="line">      zoom: zoom,</span><br><span class="line">      projecton: projecton,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Layers</span><br><span class="line">    self.basedLayer.setSource(new OSM());</span><br><span class="line">    self.setWmtsSource(&#39;ad1208&#39;);</span><br><span class="line">    self.Layers &#x3D; [</span><br><span class="line">      self.basedLayer,</span><br><span class="line">      self.wmtsLayer</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Map</span><br><span class="line">    self.Map &#x3D; new Map(&#123;</span><br><span class="line">      target: &#39;map&#39;,</span><br><span class="line">      view: self.View,</span><br><span class="line">      layers: self.Layers,</span><br><span class="line">      controls: defaults(&#123;</span><br><span class="line">        attribution: false,</span><br><span class="line">        rotate: false,</span><br><span class="line">        zoom: false</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    self.Map.on(&#39;click&#39;, event &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&#39;(&#39; + event.coordinate.toString() + &#39;) &#39; + event.map.getView().getZoom());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    setWmtsSource(identifier) &#123;</span><br><span class="line">      const self &#x3D; this;</span><br><span class="line">      if (self.wmtsResults &#x3D;&#x3D;&#x3D; undefined)</span><br><span class="line">      &#123;</span><br><span class="line">        let parser &#x3D; new WMTSCapabilities();</span><br><span class="line">        </span><br><span class="line">        let wmtsString &#x3D; &#39;http:&#x2F;&#x2F;gis.sinica.edu.tw&#x2F;ccts&#x2F;wmts&#x2F;1.0.0&#x2F;WMTSCapabilities.xml&#39;;</span><br><span class="line">        fetch(wmtsString)</span><br><span class="line">        .then( response &#x3D;&gt; &#123;</span><br><span class="line">          return response.text();</span><br><span class="line">        &#125;).then( data &#x3D;&gt; &#123;</span><br><span class="line">          &#x2F;&#x2F; Parse WMTS data</span><br><span class="line">          &#x2F;&#x2F; results.Contents.Layer.Title&#x2F;.Identifier</span><br><span class="line">          let results &#x3D; parser.read(data);</span><br><span class="line">          self.wmtsResults &#x3D; results;</span><br><span class="line"></span><br><span class="line">          let options &#x3D; optionsFromCapabilities(results, &#123;</span><br><span class="line">            layer: identifier,</span><br><span class="line">            matrixSet: &#39;GoogleMapsCompatible&#39;</span><br><span class="line">          &#125;);</span><br><span class="line">          </span><br><span class="line">          self.wmtsLayer.setSource(new WMTS(options));</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">        let options &#x3D; optionsFromCapabilities(self.wmtsResults, &#123;</span><br><span class="line">          layers: identifier,</span><br><span class="line">          matrixSet: &#39;GoogleMapsCompatible&#39;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        self.wmtsLayer.setSource(new WMTS(options));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>OpenLayers</tag>
        <tag>ol5</tag>
        <tag>WMTS</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack 学习笔记（一） 第一次打包</title>
    <url>/2020/04/30/Webpack-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89-%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><p>中文指南: <a href="https://webpack.docschina.org/guides/installation/" target="_blank" rel="noopener">https://webpack.docschina.org/guides/installation/</a></p>
</li>
<li><p>English Guide: <a href="https://webpack.js.org/guides/getting-started/" target="_blank" rel="noopener">https://webpack.js.org/guides/getting-started/</a></p>
</li>
<li><p>Webpack 4 搭建 Vue 项目:<a href="https://juejin.im/post/5b7d350951882542f3278b11" target="_blank" rel="noopener">https://juejin.im/post/5b7d350951882542f3278b11</a></p>
</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装在项目目录中：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install -<span class="literal">-save</span><span class="literal">-dev</span> webpack</span><br><span class="line">or</span><br><span class="line">npm install -<span class="literal">-save</span><span class="literal">-dev</span> webpack<span class="selector-tag">@</span>&lt;version&gt;</span><br></pre></td></tr></table></figure>
<p>对于 webpack v4+ 版本，需要安装 CLI</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install -<span class="literal">-save</span><span class="literal">-dev</span> webpack<span class="literal">-cli</span></span><br></pre></td></tr></table></figure>
<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>构造一个 npm 项目，使用：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm init <span class="literal">-y</span></span><br></pre></td></tr></table></figure>
<p>安装 webpack</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install webpack webpack<span class="literal">-cli</span> -<span class="literal">-save</span><span class="literal">-dev</span></span><br></pre></td></tr></table></figure>
<p>在根目录下创建 <code>src/index.js</code> 和 <code>dist/index.html</code>，此时的目录结构如下所示：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hello<span class="literal">-world</span></span><br><span class="line">|- dist</span><br><span class="line">  |- index.html</span><br><span class="line">|- src</span><br><span class="line">  |- index.js</span><br><span class="line">|- package.json</span><br></pre></td></tr></table></figure>
<h1 id="引用-npm-包，编写页面代码"><a href="#引用-npm-包，编写页面代码" class="headerlink" title="引用 npm 包，编写页面代码"></a>引用 npm 包，编写页面代码</h1><p>这里用到 lodash 作为示例（<a href="https://lodash.com/" target="_blank" rel="noopener">lodash，一个 JavaScript 工具库</a>）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install lodash -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>
<p>src/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBody</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> el = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 lodash 工具库搭建页面</span></span><br><span class="line">    el.innerHTML = _.join([<span class="string">'Hello'</span>, <span class="string">'Webpack'</span>], <span class="string">', '</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> el;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入到文档的 body 中</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(createBody());</span><br></pre></td></tr></table></figure>
<p>dist/index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样，基本的文件目录和页面就构建完毕，此时，执行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure>
<p>可以看到</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">PS E:\codes\used<span class="literal">-for</span><span class="literal">-learning</span><span class="operator">-and</span><span class="literal">-testing</span>\webpack\Hello<span class="literal">-World</span>&gt; npx webpack</span><br><span class="line">Hash: <span class="number">5</span>dd32432e8cefa8f46b5</span><br><span class="line">Version: webpack <span class="number">4.43</span>.<span class="number">0</span></span><br><span class="line">Time: <span class="number">3084</span>ms</span><br><span class="line">Built at: <span class="number">2020</span><span class="literal">-05</span><span class="literal">-01</span> <span class="number">9</span>:<span class="number">13</span>:<span class="number">31</span></span><br><span class="line">  Asset      Size  Chunks             Chunk Names</span><br><span class="line">main.js  <span class="number">71.8</span> KiB       <span class="number">0</span>  [<span class="type">emitted</span>]  main</span><br><span class="line">Entrypoint main = main.js</span><br><span class="line">[<span class="number">1</span>] ./src/index.js <span class="number">296</span> bytes &#123;<span class="number">0</span>&#125; [<span class="type">built</span>]</span><br><span class="line">[<span class="number">2</span>] (webpack)/buildin/global.js <span class="number">472</span> bytes &#123;<span class="number">0</span>&#125; [<span class="type">built</span>]</span><br><span class="line">[<span class="number">3</span>] (webpack)/buildin/module.js <span class="number">497</span> bytes &#123;<span class="number">0</span>&#125; [<span class="type">built</span>]</span><br><span class="line">    + <span class="number">1</span> <span class="keyword">hidden</span> module</span><br><span class="line"></span><br><span class="line">WARNING <span class="keyword">in</span> configuration</span><br><span class="line">The <span class="string">'mode'</span> option has not been set, webpack will fallback to <span class="string">'production'</span> <span class="keyword">for</span> this value. Set <span class="string">'mode'</span> option to <span class="string">'development'</span> or <span class="string">'production'</span> to </span><br><span class="line">enable defaults <span class="keyword">for</span> each environment.                                                                                                           enable defaults <span class="keyword">for</span> each environment.</span><br><span class="line">You can also set it to <span class="string">'none'</span> to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/</span><br></pre></td></tr></table></figure>
<p>在 dist 目录下生成了一个 main.js</p>
<p><img src="/images/image-20200501110510540.png" alt="image-20200501110510540"></p>
<p>点击 index.html，可以看到页面的效果</p>
<p><img src="/images/image-20200501110340429.png" alt="image-20200501110340429"></p>
<p>接下需要对 webpack 进行配置，解决一些问题。（比如：这个 main.js 为什么会生成？）</p>
<h1 id="webpack-配置"><a href="#webpack-配置" class="headerlink" title="webpack 配置"></a>webpack 配置</h1><p>在根目录下创建 webpack.config.js</p>
<p><img src="/images/image-20200501110544611.png" alt="image-20200501110544611"></p>
<p>webpack.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'main.js'</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这边指定了该 webpack 项目的入口文件为 src/index.js，输出的文件名为 main.js，输出路径为根目录下的 dist 文件夹。（这些是 webpack 的默认设置，<a href="https://webpack.docschina.org/concepts/configuration" target="_blank" rel="noopener">配置参考</a>）</p>
<h1 id="【附】学习环境的搭建"><a href="#【附】学习环境的搭建" class="headerlink" title="【附】学习环境的搭建"></a>【附】学习环境的搭建</h1><p>在学习 webpack 的过程中，我创建了一个单独的文件夹存放 webpack 工程</p>
<p><img src="/images/image-20200501134553632.png" alt="image-20200501134553632"></p>
<p>如果每次创建一个工程都要创建一次 npm 项目并安装 webpack，将会造成资源浪费，因此直接将所需的所有资源安装在每个测试工程的<strong>上级目录</strong>，不影响使用</p>
<p><img src="/images/image-20200501134828646.png" alt="image-20200501134828646"></p>
<p>并且在 package.json 文件中，把<code>&quot;main&quot;: &quot;index.js&quot;</code>去掉，并加上<code>&quot;private&quot;: true</code>，避免意外发布项目。</p>
<p>要安装外部包时，统一装在<strong>父目录</strong>下，装好后回到子目录运行 webpack</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cnpm i lodash <span class="literal">-S</span></span><br><span class="line">cd Hello<span class="literal">-World</span></span><br><span class="line">npx webpack</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack 学习笔记（二） 资源管理</title>
    <url>/2020/05/01/Webpack-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Webpack 中文指南：<a href="https://webpack.docschina.org/guides/asset-management" target="_blank" rel="noopener">https://webpack.docschina.org/guides/asset-management</a></p>
<h1 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h1><p>新建 Assets-Manage 项目</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir Assets<span class="literal">-Manage</span></span><br><span class="line">cd Assets<span class="literal">-Manage</span></span><br></pre></td></tr></table></figure>
<p>添加 webpack.config.js，src/index.js，dist/index.html</p>
<p>dist/index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>资源管理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>webpack.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="加载-CSS"><a href="#加载-CSS" class="headerlink" title="加载 CSS"></a>加载 CSS</h1><p>为了使用 import 功能导入 css 文件，需要安装 <a href="https://webpack.docschina.org/loaders/style-loader" target="_blank" rel="noopener">style-loader</a> 和 <a href="https://webpack.docschina.org/loaders/css-loader" target="_blank" rel="noopener">css-loader</a>，并且在 <a href="https://webpack.docschina.org/configuration/module" target="_blank" rel="noopener">module 配置</a> 中添加这些 loader。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install style<span class="literal">-loader</span> css<span class="literal">-loader</span> -<span class="literal">-save</span><span class="literal">-dev</span></span><br></pre></td></tr></table></figure>
<p>webpack.config.js</p>
<p><img src="/images/image-20200501141737463.png" alt="image-20200501141737463"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>, <span class="comment">// 正则表达式</span></span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'style-loader'</span>,</span><br><span class="line">                    <span class="string">'css-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着我们创建 css 文件写入简单的样式，并设计页面</p>
<p>src/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./style.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newElement = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> el = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line">    el.innerHTML = <span class="string">'I\'m red!'</span>;</span><br><span class="line">    el.classList.add(<span class="string">'red-text'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> el;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(newElement());</span><br></pre></td></tr></table></figure>
<p>src/style.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.red-text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时的目录结构为</p>
<p><img src="/images/image-20200501142353263.png" alt="image-20200501142353263"></p>
<p>运行 <code>npx webpack</code>，打开dist/index.html，查看结果</p>
<p><img src="/images/image-20200501142641629.png" alt="image-20200501142641629"></p>
<h1 id="图片加载"><a href="#图片加载" class="headerlink" title="图片加载"></a>图片加载</h1><p>在页面中加载图片有三种方式</p>
<ol>
<li>使用 JavaScript 的 Image 对象</li>
<li>写在 <code>&lt;img&gt;</code> 标签中</li>
<li>在 css 中用 url() 引用</li>
</ol>
<p>无论是哪种方式，利用 webpack 进行图片打包时，都需要用到 <a href="https://webpack.docschina.org/loaders/file-loader" target="_blank" rel="noopener">file-loader</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm i file<span class="literal">-loader</span> <span class="literal">-S</span></span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js &gt; module.exports &gt; module 中引入</p>
<p><img src="/images/image-20200501154837512.png" alt="image-20200501154837512"></p>
<p>打包 <code>&lt;img&gt;</code> 要配合 <a href="https://webpack.docschina.org/loaders/html-loader" target="_blank" rel="noopener">html-loader</a> 使用，打包 css 则需要 <a href="https://webpack.docschina.org/loaders/style-loader" target="_blank" rel="noopener">style-loader</a> 和 <a href="https://webpack.docschina.org/loaders/css-loader" target="_blank" rel="noopener">css-loader</a></p>
<p><strong>【注】</strong>优化和压缩图像可能会用到 <a href="https://github.com/tcoopman/image-webpack-loader" target="_blank" rel="noopener">image-webpack-loader</a> 和 <a href="https://webpack.docschina.org/loaders/url-loader" target="_blank" rel="noopener">url-loader</a></p>
<h2 id="CSS-引用图片测试"><a href="#CSS-引用图片测试" class="headerlink" title="CSS 引用图片测试"></a>CSS 引用图片测试</h2><p>我们首先测试 CSS 引用图片的模块，拷贝一幅图像到 src 文件夹下，然后在 style.css 中引用</p>
<p><img src="/images/image-20200501152529662.png" alt="image-20200501152529662"></p>
<p>执行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure>
<p>查看效果</p>
<p><img src="/images/image-20200501152627169.png" alt="image-20200501152627169"></p>
<p>如果没有 <a href="https://webpack.docschina.org/loaders/file-loader" target="_blank" rel="noopener">file-loader</a>，打包时会报错</p>
<p><img src="/images/image-20200501152754407.png" alt="image-20200501152754407"></p>
<h2 id="JavaScript-导入图片测试"><a href="#JavaScript-导入图片测试" class="headerlink" title="JavaScript 导入图片测试"></a>JavaScript 导入图片测试</h2><p>src/index.js</p>
<p><img src="/images/image-20200501153248300.png" alt="image-20200501153248300"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./style.css'</span>;</span><br><span class="line"><span class="keyword">import</span> img <span class="keyword">from</span> <span class="string">'./img.jpg'</span>; <span class="comment">// 导入图像</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newElement = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> el = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line">    el.innerHTML = <span class="string">'I\'m red!'</span>;</span><br><span class="line">    el.classList.add(<span class="string">'red-text'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> myImg = <span class="keyword">new</span> Image(); <span class="comment">// 创建 Image 对象</span></span><br><span class="line">    myImg.src = img;         <span class="comment">// 设置图片源</span></span><br><span class="line">    el.appendChild(myImg);   <span class="comment">// 插入到页面元素中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> el;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(newElement());</span><br></pre></td></tr></table></figure>
<p>效果</p>
<p><img src="/images/image-20200501153314378.png" alt="image-20200501153314378"></p>
<h1 id="加载-fonts-字体"><a href="#加载-fonts-字体" class="headerlink" title="加载 fonts 字体"></a>加载 fonts 字体</h1><p>加载字体文件仍然只需要用到 <a href="https://webpack.docschina.org/loaders/file-loader" target="_blank" rel="noopener">file-loader</a>，在 webpack.config.js &gt; module.exports &gt; module 中设置：</p>
<p><img src="/images/image-20200501155018872.png" alt="image-20200501155018872"></p>
<p>接着拷贝一些字体文件到 src 中，在 css 文件中引用字体</p>
<p><img src="/images/image-20200501160038044.png" alt="image-20200501160038044"></p>
<p>打包</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure>
<p>查看效果</p>
<p><img src="/images/image-20200501193806395.png" alt="image-20200501193806395"></p>
<h1 id="加载-JSON-XML-CSV-TSV-等数据"><a href="#加载-JSON-XML-CSV-TSV-等数据" class="headerlink" title="加载 JSON/XML/CSV/TSV 等数据"></a>加载 JSON/XML/CSV/TSV 等数据</h1><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>Node.js 内置 JSON，可以直接 import</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Data <span class="keyword">from</span> <span class="string">'./data.json'</span></span><br></pre></td></tr></table></figure>
<p>data.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"林杉"</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"男"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="XML-CSV-TSV"><a href="#XML-CSV-TSV" class="headerlink" title="XML/CSV/TSV"></a>XML/CSV/TSV</h2><p>需要用到 <a href="https://github.com/gisikw/xml-loader" target="_blank" rel="noopener">xml-loader</a> ，<a href="https://github.com/theplatapi/csv-loader" target="_blank" rel="noopener">csv-loader</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm i xml<span class="literal">-loader</span> csv<span class="literal">-loader</span> <span class="literal">-S</span></span><br></pre></td></tr></table></figure>
<p>webpack.config.js &gt; module.exports &gt; module &gt; rules</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.xml$/</span>,</span><br><span class="line">    use: [</span><br><span class="line">        <span class="string">'xml-loader'</span></span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(csv|tsv)$/</span>,</span><br><span class="line">    use: [</span><br><span class="line">        <span class="string">'csv-loader'</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>data.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>Mary<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Call Cindy on Tuesday<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>data.csv</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">林杉,男,可爱多,</span><br><span class="line">汤凯琳,女,可爱少,</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="/images/image-20200501195617159.png" alt="image-20200501195617159"></p>
<p>打包</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure>
<p>效果</p>
<p><img src="/images/image-20200501195741289.png" alt="image-20200501195741289"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora 和 Hexo 图片插入和部署说明</title>
    <url>/2020/05/17/Typora-%E5%92%8C-Hexo-%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>使用 <code>hexo</code> 构建博客时，把图片文件放在<code>$/source.</code>下，然后在文中使用<code>![](/images/image-name.png)</code>进行访问，执行命令<code>hexo server</code>后，可以在页面中正常浏览图片，<code>$/source.</code>下的图片可以由<code>localhost:4000/****.png</code>直接访问到。</p>
<p>使用 Typora 编辑 Markdown 时，粘贴图片可以选择将图片复制到相对路径的本地文件夹中。</p>
<p>怎么样设置才可以保证粘贴后，<strong>本地可以正常浏览图片</strong>，<strong>网页也可以正确显示</strong>？</p>
<h1 id="Typora配置"><a href="#Typora配置" class="headerlink" title="Typora配置"></a>Typora配置</h1><h2 id="设置图像粘贴位置"><a href="#设置图像粘贴位置" class="headerlink" title="设置图像粘贴位置"></a>设置图像粘贴位置</h2><p>打开 Typora ，打开<code>格式(O)-图像-全局图像设置</code>，在“插入图片时…”选择<strong>复制到指定路径</strong>，然后在下面写入<code>../images/${filename}</code>（<code>$</code>中的参数是以文件名命名的文件夹），并勾选“优先使用相对路径”。</p>
<p><img src="/images/image-20200518005805958.png" alt="image-20200518005805958"></p>
<p>也可以不通过全局图像设置来设置这个路径，直接在文件的头部写入以下代码块，可以实现同样效果。</p>
<p><img src="/images/image-20200518011551313.png" alt="image-20200518011551313"></p>
<p>之后，每次复制到文本中的图像都会被拷贝到这个文件夹中，并且自动添加相对路径到这个文件夹下：</p>
<p><img src="/images/image-20200518010232133.png" alt="image-20200518010232133"></p>
<p>但很显然，此时的链接并不是我们想要的（我们想要的是<code>![](/images/***/***.png)</code>），前面那个表示返回上一级目录的点点怎么<strong>自动去掉</strong>呢？</p>
<h2 id="设置图片根目录"><a href="#设置图片根目录" class="headerlink" title="设置图片根目录"></a>设置图片根目录</h2><p>打开<code>格式(O)-图像-全局图像设置</code>，选择<code>source</code>文件夹，确定，这时候回到文件中，可以看到在文章头部出现了这么一行字：</p>
<p><img src="/images/image-20200518011202902.png" alt="image-20200518011202902"></p>
<p>然后再次粘贴图片，发现图片的地址为：</p>
<p><img src="/images/image-20200518011245908.png" alt="image-20200518011245908"></p>
<p>这样无论是<strong>本地文件浏览</strong>还是<strong>使用hexo浏览或生成静态文件</strong>，都没有问题了。</p>
<h1 id="Hexo设置模板"><a href="#Hexo设置模板" class="headerlink" title="Hexo设置模板"></a>Hexo设置模板</h1><p>每次创建文件都设置路径显然是个愚蠢的办法，因此我们应该在 hexo 中设置模板文件，在每次创建文章时都加上关于图像的路径设置。</p>
<p>打开<code>$/scaffold/post.md</code>，在头部写入两行配置代码：</p>
<p><img src="/images/image-20200518012225319.png" alt="image-20200518012225319"></p>
<p>创建新文章：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new <span class="string">"test article"</span></span></span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20200518013046980.png" alt="image-20200518013046980"></p>
<p>粘贴图片：</p>
<p><img src="/images/image-20200518013237528.png" alt="image-20200518013237528"></p>
<p>这边出问题了！！！图片被拷贝到了文件夹 <code>&#39;..\images\**&#39;</code>下面了，仔细观察发现创建文件时，<code>typora-copy-images-to</code>后面的参数被自动加上了引号，这是因为hexo会对头信息中的括号{}进行解析，这边加上引号是进行了一定的变量保护。</p>
<p>那还是靠全局设置就好了，不要这个变量了。</p>
<p><img src="/images/image-20200518023523058.png" alt="post.md 模板设置"></p>
<p>插入图片：</p>
<p><img src="/images/image-20200518023604356.png" alt="插入效果"></p>
<p>成功！</p>
<h1 id="如何优雅地部署到GitHub？"><a href="#如何优雅地部署到GitHub？" class="headerlink" title="如何优雅地部署到GitHub？"></a>如何优雅地部署到GitHub？</h1><p>部署到GitHub参考<a href="https://hexo.io/docs/one-command-deployment" target="_blank" rel="noopener">One-Command Deployment</a>，如果自己的ssh-key已经添加到GitHub账户中，直接将<code>ssh</code>链接放在<code>deploy.repo</code>中即可。</p>
<p><img src="/images/image-20200518145358284.png" alt="image-20200518145358284"></p>
<p>但是发布为GitHub Pages时在图片显示方面遇到了一个问题。</p>
<p>比如我们在账户下创建了一个名为<code>blog</code>的仓库专门用来写博客，然后创建<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a>来放置我们的博客页面</p>
<p>那么问题来了，比如我的账户名为 kevin，那么我的 GitHub Pages 的访问地址为 <code>https://whuls.github.io/blog</code>，这与我们设置的图片地址不符（<code>![**.png](/images/images**.png)</code>访问的将会是<code>https://whuls.github.io/images/**.png</code>），我们可以使用特殊插件来完成对相应地址的解析（<a href="https://hexo.io/docs/asset-folders" target="_blank" rel="noopener">Assets Folder</a>），不过使用这个方法导致无法在Typora中预览图片，而且可配置性极差。</p>
<hr>
<p>一个比较好的方法是修改路径，将图片引用路径改成<code>![](/images/blog/images/**.png)</code>，然后把<code>source</code>文件夹命名为<code>blog</code>，接着修改模板文件的头信息<code>typora-root-url:../..</code>，在<code>格式(O)-图像-全局图像设置...</code>处修改<strong>图像插入时../复制到指定目录</strong>的目录为<code>../../blog/images/${filename}</code>，最后，配置<code>_config.yml</code>，将<code>source_dir</code>改成<code>blog</code>，将<code>url</code>改成<code>https://whuls.github.io/blog</code>，<code>root</code>改成<code>/blog/</code>。</p>
<ol>
<li><code>_config.yml</code></li>
</ol>
<p><img src="/images/image-20200518174401914.png" alt="image-20200518174401914"></p>
<p><img src="/images/image-20200518144343316.png" alt="image-20200518144343316"></p>
<ol>
<li>修改模板文件</li>
</ol>
<p><img src="/images/image-20200518144459232.png" alt="image-20200518144459232"></p>
<ol>
<li>全局图像设置</li>
</ol>
<p><img src="/images/image-20200518144538156.png" alt="image-20200518144538156"></p>
<ol>
<li>文件夹重命名</li>
</ol>
<p><img src="/images/image-20200518144744465.png" alt="image-20200518144744465"></p>
<p>之后，每次粘贴图片自动填充的地址为：</p>
<p><img src="/images/image-20200518144908502.png" alt="image-20200518144908502"></p>
<p>在typora中可以正确浏览，部署到GitHub Pages上也可以正常显示（无论是在 archive 总目录下或者单独页面下）</p>
<p><img src="/images/image-20200518151236401.png" alt="在文件目录下查看文章图片"></p>
<p><img src="/images/image-20200518152605438.png" alt="在文件树中查看文章图片"></p>
<h1 id="如何更优雅地部署到GitHub上？"><a href="#如何更优雅地部署到GitHub上？" class="headerlink" title="如何更优雅地部署到GitHub上？"></a>如何更优雅地部署到GitHub上？</h1><p>通过上一步的部署和配置，折腾了一番，又是改文件夹名称又是配置typora的，搞了半天把网站部署到了<code>whuls.github.io/blog</code>上面去了。</p>
<p>那么问题来了，我觉得那个路径<code>/blog</code>越看越不顺眼，能不能直接用<code>whuls.github.io</code>访问博客？</p>
<p>首先要做的，就是把上一步的花里胡哨的改动改回来：</p>
<ol>
<li>把<code>blog</code>文件夹重新改名为<code>source</code></li>
<li><p>把文章中图片引用的位置由<code>![](/images/blog/images/***)</code>改回<code>![](/images/images***)</code></p>
</li>
<li><p>打开typora，把<strong>复制图像到路径</strong>的目录改回<code>../images/${filename}</code></p>
</li>
<li>把每个文件头信息中的<code>typora-root-url</code>由<code>../..</code>改回<code>..</code></li>
<li>修改<code>_config.yml</code>：<ul>
<li><code>url: https://whuls.github.io</code></li>
<li><code>root: /</code></li>
<li>…</li>
<li><code>source_dir: source</code></li>
</ul>
</li>
</ol>
<p>接着我要把这个博客部署到GitHub和Gitee上，预期结果是能够通过<code>whuls.github.io</code>和<code>whuls.gitee.io</code>直接访问我的博客，两个网站的操作略有不同：</p>
<ul>
<li><strong>GitHub</strong>：新建仓库，命名为<code>whuls.github.io</code>（不用手动创建github pages），然后把ssh链接拷贝到<code>_config.yml</code>的<code>deploy.repo</code>字段中</li>
<li><strong>Gitee</strong>：新建仓库，命名为<code>whuls</code>，接着在“服务-Gitee Pages”中启动pages服务，然后把ssh链接拷贝到<code>_config.yml</code>的<code>deploy.repo</code>字段中</li>
</ul>
<p><code>_config.yml</code>文件设置多个部署仓库的方式为：</p>
<p><img src="/images/image-20200518201931100.png" alt="image-20200518201931100"></p>
<p>部署时，首先清空已生成的public</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$hexo</span> clean</span><br></pre></td></tr></table></figure>
<p>然后部署</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$hexo</span> deploy</span><br></pre></td></tr></table></figure>
<hr>
<p>也可以用hexo的监视变动功能，生成文件后立刻部署</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$hexo</span> g <span class="literal">-d</span> <span class="comment"># 等同于hexo generate --deploy</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$hexo</span> d <span class="literal">-g</span> <span class="comment"># 等同于hexo deploy --generate</span></span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://hexo.io/zh-cn/docs/generating" target="_blank" rel="noopener">生成文件|hexo</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Vue CLI 3和ol5搭建基础地图页面</title>
    <url>/2019/06/14/%E4%BD%BF%E7%94%A8Vue-CLI-3%E5%92%8Col5%E6%90%AD%E5%BB%BA%E5%9F%BA%E7%A1%80%E5%9C%B0%E5%9B%BE%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h1 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h1><p>利用Vue的特性，结合Openlayers 5搭建一个单页地图应用。布局草图如图1所示，页面的主体为地图，在地图上添加查询框、工具栏、信息栏等内容。</p>
<p><img src="/images/20190614131223805.png" alt="图1 布局草图"></p>
<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>安装Vue CLI 3</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">npm install -g @vue/cli</span></span><br></pre></td></tr></table></figure>
<p>创建Vue项目，可以使用命令行创建，并在其中配置插件、依赖等</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">vue create hi-story</span></span><br></pre></td></tr></table></figure>
<p>也可以使用GUI创建，按照提示来即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">vue ui</span></span><br></pre></td></tr></table></figure>
<h1 id="修改文件夹结构"><a href="#修改文件夹结构" class="headerlink" title="修改文件夹结构"></a>修改文件夹结构</h1><p>创建后的文档结构如图2所示，主要的代码位于<code>/src</code>文件夹中，该文件夹的格式如图3所示</p>
<p><img src="/images/20190614130503628.png" alt="图2 文档结构"></p>
<p><img src="/images/20190614130703557.png" alt="图3 src文件夹结构"></p>
<p>由于主体只有一个地图，功能全都体现在地图上的对话框，不需要使用多页面跳转的功能，因此可以放弃<code>vue-router</code>，使用模块化开发，搭建地图。首先将<code>App.vue</code>文件改名为<code>HiMap.vue</code>，然后删掉<code>/views</code>、<code>/components/HelloWorld.vue</code>、<code>router.js</code>，在<code>/src/components</code>中添加名为<code>MainMap.vue</code>的文件。修改后的<code>/src</code>文件夹结构如图4所示。</p>
<p><img src="/images/20190614132225138.png" alt="图4 修改后的文件夹结构"></p>
<h1 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h1><p>详细内容如代码所示。</p>
<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> HiMap <span class="keyword">from</span> <span class="string">'./HiMap.vue'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">h</span>) </span>&#123; <span class="keyword">return</span> h(HiMap) &#125;</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>
<p>HiMap.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;main-map&gt;&lt;&#x2F;main-map&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F; Map</span><br><span class="line">import MainMap from &#39;.&#x2F;components&#x2F;MainMap.vue&#39;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HiMap&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MainMap</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">&#125;</span><br><span class="line">html, body, div &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<p>/components/MainMap.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;map&quot; :style&#x3D;&quot;MapStyle&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F; Openlayers based modules</span><br><span class="line">import &#39;ol&#x2F;ol.css&#39;;</span><br><span class="line">import &#123;Map, View&#125; from &#39;ol&#39;;</span><br><span class="line">import TileLayer from &#39;ol&#x2F;layer&#x2F;Tile&#39;;</span><br><span class="line">import OSM from &#39;ol&#x2F;source&#x2F;OSM&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Map Control</span><br><span class="line">import &#123;defaults&#125; from &#39;ol&#x2F;control&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;MainMap&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      Map: &#123;&#125;,</span><br><span class="line">      View: &#123;&#125;,</span><br><span class="line">      Layers: [],</span><br><span class="line">      MapStyle: &#123;</span><br><span class="line">        height: innerHeight + &#39;px&#39;,</span><br><span class="line">        width: innerWidth + &#39;px&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  created() &#123;</span><br><span class="line">    const self &#x3D; this;</span><br><span class="line"></span><br><span class="line">    onresize &#x3D; e &#x3D;&gt; &#123;</span><br><span class="line">      let win &#x3D; e.currentTarget;</span><br><span class="line">      self.MapStyle.height &#x3D; win.innerHeight + &#39;px&#39;;</span><br><span class="line">      self.MapStyle.width &#x3D; win.innerWidth + &#39;px&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  mounted() &#123;</span><br><span class="line">    const self &#x3D; this;</span><br><span class="line">    &#x2F;&#x2F; View</span><br><span class="line">    const center &#x3D; [12175093.67465372, 4209022.808896985];</span><br><span class="line">    const zoom &#x3D; 4;</span><br><span class="line">    const projecton &#x3D; &#39;EPSG:3857&#39;;</span><br><span class="line"></span><br><span class="line">    self.View &#x3D; new View(&#123;</span><br><span class="line">      center: center,</span><br><span class="line">      zoom: zoom,</span><br><span class="line">      projecton: projecton,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Layers</span><br><span class="line">    const osmLayer &#x3D; new TileLayer(&#123;</span><br><span class="line">      source: new OSM(),</span><br><span class="line">      opacity: 1</span><br><span class="line">    &#125;);</span><br><span class="line">    self.Layers.push(osmLayer);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Map</span><br><span class="line">    self.Map &#x3D; new Map(&#123;</span><br><span class="line">      target: &#39;map&#39;,</span><br><span class="line">      view: self.View,</span><br><span class="line">      layers: self.Layers,</span><br><span class="line">      controls: defaults(&#123;</span><br><span class="line">        attribution: false,</span><br><span class="line">        rotate: false,</span><br><span class="line">        zoom: false</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    self.map.on(&#39;click&#39;, event &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&#39;(&#39; + event.coordinate.toString() + &#39;) &#39; + event.map.getView().getZoom());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>在命令行输入如下命令，即可编译运行，之后在浏览器中打开即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd hi-story</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>
<p>或者使用<code>vue ui</code>命令在浏览器中打开GUI，运行项目。</p>
<p>基本地图页面搭建完成：</p>
<p><img src="/images/20190614133231923.png" alt="图5 基本地图页面"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>OpenLayers</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World | Hexo</title>
    <url>/2020/05/17/hello-world-hexo/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 开发环境搭建(Windows)</title>
    <url>/2020/05/23/Java-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-Windows/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想用Java做算法，记录了一下Windows环境下Java开发环境的搭建过程，包括环境变量配置、IDE安装等。</p>
<h1 id="JDK与JRE的下载与安装"><a href="#JDK与JRE的下载与安装" class="headerlink" title="JDK与JRE的下载与安装"></a>JDK与JRE的下载与安装</h1><p>下载地址：</p>
<ul>
<li>Java SE：<a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html</a></li>
</ul>
<p>需要说明的是，下载 JDK（Java SE Development Kit） 要选择8u开头的那个版本，千万别选什么最新版，因为最新版的安装方式及内部API调用方式是新手完全不可控的（具体原因参考知乎的回答：<a href="https://www.zhihu.com/question/360985479/answer/956242314" target="_blank" rel="noopener">Java 14都快出来了，为什么还有那么多人执着于Java 8？ - blindpirate的回答 - 知乎</a>，<a href="https://zhuanlan.zhihu.com/p/78708862" target="_blank" rel="noopener">聊聊 Java8 以后各个版本的新特性 - ZYLAB的文章 - 知乎</a>）。</p>
<p><img src="/images/image-20200523204142290.png" alt="image-20200523204142290"></p>
<p>现在下载Java 8还要登录到oracle？？？</p>
<p><img src="/images/image-20200523205935285.png" alt="image-20200523205935285"></p>
<p>安装这个版本的JDK需要同时安装JRE（Java Runtime Environment），在安装JDK的目录（D:/Java/jdk1.8.0_251）下新建一个文件夹存放JRE（D:/Java/jre1.8.0_251）。安装完成之后，配置环境变量：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>变量名</th>
<th style="text-align:left">值</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>JAVA_HOME</strong></td>
<td style="text-align:left">D:/Java/jdk1.8.0_251</td>
</tr>
<tr>
<td><strong>CLASSPATH</strong></td>
<td style="text-align:left">%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</td>
</tr>
<tr>
<td><strong>Path</strong></td>
<td style="text-align:left">%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</td>
</tr>
</tbody>
</table>
</div>
<h1 id="IntelliJ-IDEA-的安装"><a href="#IntelliJ-IDEA-的安装" class="headerlink" title="IntelliJ IDEA 的安装"></a>IntelliJ IDEA 的安装</h1><p>下载地址：</p>
<ul>
<li>IntelliJ IDEA：<a href="https://www.jetbrains.com/idea/download" target="_blank" rel="noopener">https://www.jetbrains.com/idea/download</a></li>
</ul>
<p>下载Community版本足以满足当前需求，安装包下载后双击安装，选择系统类型、是否添加到环境变量等。</p>
<p><img src="/images/image-20200523233406186.png" alt="image-20200523233406186"></p>
<p>安装完成。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>ArcGIS 10.4安装教程</title>
    <url>/2020/05/24/ArcGIS-10-4%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://malagis.com/arcgis-desktop-10-4-1-full-installation-tutorial.html" target="_blank" rel="noopener">https://malagis.com/arcgis-desktop-10-4-1-full-installation-tutorial.html</a></li>
<li><a href="https://www.jianshu.com/p/5e31ac8c7196" target="_blank" rel="noopener">https://www.jianshu.com/p/5e31ac8c7196</a></li>
</ul>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>联系作者获取安装包。下载后解压得到三个文件：</p>
<p><img src="/images/image-20200525003953372.png" alt="image-20200525003953372"></p>
<h1 id="桌面版（Desktop）安装与配置"><a href="#桌面版（Desktop）安装与配置" class="headerlink" title="桌面版（Desktop）安装与配置"></a>桌面版（Desktop）安装与配置</h1><p>安装顺序为：License, Desktop，</p>
<h2 id="1-License安装"><a href="#1-License安装" class="headerlink" title="1. License安装"></a>1. License安装</h2><p>双击<code>ArcGIS_License_Manager_Windows_1041_151791.exe</code>运行，安装目录填写<code>D:\ArcGIS\ArcGIS10.4.1</code>，执行完毕后会在该目录下创建<code>LicenseManager</code>文件夹，这一步就是把LicenseManager的安装包解压到指定目录。</p>
<p>接着打开<code>Setup.exe</code>文件，这才是正式安装LicenseManager的一步。</p>
<p><img src="/images/image-20200525031015870.png" alt="image-20200525031015870"></p>
<p>选择安装在目录<code>LicenseManager</code>下：</p>
<p><img src="/images/image-20200525031325208.png" alt="image-20200525031325208"></p>
<p>打开<code>License10.4/bin/LSAdmin.exe</code>（安装完成后会自动打开，如果没有自动打开再来这里边打开），关闭许可服务</p>
<p><img src="/images/image-20200525031643290.png" alt="image-20200525031643290"></p>
<h2 id="2-证书替换"><a href="#2-证书替换" class="headerlink" title="2. 证书替换"></a>2. 证书替换</h2><p>解压<code>破解文件.rar</code>，把里边<code>Program Files（x86）/ArcGIS/License10.4/bin</code>中的两个文件<code>ARCGIS.exe</code>和<code>service.txt</code>拷贝到License安装目录<code>D:\ArcGIS\ArcGIS10.4.1\LicenseManager\License10.4\bin</code>下：</p>
<p><img src="/images/image-20200525032003036.png" alt="image-20200525032003036"></p>
<p>接着重新打开<code>LSAdmin.exe</code>，重启服务并重新读取许可：</p>
<p><img src="/images/image-20200525032519533.png" alt="image-20200525032519533"></p>
<h2 id="3-Desktop安装"><a href="#3-Desktop安装" class="headerlink" title="3. Desktop安装"></a>3. Desktop安装</h2><p>运行下载解压的三个文件中的剩下一个文件：<code>ArcGIS_Desktop_1041_zh_CN_151738.exe</code>，选择安装目录依旧是<code>D:\ArcGIS\ArcGIS10.4.1</code>，这一步依旧是解压安装程序和数据到<code>Desktop_Chinese_CN</code>中：</p>
<p><img src="/images/image-20200525033006169.png" alt="image-20200525033006169"></p>
<p>双击<code>Setup.exe</code>执行安装程序，根据需要选择<strong>完全安装</strong>或<strong>自定义安装</strong>，如果不知道自定义要装什么，就直接选<strong>完全安装</strong>。</p>
<p>目录输入<code>D:\ArcGIS\ArcGIS10.4.1\Desktop_Chinese_CN\</code>，Python27的文件夹输入<code>D:\ArcGIS\ArcGIS10.4.1\Desktop_Chinese_CN\Python27\</code>。</p>
<p><img src="/images/image-20200525033218193.png" alt="image-20200525033218193"></p>
<p>安装完成后（大约10min），选择“Advanced(ArcInfo)浮动版”，许可管理器中输入“localhost”，点击确定：</p>
<p><img src="/images/image-20200525034829634.png" alt="image-20200525034829634"></p>
<p>在<strong>可用性</strong>这边，就可以看到所有的产品的期限都是“永久”：</p>
<p><img src="/images/image-20200525034944678.png" alt="image-20200525034944678"></p>
<p>点击确定后，自动弹出安装中文包的对话框，待其安装完毕后点击确定即可。</p>
<p><img src="/images/image-20200525035048757.png" alt="image-20200525035048757"></p>
<h2 id="4-dll文件替换"><a href="#4-dll文件替换" class="headerlink" title="4. dll文件替换"></a>4. dll文件替换</h2><p>打开桌面版的安装目录下的bin目录：<code>D:\ArcGIS\ArcGIS10.4.1\Desktop_Chinese_CN\Desktop10.4\bin</code></p>
<p><img src="/images/image-20200525035244752.png" alt="image-20200525035244752"></p>
<p>将破解文件里头<code>Program Files (x86)\ArcGIS\Desktop10.4\bin</code>目录下的<code>AfCore.dll</code>拷贝到桌面版安装目录中，替换掉里面的同名文件。</p>
<p>此时，ArcGIS10.4.1就算安装并配置完成了。打开安装目录下的ArcMap.exe，即可开始使用：</p>
<p><img src="/images/image-20200525035529843.png" alt="image-20200525035529843"></p>
<h1 id="创建数据存储空间"><a href="#创建数据存储空间" class="headerlink" title="创建数据存储空间"></a>创建数据存储空间</h1><p>在<code>D:\ArcGIS</code>下创建目录data（<code>D:\ArcGIS\data</code>）作为我们存放地理数据、项目数据的文件夹</p>
<p>打开ArcMap，在弹出的对话框中，手动配置默认地理数据库。点击“连接到文件夹”，选择<code>D:\ArcGIS\data</code>，然后在这下面新建一个名为“WorldMap.gdb”的文件地理数据库，点击添加与确定。</p>
<p><img src="/images/image-20200525042205894.png" alt="image-20200525042205894"></p>
<p>之后创建一个文档，按下Ctrl + S，命名为世界地图保存，存放在<code>D:\ArcGIS\data</code>下</p>
<p><img src="/images/image-20200525043411454.png" alt="image-20200525043411454"></p>
<p><img src="/images/image-20200525042512027.png" alt="image-20200525042512027"></p>
<p>接着打开右侧的“目录”，打开GIS服务器，双击“添加WMTS服务器”，在弹出的对话框中输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/WMTS/1.0.0/WMTSCapabilities.xml</span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20200525044851528.png" alt="image-20200525044851528"></p>
<p>然后把下面的“World_Imagery”拖到左侧的图层中，即可在主视图中浏览添加的图层信息：</p>
<p><img src="/images/image-20200525045106417.png" alt="image-20200525045106417"></p>
]]></content>
      <categories>
        <category>ArcGIS</category>
      </categories>
      <tags>
        <tag>ArcGIS</tag>
      </tags>
  </entry>
  <entry>
    <title>【转】hexo是怎么工作的</title>
    <url>/2020/05/23/%E3%80%90%E8%BD%AC%E3%80%91hexo%E6%98%AF%E6%80%8E%E4%B9%88%E5%B7%A5%E4%BD%9C%E7%9A%84/</url>
    <content><![CDATA[<p><strong>转载信息</strong></p>
<p>原文链接：<a href="http://coderunthings.com/2017/08/20/howhexoworks/" target="_blank" rel="noopener">http://coderunthings.com/2017/08/20/howhexoworks/</a></p>
<p>作者：<a href="https://github.com/buildAll" target="_blank" rel="noopener">赵彪</a></p>
<p><img src="/images/hexo.png" alt="image-20200524154810277"></p>
<p>你可能用过hexo(或者jekyll)来搭建自己的博客网站。通常我们在安装、配置完成hexo之后，借助hexo，一般通过以下步骤，就可以完成一篇博客的编写及发布，真是方便极了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init           <span class="comment"># 创建一个新的hexo项目</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo new mynewblog  <span class="comment"># 新建一篇标题为mynewblog的文章</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo server         <span class="comment"># 为hexo在本地起一个http server, 然后通过浏览器访问博客</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo generate       <span class="comment"># 生成将要发布的博客网站包含html在内的静态资源</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy         <span class="comment"># 将generate的结果发布到_config.yml中指定的仓库</span></span></span><br></pre></td></tr></table></figure>
<p>可是，从hexo init到hexo deploy中间发生了什么呢？为了搞清楚这一过程、理解hexo的工作原理，本文将试着回答以下问题:</p>
<ul>
<li>命令行中的hexo是什么</li>
<li>hexo是怎么将我们写好的markdown转换成html的</li>
<li>hexo插件是如何工作的</li>
<li>本地的hexo项目和git page有什么关系</li>
</ul>
<p>本文<strong>不是</strong>:</p>
<ul>
<li>hexo的安装、使用教程</li>
<li>git page的使用教程</li>
</ul>
<h2 id="命令行中的hexo是什么"><a href="#命令行中的hexo是什么" class="headerlink" title="命令行中的hexo是什么?"></a>命令行中的hexo是什么?</h2><p><a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">hexo</a>项目在github上已经有超过17k的star了，但是你知道吗，日常我们在命令行”操作”hexo时所输入的<strong>hexo</strong>(例如hexo init)并不是这个17k个star的项目! 是的，我们在命令行中所输入的”hexo”实际是<a href="https://github.com/hexojs/hexo-cli/tree/master/lib" target="_blank" rel="noopener"><strong>hexo-cli</strong></a>项目，该项目在github上的star还不足50个。</p>
<blockquote>
<p>hexo可以粗略分为三个子项目，分别是:</p>
<ul>
<li>hexo-cli</li>
<li>hexo (下文中用hexo core来指代)</li>
<li>hexo plugins</li>
</ul>
<p>其中hexo plugins不是指某一个单独的项目，而是泛指所有的hexo plugin项目。</p>
<p>请看下图:<br><img src="/images/hexo_projects.png" alt="img"><br>让我们结合这张图来大致看看这三个项目的作用(下面的链接均是指向Github中相关的源码):</p>
<ul>
<li><strong>hexo-cli</strong>: hexo命令行项目，作用是:<ol>
<li>启动hexo命令(进程)，及其参数<a href="https://github.com/hexojs/hexo-cli/blob/5e0969ffa64dec427428a245ab2d65beaf23123b/lib/hexo.js#L49" target="_blank" rel="noopener">解析</a>机制。每次我们输入’hexo xxx’命令后，都会通过node调用hexo-cli中的<a href="https://github.com/hexojs/hexo-cli/blob/5e0969ffa64dec427428a245ab2d65beaf23123b/lib/hexo.js#L13" target="_blank" rel="noopener">entry函数</a>(比如，可以把’hexo init’视为’node hexo-cli/entry.js init’)</li>
<li>实现hexo命令的<a href="https://github.com/hexojs/hexo-cli/tree/master/lib/console" target="_blank" rel="noopener">三个初始参数(功能)</a>: init / version / help</li>
<li><a href="https://github.com/hexojs/hexo-cli/blob/5e0969ffa64dec427428a245ab2d65beaf23123b/lib/hexo.js#L85" target="_blank" rel="noopener">加载</a>hexo核心模块，并<a href="https://github.com/hexojs/hexo-cli/blob/5e0969ffa64dec427428a245ab2d65beaf23123b/lib/hexo.js#L47" target="_blank" rel="noopener">初始化</a></li>
</ol>
</li>
<li><strong>hexo core</strong>: hexo核心，他的主要作用如下:<ol>
<li>实现了hexo功能<a href="https://github.com/hexojs/hexo/blob/master/lib/hexo/index.js#L59" target="_blank" rel="noopener">扩展对象</a></li>
<li>实现了hexo核心功能, 如new, publish, generate等（其实是一些hexo插件，下文中会详细分析）</li>
</ol>
</li>
<li><strong>hexo plugins</strong>: 指一些能够扩展hexo的插件。插件可以按功能分成两类:<ol>
<li>扩展hexo命令的参数，如<a href="https://github.com/hexojs/hexo-server" target="_blank" rel="noopener">hexo-server</a>(安装这个插件以后才能使用hexo server命令)</li>
<li>扩展hexo解析文件的”能力”，如增加jade模版解析功能的<a href="https://github.com/hexojs/hexo-renderer-jade" target="_blank" rel="noopener">hexo-render-jade</a>插件</li>
</ol>
</li>
</ul>
</blockquote>
<h2 id="从markdown到html的旅程"><a href="#从markdown到html的旅程" class="headerlink" title="从markdown到html的旅程"></a>从markdown到html的旅程</h2><p>简单来说，hexo中，从markdown到html的generate过程中做了两件事：</p>
<ol>
<li>模板渲染</li>
<li>模板渲染</li>
</ol>
<p>是的，就是这样，就是两次模板渲染。只不过两次渲染的输入、渲染模板的引擎、输出不一样。此处应该有一个表格：</p>
<p><img src="/images/image-20200524155459277.png" alt="image-20200524155459277"></p>
<p>还得有一张图:</p>
<p><img src="/images/image-20200524155523752.png" alt="image-20200524155523752"></p>
<blockquote>
<p>对上面表格和图的说明:</p>
<ul>
<li>hexo core在generate的过程中会产生一个对象，我们在这里把这个对象称为article。第一次渲染的主要目的就是给这个对象添加title,content等属性。其中:<ol>
<li>article.title, article.date, article.tags, article.categories等属性来自yml front的部分</li>
<li>article.content是markdown文章解析后的html片段</li>
</ol>
</li>
<li>hexo项目目录下包含三个子目录，<ol>
<li>source目录，写博客的主要工作目录。这个目录下存放的是我们的markdown文章以及js, images, css</li>
<li>themes目录，主题目录，定义了即将生成的html的layout, 和html中需要加载的css, js, images</li>
<li>public目录, hexo generate的最终输出目录。里面包含了整个博客网站的html, css, js, images</li>
</ol>
</li>
<li>第二次渲染，需要引入对应模板文件格式的插件，如.ejs文件就需要使用hexo-render-ejs插件，.jade文件需要使用hexo-render-jade插件，而.sass文件则需要hexo-render-sass插件来转换成css文件。hexo的这一设计有点类似webpack中的loader。</li>
</ul>
</blockquote>
<h2 id="hexo插件是如何工作的"><a href="#hexo插件是如何工作的" class="headerlink" title="hexo插件是如何工作的"></a>hexo插件是如何工作的</h2><p>hexo和webpack还有一点类似的地方就是插件驱动理念。即hexo(和webpack)是先实现一套(插件)扩展系统，然后再往扩展系统中添加插件来实现自身的功能。即我们日常使用的hexo init, hexo new，hexo generate等等功能都是通过一个个插件(其实就是一个个function)实现的。</p>
<blockquote>
<p>具体来讲就是:</p>
<ol>
<li><a href="https://github.com/hexojs/hexo/blob/master/lib/hexo/index.js#L59" target="_blank" rel="noopener">hexo.extend</a>这个对象的每个属性都是一个用来绑定(特定)插件的对象。（所谓”绑定”，其实就是对象的register方法）</li>
<li>hexo<a href="https://github.com/hexojs/hexo/blob/master/lib/hexo/index.js#L153" target="_blank" rel="noopener">初始化</a>过程中先加载内部插件，再加载外部插件</li>
</ol>
<p>而这些插件的功能分为两大类: 命令行插件和generate过程相关功能，例如：</p>
<ul>
<li>命令行插件, hexo <a href="https://github.com/hexojs/hexo/blob/master/lib/plugins/console/index.js#L47" target="_blank" rel="noopener">new</a>, 是在hexo.extend.console对象上绑定的一个<a href="https://github.com/hexojs/hexo/blob/master/lib/plugins/console/new.js" target="_blank" rel="noopener">插件</a></li>
<li>generate过程相关的插件，如上文提到的往article对象添加title,content等属性的功能，是通过往hexo.extend.processer对象上<a href="https://github.com/hexojs/hexo/blob/master/lib/plugins/processor/index.js#L13" target="_blank" rel="noopener">绑定</a>post插件来<a href="https://github.com/hexojs/hexo/blob/master/lib/plugins/processor/post.js#L52" target="_blank" rel="noopener">实现</a>的</li>
</ul>
<p>所以，当我们想自己动手写插件时，就是像hexo官网给出的<a href="https://hexo.io/api/console.html" target="_blank" rel="noopener">这样</a>,调用某个对象的register方法，如hexo.extend.console.register。</p>
</blockquote>
<h2 id="hexo和git-page"><a href="#hexo和git-page" class="headerlink" title="hexo和git page"></a>hexo和git page</h2><p><img src="/images/image-20200524155614887.png" alt="image-20200524155614887"></p>
<p>如上图，(用户通过浏览器访问到的)git page上的博客网站其实是hexo generate之后生成的public目录下的内容。</p>
<blockquote>
<p>所以，一个hexo博客项目应该有两个仓库:</p>
<ol>
<li>(基于hexo init结果的)<a href="https://github.com/buildAll/blogsrc" target="_blank" rel="noopener">博客编写仓库</a>。可以把这个项目看成一个代码库，用来”开发”博客网站(包含写博客，生成博客等任务)</li>
<li>存放(hexo generate结果的)<a href="https://github.com/buildAll/buildall.github.io" target="_blank" rel="noopener">public目录仓库</a>。这个项目是”只读”的，我们不会直接修改这个仓库的内容，我们也不会对这个仓库直接进行git pull、git commit、git push等常规操作。这个仓库的内容就是public目下的内容，即是通过hexo generate产生、hexo deploy提交的。</li>
</ol>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>hexo简洁、强大的功能来自于自身优雅的系统设计:</p>
<ol>
<li>hexo进程启动、hexo核心对象封装、插件系统分别独立</li>
<li>自身采用插件驱动，生来就具备高可扩展性</li>
</ol>
<p>希望读完这篇文章你能对hexo本身有更深入的理解，也能通过hexo的代码设计，对自己以后写出更优雅的代码有所启发。</p>
<p>对于本文或者hexo有任何问题或评论，请到<a href="https://github.com/buildAll/buildall.github.io/issues/3" target="_blank" rel="noopener">这个</a>git issue页面给我留言吧。</p>
<p><em>赵彪原创，请随意转载，但务必保留作者署名和原文链接</em></p>
<p><img src="/images/image-20200524155700987.png" alt="image-20200524155700987"></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下编译OpenCV-3.1.0 + 扩展opencv_contrib</title>
    <url>/2020/06/14/Windows%E4%B8%8B%E7%BC%96%E8%AF%91OpenCV-3-1-0-%E6%89%A9%E5%B1%95opencv-contrib/</url>
    <content><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>使用OpenCV 3.1.0进行图像处理时，需要用到surf、sift等匹配算法，在官网下载的安装包解压得到的工具库中，不包含这些算法库（版权还是别的原因），需要自己编译。如果使用2.x版本，这些算法库包含在nonfree中，在3.0之后的版本中，这些算法库包含在xfeature2d中。</p>
<p>首先下载OpenCV-3.1.0的源代码，官网的下载页面： <a href="https://opencv.org/releases/page/4/" target="_blank" rel="noopener">https://opencv.org/releases/page/4/</a> ，或者直接点击链接下载： <a href="https://github.com/opencv/opencv/archive/3.1.0.zip" target="_blank" rel="noopener">https://github.com/opencv/opencv/archive/3.1.0.zip</a> ，仓库地址：<a href="https://github.com/opencv/opencv/releases/tag/3.1.0" target="_blank" rel="noopener">https://github.com/opencv/opencv/releases/tag/3.1.0</a></p>
<p><img src="/images/image-20200613224750516.png" alt="image-20200613224750516" style="zoom:50%;" /></p>
<p>然后我们需要下载OpenCV的额外模块（Extra Modules），仓库地址：<a href="https://github.com/opencv/opencv_contrib" target="_blank" rel="noopener">https://github.com/opencv/opencv_contrib</a> ，opencv_contrib的版本需要适配OpenCV的版本，在release页面（<a href="https://github.com/opencv/opencv_contrib/releases?after=3.4.1" target="_blank" rel="noopener">https://github.com/opencv/opencv_contrib/releases?after=3.4.1</a> ）找到3.1.0（<a href="https://github.com/opencv/opencv_contrib/releases/tag/3.1.0" target="_blank" rel="noopener">https://github.com/opencv/opencv_contrib/releases/tag/3.1.0</a> ），下载源代码</p>
<p><img src="/images/image-20200613230931992.png" alt="image-20200613230931992" style="zoom:75%;" /></p>
<p>将下载的两个安装包解压到当前文件夹</p>
<p><img src="/images/image-20200613231301479.png" alt="image-20200613231301479"></p>
<h1 id="配置编译生成VS工程文件"><a href="#配置编译生成VS工程文件" class="headerlink" title="配置编译生成VS工程文件"></a>配置编译生成VS工程文件</h1><h2 id="编译器的选择：VS2013-or-VS2015？"><a href="#编译器的选择：VS2013-or-VS2015？" class="headerlink" title="编译器的选择：VS2013 or VS2015？"></a>编译器的选择：VS2013 or VS2015？</h2><p>编译需要用到CMake（下载地址：<a href="https://cmake.org/download/" target="_blank" rel="noopener">https://cmake.org/download/</a> ），同时要求电脑上装有VS或Qt（作为编译器使用）。打开CMake，把opencv-3.1.0里边的<strong>CMakeLists.txt</strong>拖到CMake中，然后把构建目录的文件夹改为opencv-3.1.0-build，如图：</p>
<p><img src="/images/image-20200613231734871.png" alt="image-20200613231734871"></p>
<p>点击Configure进行编译（提示创建文件夹，选“是”），编译器选择目标IDE（如VS2013、VS2015）。</p>
<p><img src="/images/image-20200613231925721.png" alt="image-20200613231925721"></p>
<blockquote>
<p>这影响的是最终生成的dll适配的平台版本，如果选择Visual Studio 12 2013，最终在install文件夹中将会生成vc12下的dll和lib，这个版本对应VS工程的平台工具集（vc12对应v120，vc14对应v140，可以在工程的属性页查看并配置）。</p>
<p><img src="/images/image-20200613232130239.png" alt="image-20200613232130239"></p>
<p><img src="/images/image-20200613232325205.png" alt="image-20200613232325205"></p>
</blockquote>
<h2 id="第一个错误：FFMpeg下载失败"><a href="#第一个错误：FFMpeg下载失败" class="headerlink" title="第一个错误：FFMpeg下载失败"></a>第一个错误：FFMpeg下载失败</h2><blockquote>
<p>解决参考：<a href="https://blog.csdn.net/yiyuehuan/article/details/52951574" target="_blank" rel="noopener">https://blog.csdn.net/yiyuehuan/article/details/52951574</a></p>
</blockquote>
<p>不出意外的话此时会报错：Error in configuration process, project files may be invalid.</p>
<p><img src="/images/image-20200613232721767.png" alt="image-20200613232721767" style="zoom: 80%;" /></p>
<p>检查错误发现：</p>
<p><img src="/images/image-20200613233023105.png" alt="image-20200613233023105" style="zoom:80%;" /></p>
<p>错误原因：FFMpeg下载失败，有可能是下载链接失效或者无法访问到远程仓库地址（编译旧版本C++库的时候可能存在类似问题），我们首先定位到第三方库的下载配置处：<strong>opencv-3.1.0\3rdparty\ffmpeg</strong>，打开ffmpeg.cmake</p>
<p><img src="/images/image-20200613233557849.png" alt="image-20200613233557849" style="zoom:80%;" /></p>
<p>我们先打开第三方库的远程仓库链接（<a href="https://github.com/opencv/opencv_3rdparty" target="_blank" rel="noopener">https://github.com/opencv/opencv_3rdparty</a> ），找到分支master_20150703（<a href="https://github.com/opencv/opencv_3rdparty/tree/ffmpeg/master_20150703" target="_blank" rel="noopener">https://github.com/opencv/opencv_3rdparty/tree/ffmpeg/master_20150703</a> ），把需要的三个文件手动下载下来，并且将ffmpeg.cmake中的三条下载命令注释掉</p>
<p><img src="/images/image-20200613233920721.png" alt="image-20200613233920721"></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Binary branch name: ffmpeg/master_20150703</span></span><br><span class="line"><span class="comment"># Binaries were created for OpenCV: e379ea6ed60b0caad4d4e3eea096e9d850cb8c86</span></span><br><span class="line"><span class="keyword">set</span>(FFMPEG_BINARIES_COMMIT <span class="string">"8aeefc4efe3215de89d8c7e114ae6f7a6091b8eb"</span>)</span><br><span class="line"><span class="keyword">set</span>(FFMPEG_FILE_HASH_BIN32 <span class="string">"89c783eee1c47bfc733f08334ec2e31c"</span>)</span><br><span class="line"><span class="keyword">set</span>(FFMPEG_FILE_HASH_BIN64 <span class="string">"35fe6ccdda6d7a04e9056b0d73b98e76"</span>)</span><br><span class="line"><span class="keyword">set</span>(FFMPEG_FILE_HASH_CMAKE <span class="string">"8606f947a780071f8fcce8cbf39ceef5"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(FFMPEG_DOWNLOAD_URL <span class="variable">$&#123;OPENCV_FFMPEG_URL&#125;</span>;$ENV&#123;OPENCV_FFMPEG_URL&#125;;https://raw.githubusercontent.com/Itseez/opencv_3rdparty/<span class="variable">$&#123;FFMPEG_BINARIES_COMMIT&#125;</span>/ffmpeg/)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ocv_download(PACKAGE opencv_ffmpeg.dll</span></span><br><span class="line">             <span class="comment"># HASH $&#123;FFMPEG_FILE_HASH_BIN32&#125;</span></span><br><span class="line">             <span class="comment"># URL $&#123;FFMPEG_DOWNLOAD_URL&#125;</span></span><br><span class="line">             <span class="comment"># DESTINATION_DIR $&#123;CMAKE_CURRENT_LIST_DIR&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ocv_download(PACKAGE opencv_ffmpeg_64.dll</span></span><br><span class="line">             <span class="comment"># HASH $&#123;FFMPEG_FILE_HASH_BIN64&#125;</span></span><br><span class="line">             <span class="comment"># URL $&#123;FFMPEG_DOWNLOAD_URL&#125;</span></span><br><span class="line">             <span class="comment"># DESTINATION_DIR $&#123;CMAKE_CURRENT_LIST_DIR&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ocv_download(PACKAGE ffmpeg_version.cmake</span></span><br><span class="line">             <span class="comment"># HASH $&#123;FFMPEG_FILE_HASH_CMAKE&#125;</span></span><br><span class="line">             <span class="comment"># URL $&#123;FFMPEG_DOWNLOAD_URL&#125;</span></span><br><span class="line">             <span class="comment"># DESTINATION_DIR $&#123;CMAKE_CURRENT_LIST_DIR&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$&#123;CMAKE_CURRENT_LIST_DIR&#125;</span>/ffmpeg_version.cmake)</span><br></pre></td></tr></table></figure>
<p>下载完成并注释后，重新打开CMake，点击Configure</p>
<h2 id="第二个错误：ippicv下载失败"><a href="#第二个错误：ippicv下载失败" class="headerlink" title="第二个错误：ippicv下载失败"></a>第二个错误：ippicv下载失败</h2><p>第二个错误出现了：</p>
<p><img src="/images/image-20200613234117809.png" alt="image-20200613234117809"></p>
<p>同样的方法，定位到<strong>opencv-3.1.0\3rdparty\ippicv</strong>，打开downloader.cmake，查看我们需要手动下载的文件。文件中的意思是，当编译的平台为WIN32且不为ARM时，获取包名为ippicv_windows_20151201.zip的文件，包中的子目录名为ippicv_win；ICV的解压目录为/unpack。</p>
<p><img src="/images/image-20200613235211128.png" alt="image-20200613235211128"></p>
<p>来到远程仓库（<a href="https://github.com/opencv/opencv_3rdparty/tree/ippicv/master_20151201" target="_blank" rel="noopener">https://github.com/opencv/opencv_3rdparty/tree/ippicv/master_20151201</a> ），在这里面发现了我们需要的文件：</p>
<p><img src="/images/image-20200613235057887.png" alt="image-20200613235057887" style="zoom:67%;" /></p>
<p>我们在downloader.cmake的同级目录下创建文件夹unpack（cmake文件中指定的解压目录），将下载的ippicv_windows_20151201.zip下载到这个文件夹中，然后解压到当前文件夹（根据cmake文件中的语句进行操作），得到如下目录结构：</p>
<p><img src="/images/image-20200614000241805.png" alt="image-20200614000241805"></p>
<p>接着回头把downloader.cmake中的下载语句注释掉，注释后的文件文本内容为：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The script downloads ICV package</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># On return this will define:</span></span><br><span class="line"><span class="comment"># OPENCV_ICV_PATH - path to unpacked downloaded package</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>(_icv_downloader)</span><br><span class="line">  <span class="comment"># Commit SHA in the opencv_3rdparty repo</span></span><br><span class="line">  <span class="keyword">set</span>(IPPICV_BINARIES_COMMIT <span class="string">"81a676001ca8075ada498583e4166079e5744668"</span>)</span><br><span class="line">  <span class="comment"># Define actual ICV versions</span></span><br><span class="line">  <span class="keyword">if</span>(APPLE)</span><br><span class="line">    <span class="keyword">set</span>(OPENCV_ICV_PACKAGE_NAME <span class="string">"ippicv_macosx_20151201.tgz"</span>)</span><br><span class="line">    <span class="keyword">set</span>(OPENCV_ICV_PACKAGE_HASH <span class="string">"4ff1fde9a7cfdfe7250bfcd8334e0f2f"</span>)</span><br><span class="line">    <span class="keyword">set</span>(OPENCV_ICV_PLATFORM <span class="string">"macosx"</span>)</span><br><span class="line">    <span class="keyword">set</span>(OPENCV_ICV_PACKAGE_SUBDIR <span class="string">"/ippicv_osx"</span>)</span><br><span class="line">  <span class="keyword">elseif</span>(UNIX)</span><br><span class="line">    <span class="keyword">if</span>(ANDROID <span class="keyword">AND</span> <span class="keyword">NOT</span> (ANDROID_ABI <span class="keyword">STREQUAL</span> x86 <span class="keyword">OR</span> ANDROID_ABI <span class="keyword">STREQUAL</span> x86_64))</span><br><span class="line">      <span class="keyword">return</span>()</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line">    <span class="keyword">set</span>(OPENCV_ICV_PACKAGE_NAME <span class="string">"ippicv_linux_20151201.tgz"</span>)</span><br><span class="line">    <span class="keyword">set</span>(OPENCV_ICV_PACKAGE_HASH <span class="string">"808b791a6eac9ed78d32a7666804320e"</span>)</span><br><span class="line">    <span class="keyword">set</span>(OPENCV_ICV_PLATFORM <span class="string">"linux"</span>)</span><br><span class="line">    <span class="keyword">set</span>(OPENCV_ICV_PACKAGE_SUBDIR <span class="string">"/ippicv_lnx"</span>)</span><br><span class="line">  <span class="keyword">elseif</span>(WIN32 <span class="keyword">AND</span> <span class="keyword">NOT</span> ARM)</span><br><span class="line">    <span class="keyword">set</span>(OPENCV_ICV_PACKAGE_NAME <span class="string">"ippicv_windows_20151201.zip"</span>)</span><br><span class="line">    <span class="keyword">set</span>(OPENCV_ICV_PACKAGE_HASH <span class="string">"04e81ce5d0e329c3fbc606ae32cad44d"</span>)</span><br><span class="line">    <span class="keyword">set</span>(OPENCV_ICV_PLATFORM <span class="string">"windows"</span>)</span><br><span class="line">    <span class="keyword">set</span>(OPENCV_ICV_PACKAGE_SUBDIR <span class="string">"/ippicv_win"</span>)</span><br><span class="line">  <span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">return</span>() <span class="comment"># Not supported</span></span><br><span class="line">  <span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span>(OPENCV_ICV_UNPACK_PATH <span class="string">"$&#123;CMAKE_CURRENT_LIST_DIR&#125;/unpack"</span>)</span><br><span class="line">  <span class="keyword">set</span>(OPENCV_ICV_PATH <span class="string">"$&#123;OPENCV_ICV_UNPACK_PATH&#125;$&#123;OPENCV_ICV_PACKAGE_SUBDIR&#125;"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># if(DEFINED OPENCV_ICV_PACKAGE_DOWNLOADED</span></span><br><span class="line">       <span class="comment"># AND OPENCV_ICV_PACKAGE_DOWNLOADED STREQUAL OPENCV_ICV_PACKAGE_HASH</span></span><br><span class="line">       <span class="comment"># AND EXISTS $&#123;OPENCV_ICV_PATH&#125;)</span></span><br><span class="line">    <span class="comment"># # Package has been downloaded and checked by the previous build</span></span><br><span class="line">    <span class="comment"># set(OPENCV_ICV_PATH "$&#123;OPENCV_ICV_PATH&#125;" PARENT_SCOPE)</span></span><br><span class="line">    <span class="comment"># return()</span></span><br><span class="line">  <span class="comment"># else()</span></span><br><span class="line">    <span class="comment"># if(EXISTS $&#123;OPENCV_ICV_UNPACK_PATH&#125;)</span></span><br><span class="line">      <span class="comment"># message(STATUS "ICV: Removing previous unpacked package: $&#123;OPENCV_ICV_UNPACK_PATH&#125;")</span></span><br><span class="line">      <span class="comment"># file(REMOVE_RECURSE $&#123;OPENCV_ICV_UNPACK_PATH&#125;)</span></span><br><span class="line">    <span class="comment"># endif()</span></span><br><span class="line">  <span class="comment"># endif()</span></span><br><span class="line">  <span class="comment"># unset(OPENCV_ICV_PACKAGE_DOWNLOADED CACHE)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># set(OPENCV_ICV_PACKAGE_ARCHIVE "$&#123;CMAKE_CURRENT_LIST_DIR&#125;/downloads/$&#123;OPENCV_ICV_PLATFORM&#125;-$&#123;OPENCV_ICV_PACKAGE_HASH&#125;/$&#123;OPENCV_ICV_PACKAGE_NAME&#125;")</span></span><br><span class="line">  <span class="comment"># get_filename_component(OPENCV_ICV_PACKAGE_ARCHIVE_DIR "$&#123;OPENCV_ICV_PACKAGE_ARCHIVE&#125;" PATH)</span></span><br><span class="line">  <span class="comment"># if(EXISTS "$&#123;OPENCV_ICV_PACKAGE_ARCHIVE&#125;")</span></span><br><span class="line">    <span class="comment"># file(MD5 "$&#123;OPENCV_ICV_PACKAGE_ARCHIVE&#125;" archive_md5)</span></span><br><span class="line">    <span class="comment"># if(NOT archive_md5 STREQUAL OPENCV_ICV_PACKAGE_HASH)</span></span><br><span class="line">      <span class="comment"># message(WARNING "ICV: Local copy of ICV package has invalid MD5 hash: $&#123;archive_md5&#125; (expected: $&#123;OPENCV_ICV_PACKAGE_HASH&#125;)")</span></span><br><span class="line">      <span class="comment"># file(REMOVE "$&#123;OPENCV_ICV_PACKAGE_ARCHIVE&#125;")</span></span><br><span class="line">      <span class="comment"># file(REMOVE_RECURSE "$&#123;OPENCV_ICV_PACKAGE_ARCHIVE_DIR&#125;")</span></span><br><span class="line">    <span class="comment"># endif()</span></span><br><span class="line">  <span class="comment"># endif()</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># if(NOT EXISTS "$&#123;OPENCV_ICV_PACKAGE_ARCHIVE&#125;")</span></span><br><span class="line">    <span class="comment"># if(NOT DEFINED OPENCV_ICV_URL)</span></span><br><span class="line">      <span class="comment"># if(DEFINED ENV&#123;OPENCV_ICV_URL&#125;)</span></span><br><span class="line">        <span class="comment"># set(OPENCV_ICV_URL $ENV&#123;OPENCV_ICV_URL&#125;)</span></span><br><span class="line">      <span class="comment"># else()</span></span><br><span class="line">        <span class="comment"># set(OPENCV_ICV_URL "https://raw.githubusercontent.com/Itseez/opencv_3rdparty/$&#123;IPPICV_BINARIES_COMMIT&#125;/ippicv")</span></span><br><span class="line">      <span class="comment"># endif()</span></span><br><span class="line">    <span class="comment"># endif()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># file(MAKE_DIRECTORY $&#123;OPENCV_ICV_PACKAGE_ARCHIVE_DIR&#125;)</span></span><br><span class="line">    <span class="comment"># message(STATUS "ICV: Downloading $&#123;OPENCV_ICV_PACKAGE_NAME&#125;...")</span></span><br><span class="line">    <span class="comment"># file(DOWNLOAD "$&#123;OPENCV_ICV_URL&#125;/$&#123;OPENCV_ICV_PACKAGE_NAME&#125;" "$&#123;OPENCV_ICV_PACKAGE_ARCHIVE&#125;"</span></span><br><span class="line">         <span class="comment"># TIMEOUT 600 STATUS __status</span></span><br><span class="line">         <span class="comment"># EXPECTED_MD5 $&#123;OPENCV_ICV_PACKAGE_HASH&#125;)</span></span><br><span class="line">    <span class="comment"># if(NOT __status EQUAL 0)</span></span><br><span class="line">      <span class="comment"># message(FATAL_ERROR "ICV: Failed to download ICV package: $&#123;OPENCV_ICV_PACKAGE_NAME&#125;. Status=$&#123;__status&#125;")</span></span><br><span class="line">    <span class="comment"># else()</span></span><br><span class="line">      <span class="comment"># # Don't remove this code, because EXPECTED_MD5 parameter doesn't fail "file(DOWNLOAD)" step</span></span><br><span class="line">      <span class="comment"># # on wrong hash</span></span><br><span class="line">      <span class="comment"># file(MD5 "$&#123;OPENCV_ICV_PACKAGE_ARCHIVE&#125;" archive_md5)</span></span><br><span class="line">      <span class="comment"># if(NOT archive_md5 STREQUAL OPENCV_ICV_PACKAGE_HASH)</span></span><br><span class="line">        <span class="comment"># message(FATAL_ERROR "ICV: Downloaded copy of ICV package has invalid MD5 hash: $&#123;archive_md5&#125; (expected: $&#123;OPENCV_ICV_PACKAGE_HASH&#125;)")</span></span><br><span class="line">      <span class="comment"># endif()</span></span><br><span class="line">    <span class="comment"># endif()</span></span><br><span class="line">  <span class="comment"># endif()</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ocv_assert(EXISTS "$&#123;OPENCV_ICV_PACKAGE_ARCHIVE&#125;")</span></span><br><span class="line">  <span class="comment"># ocv_assert(NOT EXISTS "$&#123;OPENCV_ICV_UNPACK_PATH&#125;")</span></span><br><span class="line">  <span class="comment"># file(MAKE_DIRECTORY $&#123;OPENCV_ICV_UNPACK_PATH&#125;)</span></span><br><span class="line">  <span class="comment"># ocv_assert(EXISTS "$&#123;OPENCV_ICV_UNPACK_PATH&#125;")</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># message(STATUS "ICV: Unpacking $&#123;OPENCV_ICV_PACKAGE_NAME&#125; to $&#123;OPENCV_ICV_UNPACK_PATH&#125;...")</span></span><br><span class="line">  <span class="comment"># execute_process(COMMAND $&#123;CMAKE_COMMAND&#125; -E tar xz "$&#123;OPENCV_ICV_PACKAGE_ARCHIVE&#125;"</span></span><br><span class="line">                  <span class="comment"># WORKING_DIRECTORY "$&#123;OPENCV_ICV_UNPACK_PATH&#125;"</span></span><br><span class="line">                  <span class="comment"># RESULT_VARIABLE __result)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># if(NOT __result EQUAL 0)</span></span><br><span class="line">    <span class="comment"># message(FATAL_ERROR "ICV: Failed to unpack ICV package from $&#123;OPENCV_ICV_PACKAGE_ARCHIVE&#125; to $&#123;OPENCV_ICV_UNPACK_PATH&#125; with error $&#123;__result&#125;")</span></span><br><span class="line">  <span class="comment"># endif()</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ocv_assert(EXISTS "$&#123;OPENCV_ICV_PATH&#125;")</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># set(OPENCV_ICV_PACKAGE_DOWNLOADED "$&#123;OPENCV_ICV_PACKAGE_HASH&#125;" CACHE INTERNAL "ICV package hash")</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">message</span>(STATUS <span class="string">"ICV: Package successfully downloaded"</span>)</span><br><span class="line">  <span class="keyword">set</span>(OPENCV_ICV_PATH <span class="string">"$&#123;OPENCV_ICV_PATH&#125;"</span> PARENT_SCOPE)</span><br><span class="line"><span class="keyword">endfunction</span>()</span><br><span class="line"></span><br><span class="line">_icv_downloader()</span><br></pre></td></tr></table></figure>
<p>完成后打开CMake，点击Configure，不出意外的话此时不会报错了</p>
<h1 id="引入opencv-contrib"><a href="#引入opencv-contrib" class="headerlink" title="引入opencv_contrib"></a>引入opencv_contrib</h1><p>找到变量<strong>OPENCV_EXTRA_MODULES_PATH</strong>，把opencv_contrib-3.1.0的绝对路径填进去，然后点击Generate，就开始生成了</p>
<p><img src="/images/image-20200614001554567.png" alt="image-20200614001554567"></p>
<p>如果这边opencv_contrib的版本和opencv的版本不一样，可能会产生奇怪的错误。解决的最好办法就是版本适配，否则极有可能瞎折腾。生成结束后，CMake中提示如下：</p>
<p><img src="/images/image-20200614002630708.png" alt="image-20200614002630708"></p>
<h1 id="使用VS生成dll和lib"><a href="#使用VS生成dll和lib" class="headerlink" title="使用VS生成dll和lib"></a>使用VS生成dll和lib</h1><p>打开opencv-3.1.0-build，使用VS2013（与编译器对应）打开里边的OpenCV.sln文件，在“生成-批生成”中先把ALL_BUILD的两个勾打上，点击“生成”</p>
<p><img src="/images/image-20200614015333768.png" alt="image-20200614015333768" style="zoom:67%;" /></p>
<p>待其结束后，勾选INSTALL后的两个勾，进行生成</p>
<p><img src="/images/image-20200614011313362.png" alt="image-20200614011313362" style="zoom:67%;" /></p>
<h2 id="第一个错误：没有生成“object”文件"><a href="#第一个错误：没有生成“object”文件" class="headerlink" title="第一个错误：没有生成“object”文件"></a>第一个错误：没有生成“object”文件</h2><p>错误代码：error C2220</p>
<p>提示信息：error C2220: 警告被视为错误 - 没有生成“object”文件</p>
<p>解决方法：把build文件夹清空，打开CMake重新点击Generate，再进行生成</p>
<h2 id="可能出现的一个错误：缺少python27-d-lib"><a href="#可能出现的一个错误：缺少python27-d-lib" class="headerlink" title="可能出现的一个错误：缺少python27_d.lib"></a>可能出现的一个错误：缺少python27_d.lib</h2><p>我进行了两次编译，第一次使用opencv-3.1.0.exe解压的source作为源码进行编译，第二次直接下载opencv-3.1.0.zip的源码进行编译。在第一次编译中，遇到一个问题，生成时提示缺少python27_d.lib文件，报错，后来通过修改工程文件解决了这个问题。但是在直接使用源码编译时，并没有出现这个错误。下面是解决这个错误的方法记录。</p>
<blockquote>
<p>错误 24 error LNK1104: 无法打开文件“python27_d.lib”</p>
<p>参考：<a href="https://blog.csdn.net/pplxlee/article/details/78067927" target="_blank" rel="noopener">https://blog.csdn.net/pplxlee/article/details/78067927</a></p>
</blockquote>
<p>在OpenCV项目的bindings中的opencv_python项目中，点击外部依赖项，在其中找到pyconfig.h和object.h文件，修改其中对python27_d.dll的使用</p>
<p><img src="/images/image-20200614034117774.png" alt="image-20200614034117774"></p>
<p>在pyconfig.h中</p>
<p>将</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#	<span class="meta-keyword">define</span> Py_DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="comment">//#	define Py_DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>将</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* For an MSVC DLL, we can nominate the .lib files used by extensions */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MS_COREDLL</span></span><br><span class="line"><span class="meta">#	<span class="meta-keyword">ifndef</span> Py_BUILD_CORE <span class="comment">/* not building the core - must be an ext */</span></span></span><br><span class="line"><span class="meta">#		<span class="meta-keyword">if</span> defined(_MSC_VER)</span></span><br><span class="line">			<span class="comment">/* So MSVC users need not specify the .lib file in</span></span><br><span class="line"><span class="comment">			their Makefile (other compilers are generally</span></span><br><span class="line"><span class="comment">			taken care of by distutils.) */</span></span><br><span class="line"><span class="meta">#			<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#				<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"python27_d.lib"</span>)</span></span><br><span class="line"><span class="meta">#			<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#				<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"python27.lib"</span>)</span></span><br><span class="line"><span class="meta">#			<span class="meta-keyword">endif</span> <span class="comment">/* _DEBUG */</span></span></span><br><span class="line"><span class="meta">#		<span class="meta-keyword">endif</span> <span class="comment">/* _MSC_VER */</span></span></span><br><span class="line"><span class="meta">#	<span class="meta-keyword">endif</span> <span class="comment">/* Py_BUILD_CORE */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* MS_COREDLL */</span></span></span><br></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* For an MSVC DLL, we can nominate the .lib files used by extensions */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MS_COREDLL</span></span><br><span class="line"><span class="meta">#	<span class="meta-keyword">ifndef</span> Py_BUILD_CORE <span class="comment">/* not building the core - must be an ext */</span></span></span><br><span class="line"><span class="meta">#		<span class="meta-keyword">if</span> defined(_MSC_VER)</span></span><br><span class="line">			<span class="comment">/* So MSVC users need not specify the .lib file in</span></span><br><span class="line"><span class="comment">			their Makefile (other compilers are generally</span></span><br><span class="line"><span class="comment">			taken care of by distutils.) */</span></span><br><span class="line"><span class="meta">#			<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#				<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"python27.lib"</span>)</span></span><br><span class="line"><span class="meta">#			<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#				<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"python27.lib"</span>)</span></span><br><span class="line"><span class="meta">#			<span class="meta-keyword">endif</span> <span class="comment">/* _DEBUG */</span></span></span><br><span class="line"><span class="meta">#		<span class="meta-keyword">endif</span> <span class="comment">/* _MSC_VER */</span></span></span><br><span class="line"><span class="meta">#	<span class="meta-keyword">endif</span> <span class="comment">/* Py_BUILD_CORE */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* MS_COREDLL */</span></span></span><br></pre></td></tr></table></figure>
<p>在object.h中</p>
<p>将</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Py_DEBUG implies Py_TRACE_REFS. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(Py_DEBUG) &amp;&amp; !defined(Py_TRACE_REFS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Py_TRACE_REFS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Py_DEBUG implies Py_TRACE_REFS. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(Py_DEBUG) &amp;&amp; !defined(Py_TRACE_REFS)</span></span><br><span class="line"><span class="comment">//#define Py_TRACE_REFS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h1 id="整合dll和lib"><a href="#整合dll和lib" class="headerlink" title="整合dll和lib"></a>整合dll和lib</h1><p>生成成功后，在opencv-3.1.0-build目录下生成了一个install文件夹，里边的include和x86文件夹是我们最终需要的东西</p>
<p><img src="/images/image-20200614035035123.png" alt="image-20200614035035123" style="zoom:67%;" /></p>
<p>首先过河拆桥，把3.1.0文件夹重命名为3.1.0-，然后新建3.1.0的空文件夹，把include和x86拷贝到新的3.1.0文件夹下</p>
<p><img src="/images/image-20200614035846255.png" alt="image-20200614035846255" style="zoom:80%;" /></p>
<p>接着需要区分一下debug和release版本，打开x86/vc12，把staticlib删掉，把lib重命名为lib-，并新建dll和lib文件夹</p>
<p><img src="/images/image-20200614040107577.png" alt="image-20200614040107577" style="zoom:80%;" /></p>
<p>首先进入dll，新建两个文件夹：debug和release，把bin文件夹中所有以310d.dll结尾的dll文件全部移动到debug文件夹下，以310.dll结尾的dll文件全部移动到release文件夹下。然后把bin删掉。</p>
<p>接着在新建的lib文件夹中同样创建两个文件夹：debug和release，把lib-中所有以310d.lib结尾的lib文件移动到debug文件夹下，……（操作同dll）。然后删掉lib-文件夹。</p>
<p>这样三件套就集齐了，可以把整个3.1.0-文件夹删掉了。</p>
<p><img src="/images/image-20200614040909636.png" alt="image-20200614040909636"></p>
<p>还蛮占空间的</p>
<p><img src="/images/image-20200614041011136.png" alt="image-20200614041011136"></p>
]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
        <tag>C++</tag>
        <tag>Cmake</tag>
      </tags>
  </entry>
  <entry>
    <title>js控制网页点击生成自定义内容</title>
    <url>/2020/05/26/js%E6%8E%A7%E5%88%B6%E7%BD%91%E9%A1%B5%E7%82%B9%E5%87%BB%E7%94%9F%E6%88%90%E8%87%AA%E5%AE%9A%E4%B9%89%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<h1 id="生成爱心"><a href="#生成爱心" class="headerlink" title="生成爱心"></a>生成爱心</h1><p>点击生成爱心，接着自动向上浮动淡出</p>
<p>参考自：<a href="https://www.cnblogs.com/yanggb/p/10328501.html" target="_blank" rel="noopener">https://www.cnblogs.com/yanggb/p/10328501.html</a></p>
<p>这大致思路创建了一个无限循环消除爱心的函数，当用户点击时，创建爱心加入数组，然后通过无限循环消除这个数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自执行匿名函数</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window, document, undefined</span>) </span>&#123; <span class="comment">// 传入window，document对象</span></span><br><span class="line">    <span class="keyword">var</span> hearts = []; <span class="comment">// 定义全局变量hearts，值为空数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义不同浏览器下的requestAnimationFrame函数实现，如果都没有，则用setTimeout实现</span></span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">            <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">            <span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line">            <span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line">            <span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">                setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    init(); <span class="comment">// 执行初始化函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义初始化函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        css(<span class="string">".heart&#123;z-index:100000000;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>); <span class="comment">// 定义要生成的爱心的样式</span></span><br><span class="line">        attachEvent(); <span class="comment">// 添加点击事件（爱心生成）</span></span><br><span class="line">        gameloop(); <span class="comment">// 开始循环移除爱心（内含递归）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义循环函数移除生成的爱心</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gameloop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hearts.length; i++) &#123; <span class="comment">// 循环hearts数组</span></span><br><span class="line">            <span class="keyword">if</span> (hearts[i].alpha &lt;= <span class="number">0</span>) &#123; <span class="comment">// 如果当前循环的heart对象的透明度为0或小于0</span></span><br><span class="line">                <span class="built_in">document</span>.body.removeChild(hearts[i].el); <span class="comment">// 从body对象中移除当前循环的heart对象（通过指针）</span></span><br><span class="line">                hearts.splice(i, <span class="number">1</span>); <span class="comment">// 从heart数组中移除当前循环的heart对象（通过下标）</span></span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">// 跳过当前循环，进入下一个循环</span></span><br><span class="line">            &#125;</span><br><span class="line">            hearts[i].y--; <span class="comment">// y轴自减1</span></span><br><span class="line">            hearts[i].scale += <span class="number">0.004</span>; <span class="comment">// 缩放增加0.004</span></span><br><span class="line">            hearts[i].alpha -= <span class="number">0.013</span>; <span class="comment">// 透明度减少0.013</span></span><br><span class="line">            hearts[i].el.style.cssText = <span class="string">"left:"</span> + hearts[i].x + <span class="string">"px;top:"</span> + hearts[i].y + <span class="string">"px;opacity:"</span> + hearts[i].alpha + <span class="string">";transform:scale("</span> + hearts[i].scale + <span class="string">","</span> + hearts[i].scale + <span class="string">") rotate(45deg);background:"</span> + hearts[i].color;</span><br><span class="line">        &#125;</span><br><span class="line">        requestAnimationFrame(gameloop); <span class="comment">// 定时器定时执行，递归</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义点击事件函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">attachEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> old = <span class="keyword">typeof</span> <span class="built_in">window</span>.onclick === <span class="string">"function"</span> &amp;&amp; <span class="built_in">window</span>.onclick;</span><br><span class="line">        <span class="built_in">window</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            old &amp;&amp; old();</span><br><span class="line">            createHeart(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义创建爱心函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createHeart</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> d = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>); <span class="comment">// 创建一个div对象并赋值给变量d</span></span><br><span class="line">        d.className = <span class="string">"heart"</span>; <span class="comment">// 给div对象添加类名</span></span><br><span class="line">        hearts.push(&#123; <span class="comment">// 给hearts数组添加heart对象</span></span><br><span class="line">            el: d, <span class="comment">// div对象</span></span><br><span class="line">            x: event.clientX - <span class="number">5</span>, <span class="comment">// 鼠标当前位置x轴 - 5</span></span><br><span class="line">            y: event.clientY - <span class="number">5</span>, <span class="comment">// 鼠标当前位置y轴 - 5</span></span><br><span class="line">            scale: <span class="number">1</span>, <span class="comment">// 缩放</span></span><br><span class="line">            alpha: <span class="number">1</span>, <span class="comment">// 透明度</span></span><br><span class="line">            color: randomColor() <span class="comment">// 颜色（随机颜色）</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(d); <span class="comment">// 添加创建的div对象到body对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义生成样式函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">css</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> style = <span class="built_in">document</span>.createElement(<span class="string">"style"</span>); <span class="comment">// 创建一个style对象并赋值给变量style</span></span><br><span class="line">        style.type = <span class="string">"text/css"</span>; <span class="comment">// 给style对象添加属性并赋属性值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            style.appendChild(<span class="built_in">document</span>.createTextNode(css));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">            style.styleSheet.cssText = css;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(style); <span class="comment">// 添加创建的style对象到head对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义生成随机颜色函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">randomColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"rgb("</span> + (~~(<span class="built_in">Math</span>.random() * <span class="number">255</span>)) + <span class="string">","</span> + (~~(<span class="built_in">Math</span>.random() * <span class="number">255</span>)) + <span class="string">","</span> + (~~(<span class="built_in">Math</span>.random() * <span class="number">255</span>)) + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>
<h1 id="生成自定义顺序的词组"><a href="#生成自定义顺序的词组" class="headerlink" title="生成自定义顺序的词组"></a>生成自定义顺序的词组</h1><p>除了爱心，还可以根据点击次数依次显示词语，比如“自强、弘毅、求是、拓新”。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自执行匿名函数</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window, document, undefined</span>) </span>&#123; <span class="comment">// 传入window，document对象</span></span><br><span class="line">    <span class="keyword">var</span> currentWords = [];</span><br><span class="line">    <span class="keyword">var</span> words = [<span class="string">"武汉大学"</span>, <span class="string">"自强"</span>, <span class="string">"弘毅"</span>, <span class="string">"求是"</span>, <span class="string">"拓新"</span>, <span class="string">"遥感信息工程学院"</span>, <span class="string">"笃志"</span>, <span class="string">"敦行"</span>, <span class="string">"和协"</span>, <span class="string">"拓新"</span>];</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义不同浏览器下的requestAnimationFrame函数实现，如果都没有，则用setTimeout实现</span></span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">            <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">            <span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line">            <span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line">            <span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">                setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    init(); <span class="comment">// 执行初始化函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义初始化函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        css(<span class="string">".float-word&#123;z-index:9999;font-size:0.8em;position:fixed;font-weight:bold;user-select:none;&#125;"</span>)</span><br><span class="line">        attachEvent(); <span class="comment">// 添加点击事件（爱心生成）</span></span><br><span class="line">        gameloop(); <span class="comment">// 开始循环移除爱心（内含递归）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义循环函数移除生成的文字</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gameloop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; currentWords.length; i++) &#123; <span class="comment">// 循环hearts数组</span></span><br><span class="line">            <span class="keyword">if</span> (currentWords[i].alpha &lt;= <span class="number">0</span>) &#123; <span class="comment">// 如果当前循环的heart对象的透明度为0或小于0</span></span><br><span class="line">                <span class="built_in">document</span>.body.removeChild(currentWords[i].el); <span class="comment">// 从body对象中移除当前循环的heart对象（通过指针）</span></span><br><span class="line">                currentWords.splice(i, <span class="number">1</span>); <span class="comment">// 从heart数组中移除当前循环的heart对象（通过下标）</span></span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">// 跳过当前循环，进入下一个循环</span></span><br><span class="line">            &#125;</span><br><span class="line">            currentWords[i].y--; <span class="comment">// y轴自减1</span></span><br><span class="line">            currentWords[i].scale += <span class="number">0.004</span>; <span class="comment">// 缩放增加0.004</span></span><br><span class="line">            currentWords[i].alpha -= <span class="number">0.013</span>; <span class="comment">// 透明度减少0.013</span></span><br><span class="line">            currentWords[i].el.style.cssText = <span class="string">"left:"</span> + currentWords[i].x + <span class="string">"px;top:"</span> + currentWords[i].y + <span class="string">"px;opacity:"</span> + currentWords[i].alpha + <span class="string">";transform:scale("</span> + currentWords[i].scale + <span class="string">","</span> + currentWords[i].scale + <span class="string">");color:"</span> + currentWords[i].color;</span><br><span class="line">        &#125;</span><br><span class="line">        requestAnimationFrame(gameloop); <span class="comment">// 定时器定时执行，递归</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义点击事件函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">attachEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> old = <span class="keyword">typeof</span> <span class="built_in">window</span>.onclick === <span class="string">"function"</span> &amp;&amp; <span class="built_in">window</span>.onclick;</span><br><span class="line">        <span class="built_in">window</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            old &amp;&amp; old();</span><br><span class="line">            createHeart(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义创建爱心函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createHeart</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> d = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>); <span class="comment">// 创建一个div对象并赋值给变量d</span></span><br><span class="line">        d.className = <span class="string">'float-word'</span>;</span><br><span class="line">        d.innerText = words[index++ % words.length]</span><br><span class="line">        currentWords.push(&#123; <span class="comment">// 给hearts数组添加heart对象</span></span><br><span class="line">            el: d, <span class="comment">// div对象</span></span><br><span class="line">            x: event.clientX - <span class="number">5</span>, <span class="comment">// 鼠标当前位置x轴 - 5</span></span><br><span class="line">            y: event.clientY - <span class="number">5</span>, <span class="comment">// 鼠标当前位置y轴 - 5</span></span><br><span class="line">            scale: <span class="number">1</span>, <span class="comment">// 缩放</span></span><br><span class="line">            alpha: <span class="number">1</span>, <span class="comment">// 透明度</span></span><br><span class="line">            color: randomColor() <span class="comment">// 颜色（随机颜色）</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(d); <span class="comment">// 添加创建的div对象到body对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义生成样式函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">css</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> style = <span class="built_in">document</span>.createElement(<span class="string">"style"</span>); <span class="comment">// 创建一个style对象并赋值给变量style</span></span><br><span class="line">        style.type = <span class="string">"text/css"</span>; <span class="comment">// 给style对象添加属性并赋属性值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            style.appendChild(<span class="built_in">document</span>.createTextNode(css));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">            style.styleSheet.cssText = css;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(style); <span class="comment">// 添加创建的style对象到head对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义生成随机颜色函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">randomColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"rgb("</span> + (~~(<span class="built_in">Math</span>.random() * <span class="number">255</span>)) + <span class="string">","</span> + (~~(<span class="built_in">Math</span>.random() * <span class="number">255</span>)) + <span class="string">","</span> + (~~(<span class="built_in">Math</span>.random() * <span class="number">255</span>)) + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction of Optical Flow Algorithm</title>
    <url>/2020/07/16/Introduction-of-Optical-Flow-Algorithm/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>Optical Flow</strong> is a motion of a certain target in consecutive frames, which is caused by the motion of target, scene or camera. It reflects the image changes caused by motion in a small time interval to determine the direction and speed of motion of the image points.</p>
<h1 id="Assumptions"><a href="#Assumptions" class="headerlink" title="Assumptions"></a>Assumptions</h1><p><strong>Optical Flow</strong> provide the clue of motion recovering. It mainly depends on three assumptions:</p>
<ol>
<li><strong>[Constant light]</strong> The pixel light of target is constant in consecutive frames;</li>
<li><strong>[Time sequence]</strong> The time interval of consecutive frames is so small that the change of time can be ignore when considering the motion change(This assumption is to be used for deducing the core formula of Optical Flow Algorithm);</li>
<li><strong>[Neighborhood consistency]</strong> Neighbor pixels have the similar motion.</li>
</ol>
<h1 id="Formula-Deducing"><a href="#Formula-Deducing" class="headerlink" title="Formula Deducing"></a>Formula Deducing</h1><p>Assumed that the light of a certain pixel is <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="8.132ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3594.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(504, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(893, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1465, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1909.7, 0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2399.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2844.3, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(3205.3, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> in moment <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>. After <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.701ex" height="1.645ex" role="img" focusable="false" viewBox="0 -716 1194 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>, this pixel has the same light with that in <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container> after a motion <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="8.938ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3950.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(1222, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1794, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2238.7, 0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(3071.7, 0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3561.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>, means that.</p>
<script type="math/tex; mode=display">
I(x,y,t)=I(x+\Delta x,y+\Delta y,t+\Delta t)</script><p>Performing a first order taylor expansion on the right side of the equation, we can obtain a formula below.</p>
<script type="math/tex; mode=display">
I(x+\Delta x, y+\Delta y, t+\Delta t) = I(x,y,t) + I'_x\Delta x + I'_y\Delta y + I'_t\Delta t</script><p>means that.</p>
<script type="math/tex; mode=display">
I(x,y,t) = I(x,y,t) + I'_x\Delta x + I'_y\Delta y + I'_t\Delta t</script><p>therefore.</p>
<script type="math/tex; mode=display">
I'_x\Delta x + I'_y\Delta y + I'_t\Delta t = 0</script><p>It’s matrix format is like this;</p>
<script type="math/tex; mode=display">
\begin{bmatrix}I'_x & I'_y\end{bmatrix} \begin{bmatrix}\Delta x \\ \Delta y\end{bmatrix}=-I'_t \Delta t</script><p>where <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.887ex" xmlns="http://www.w3.org/2000/svg" width="4.922ex" height="2.604ex" role="img" focusable="false" viewBox="0 -759 2175.6 1150.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(557.2, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g><g data-mml-node="mi" transform="translate(440, -247) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(894.5, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(1339.1, 0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(557.2, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g><g data-mml-node="mi" transform="translate(440, -247) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> are partial derivative of light of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.169ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2284.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(961, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1405.7, 0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1895.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> in direction <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container> and <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>, namely gradient. <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.576ex" xmlns="http://www.w3.org/2000/svg" width="1.814ex" height="2.294ex" role="img" focusable="false" viewBox="0 -759 801.7 1013.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(557.2, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g><g data-mml-node="mi" transform="translate(440, -247) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></svg></mjx-container> is the partial derivative of light of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.169ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2284.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(961, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1405.7, 0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1895.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> in moment <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>. <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.576ex" xmlns="http://www.w3.org/2000/svg" width="4.515ex" height="2.294ex" role="img" focusable="false" viewBox="0 -759 1995.7 1013.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(557.2, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g><g data-mml-node="mi" transform="translate(440, -247) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mi" transform="translate(801.7, 0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(1634.7, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container> is the light difference of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.169ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2284.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(961, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1405.7, 0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1895.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> between consecutive frames. So <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.576ex" xmlns="http://www.w3.org/2000/svg" width="11.103ex" height="2.294ex" role="img" focusable="false" viewBox="0 -759 4907.5 1013.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(557.2, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g><g data-mml-node="mi" transform="translate(440, -247) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mi" transform="translate(801.7, 0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(1634.7, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(2273.4, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3329.2, 0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msub" transform="translate(4162.2, 0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(440, -150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></svg></mjx-container>, the equation can be written as that.</p>
<script type="math/tex; mode=display">
\begin{bmatrix}I'_x & I'_y\end{bmatrix} \begin{bmatrix}\Delta x \\ \Delta y\end{bmatrix}=-\Delta I_t</script><p>In consecutive frames, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.887ex" xmlns="http://www.w3.org/2000/svg" width="9.499ex" height="2.604ex" role="img" focusable="false" viewBox="0 -759 4198.5 1150.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(557.2, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g><g data-mml-node="mi" transform="translate(440, -247) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(894.5, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(1339.1, 0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(557.2, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g><g data-mml-node="mi" transform="translate(440, -247) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2175.6, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2620.3, 0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="msub" transform="translate(3453.3, 0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(440, -150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></svg></mjx-container> are known, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="7.178ex" height="2.084ex" role="img" focusable="false" viewBox="0 -716 3172.7 921"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1405, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1849.7, 0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(2682.7, 0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> are optical flow unknown.</p>
<p>According to assumption 3, the neighbor pixels have the same optical flow, we can choose a <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="5.028ex" height="1.554ex" role="img" focusable="false" viewBox="0 -665 2222.4 687"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(722.2, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(1722.4, 0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container> neighbor region centered on <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.169ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2284.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(961, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1405.7, 0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1895.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>.</p>
<p><img src="/images/image-20200716151923939.png" alt="image-20200716151923939"></p>
<p>Considering all pixels in neighbor region, we can obtain a matrix formula.</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
I'^{(1)}_x,I'^{(1)}_y \\
I'^{(2)}_x,I'^{(2)}_y \\
\cdots \\
I'^{(n)}_x,I'^{(n)}_y \\
\end{bmatrix}
\begin{bmatrix}\Delta x \\ \Delta y\end{bmatrix}
=
\begin{bmatrix}
-\Delta I^{(1)}_t \\ -\Delta I^{(2)}_t \\ \cdots \\ -\Delta I^{(n)}_t 
\end{bmatrix}</script><p>The equation can be written as <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="8.359ex" height="1.805ex" role="img" focusable="false" viewBox="0 -716 3694.6 798"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(750, 0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1879.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2935.6, 0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></svg></mjx-container>. Therefore, the solution <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="13.442ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5941.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2185.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2574.6, 0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(3407.6, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mtext" transform="translate(3979.6, 0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(4229.6, 0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(5062.6, 0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5552.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> of optical flow in <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.169ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2284.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(961, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1405.7, 0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1895.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> can be compute by least square:</p>
<script type="math/tex; mode=display">
A^TAX=A^TB</script><script type="math/tex; mode=display">
X=(A^TA)^{-1}A^TB</script><h1 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h1><p>The <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="4.633ex" height="1.904ex" role="img" focusable="false" viewBox="0 -841.7 2047.8 841.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(750, 363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mi" transform="translate(1297.8, 0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></svg></mjx-container> is required to be invertible. If not, it may cause a aperture problem. As the GIF shown left, the motion of stripe can not be detect through the circle aperture. So, Lucas and Kanade proposed selecting those “invertible” pixels for computing optical flow. This kind of pixels are usually some corner points, which are detected by Harris or other Algorithm.</p>
<p><img src="/images/image-20200716152109337.gif" alt="image-20200716152109337"></p>
<p>Except mentioned above, Lucas and Kanade proposed using pyramid images to solve the problem caused by large offset. Eventually, Lucas-Kanade’s method was used to obtain sparse optical flow. The Lucas-Kanade method is a classical optical flow algorithm. Farneback proposed a method to obtain dense optical flow in 2003. The GIF below is the compare of sparse and dense optical flow.</p>
<p><img src="/images/image-20200716152223411.gif" alt="image-20200716152223411"></p>
<p>In ICCV2015, a group proposed a deep learning method FlowNet to solve problems of optical flow estimation using CNN. In CVPR2017, the same group proposed a modified FlowNet2.0. FlowNet2.0 is the most popular paper in optical flow field since 2015.</p>
<h1 id="Reference-and-Further-reading"><a href="#Reference-and-Further-reading" class="headerlink" title="Reference and Further reading"></a>Reference and Further reading</h1><p>Farneback: <a href="https://blog.csdn.net/xholes/article/details/79894340" target="_blank" rel="noopener">https://blog.csdn.net/xholes/article/details/79894340</a></p>
<p>Flow Net: <a href="https://zhuanlan.zhihu.com/p/37736910" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/37736910</a></p>
<p>Flow Net: <a href="https://zhuanlan.zhihu.com/p/74460341" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/74460341</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>object track</tag>
        <tag>optical flow</tag>
      </tags>
  </entry>
  <entry>
    <title>RANSAC算法在拟合边缘直线中的应用</title>
    <url>/2020/07/09/RANSAC%E7%AE%97%E6%B3%95%E5%9C%A8%E6%8B%9F%E5%90%88%E8%BE%B9%E7%BC%98%E7%9B%B4%E7%BA%BF%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我的目标是，在连续的两帧影像上，根据前一帧影像的已知直线，在下一张影像上找到对应的直线位置。</p>
<p><img src="/images/image-20200708235909106.png" alt="image-20200708235909106"></p>
<p>假设每一帧影像的标号为1,2,3,4,5…，直线L1在影像1上的位置是已知的，并且在影像2上存在一个缓冲区，影像2上的L1位于这个缓冲区内。</p>
<p><img src="/images/image-20200709000924412.png" alt="image-20200709000924412"></p>
<p>预测缓冲区的方法较为多样。如果已知物体的旋转角速度和运动速度，以及运动相机的运动状态，可以直接计算出目标在影像上的像素偏移量和旋转角度；也可以先对目标进行点匹配，筛选出正确率较高的匹配点，根据匹配点之间的偏移平均值、两个匹配点连成的直线的夹角、均匀分布的匹配点的中心，计算出每一条直线对应的缓冲区的仿射变换（旋转、平移、伸缩）参数，进而预测出缓冲区的位置；或者使用光流法（Optical Flow）进行跟踪和预测，目前正在研究中。</p>
<p>获取缓冲区后，首先对缓冲区进行边缘提取，接着在一系列的边缘点中，提取出目标直线。</p>
<p><img src="/images/image-20200709003030030.png" alt="image-20200709003030030"></p>
<p>在这篇文章中，我将介绍边缘提取方法和基于统计与误差思想的RANSAC直线提取方法。</p>
<h1 id="边缘提取"><a href="#边缘提取" class="headerlink" title="边缘提取"></a>边缘提取</h1><p>边缘提取的方法包括：</p>
<ol>
<li>使用一阶微分/二阶微分算子进行卷积运算提取，如：Sobel算子、Prewitt算子、Robert算子、Laplacian算子；</li>
<li>使用更加精细化的、可以提取到像素/子像素的方法，如：Canny方法。</li>
</ol>
<p>考虑到像素/子像素级别的边缘提取方法会导致边缘强度信息丢失，难以进一步提取直线，因此我使用的是可以提取较粗边缘、保留较好强度信息的一阶微分卷积算法（Sobel算子）。</p>
<p><img src="/images/image-20200709010832989.png" alt="image-20200709010832989"></p>
<p>使用四个方向的Sobel算子分别对灰度图进行卷积运算，接着将卷积后的四幅影像取绝对值后相加取平均，得到具有一定宽度和亮度的边缘。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用sobel算子提取边缘（四个方向）</span></span><br><span class="line">Mat sobelTop, sobelBottom, sobelLeft, sobelRight;</span><br><span class="line">sobelLeft = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt;</span><br><span class="line">    <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>,</span><br><span class="line">    <span class="number">2</span>, <span class="number">0</span>, <span class="number">-2</span>,</span><br><span class="line">    <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">sobelRight = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt;</span><br><span class="line">    <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">    <span class="number">-2</span>, <span class="number">0</span>, <span class="number">2</span>,</span><br><span class="line">    <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">sobelTop = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt;</span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-1</span>);</span><br><span class="line">sobelBottom = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt;</span><br><span class="line">    <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-1</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">Mat gt, gb, gl, gr;</span><br><span class="line">filter2D(gray, gt, CV_32FC1, sobelTop);</span><br><span class="line">filter2D(gray, gb, CV_32FC1, sobelBottom);</span><br><span class="line">filter2D(gray, gl, CV_32FC1, sobelLeft);</span><br><span class="line">filter2D(gray, gr, CV_32FC1, sobelRight);</span><br><span class="line"></span><br><span class="line">Mat((<span class="built_in">abs</span>(gt) + <span class="built_in">abs</span>(gb) + <span class="built_in">abs</span>(gl) + <span class="built_in">abs</span>(gr)) / <span class="number">4</span>).convertTo(dst, CV_8UC1);</span><br></pre></td></tr></table></figure>
<p>提取后的边缘如下图所示：</p>
<p><img src="/images/image-20200709010411819.png" alt="image-20200709010411819"></p>
<h1 id="RANSAC直线拟合算法"><a href="#RANSAC直线拟合算法" class="headerlink" title="RANSAC直线拟合算法"></a>RANSAC直线拟合算法</h1><p>提取具有强度信息的边缘后，需要通过这些边缘点拟合出一条直线，在这里我用到了RANSAC算法。</p>
<p>RANSAC为Random Sample Consensus（随机采样一致）的缩写，算法的思想是：根据一组包含异样数据的样本数据集，计算出数据的数学模型参数，得到有效样本数据。它由Fischler和Bolles于1981年最先提出。</p>
<blockquote>
<p>RANSAC基本思想描述如下：</p>
<ol>
<li>考虑一个<strong>最小抽样集的势为n</strong>的模型（n为初始化模型参数所需要的最小样本数）和一个样本集P，集合P的样本数#(P)&gt;n，从P中随机抽取包含n个样本的P的子集S初始化模型M；</li>
<li>余集SC=P\S中与模型M的误差小于某一设定阈值t的样本集以及S构成S*。S*认为是内点集，它们构成S的一致集(Consensus Set)；</li>
<li>若#(S*)≥N，认为得到正确的模型参数，并利用集S*(内点inliers)采用最小二乘等方法重新计算新的模型M*；重新随机抽取新的S，重复以上过程；</li>
<li>在完成一定的抽样次数后，若未找到一致集则算法失败，否则选取抽样后得到的最大一致集判断内外点，算法结束。</li>
</ol>
</blockquote>
<p>基于RANSAC的基本方法，我们可以进行一定的改进，借鉴统计与误差的思想，将其用于边缘图像的直线拟合。下面，将首先介绍该方法的总体流程，接着从种子点的选取、随机选取直线的数量、误差的计算方法三个方面详细论述。</p>
<h2 id="1-算法流程"><a href="#1-算法流程" class="headerlink" title="1. 算法流程"></a>1. 算法流程</h2><ol>
<li>对边缘图像进行归一化处理，使其亮度处在某一范围<script type="math/tex">(a, b)</script>内；</li>
<li>在边缘图像中选取一系列种子点<script type="math/tex">p_i,0 \leq i \lt N</script>，这些种子点与目标直线有着相似的分布，具有一定亮度信息；</li>
<li>从所有的种子点中随机选取两点（<script type="math/tex">pt_1, pt_2</script>）拟合直线<script type="math/tex">L</script>，获得直线参数<script type="math/tex">a,b,c</script>；</li>
<li>分别计算每个种子点与直线<script type="math/tex">L</script>的距离<script type="math/tex">d_i</script></li>
</ol>
<script type="math/tex; mode=display">
d_i=\frac{|ax_i+by_i+c|}{\sqrt{a^2+b^2}}</script><ol>
<li>考虑亮度<script type="math/tex">I_i</script>与距离<script type="math/tex">d_i</script>，计算直线<script type="math/tex">L</script>与所有种子点之间的标准差<script type="math/tex">\sigma</script>，其中，距离与误差成正比，亮度与误差成反比</li>
</ol>
<script type="math/tex; mode=display">
\sigma=\sqrt{\frac{\sum{\frac{d_i}{I_i}}}{N}}</script><ol>
<li>重复<script type="math/tex">K</script>次3-5步的运算，找到所拟合出的直线<script type="math/tex">L</script>具有最小标准差<script type="math/tex">\sigma_\min</script>的两个点，这两个点所连接的直线即为目标直线。</li>
</ol>
<h2 id="2-种子点的选取"><a href="#2-种子点的选取" class="headerlink" title="2. 种子点的选取"></a>2. 种子点的选取</h2><p>在对直线的大致位置进行预测后，得到一个缓冲区，缓冲区的中心线与目标直线具有相似的分布。</p>
<p><img src="/images/image-20200709115957091.png" alt="image-20200709115957091" style="zoom:67%;"></p>
<p>选取种子点可以在缓冲区的中心线附近沿着直线方向进行查找。</p>
<p><img src="/images/image-20200709120252902.png" alt="image-20200709120252902" style="zoom:67%;"></p>
<h2 id="3-随机选取直线的数量"><a href="#3-随机选取直线的数量" class="headerlink" title="3. 随机选取直线的数量"></a>3. 随机选取直线的数量</h2><p>假设有<script type="math/tex">N</script>个种子点（<script type="math/tex">N≥2</script>），其中包含两个最优的种子点，在所有点中随机选取，选中两个最优种子点的概率为<script type="math/tex">q</script></p>
<script type="math/tex; mode=display">
q = (\frac{1}{N})^2</script><p>在<script type="math/tex">K</script>次迭代中，每次迭代随机选取两个点进行拟合，要求拟合的所有直线中，包含最优直线的概率为<script type="math/tex">P</script>，则</p>
<script type="math/tex; mode=display">
P = 1-(1-q)^K = 1-(1-(\frac{1}{N})^2)^K</script><script type="math/tex; mode=display">
K = \frac{log(1-P)}{log(1-q)} = \frac{log(1-P)}{log(1-(\frac{1}{N})^2)}</script><p>迭代次数K随种子点数N变化的曲线图如下所示（所有拟合直线中包含最优直线的概率<script type="math/tex">P=0.95</script>）：</p>
<p><img src="/images/image-20200709040451256.png" alt="image-20200709040451256" style="zoom:75%;"></p>
<h2 id="4-误差的计算方法"><a href="#4-误差的计算方法" class="headerlink" title="4. 误差的计算方法"></a>4. 误差的计算方法</h2><p>在所有参与直线拟合的种子点中，与直线的距离越远，说明该点是内点的可能性越小，误差越大；同时，种子点的亮度越低，说明该点是边缘点的可能性越小，误差越大。因此可以得到单个种子点<script type="math/tex">i</script>的误差计算公式：</p>
<script type="math/tex; mode=display">
e_i=\frac{d_i}{I_i}</script><p>其中，<script type="math/tex">d_i</script>是种子点<script type="math/tex">i</script>到直线的距离，<script type="math/tex">I_i</script>是种子点的亮度值。直线整体误差的标准差<script type="math/tex">\sigma</script>的计算公式为：</p>
<script type="math/tex; mode=display">
\sigma=\sqrt{\frac{\sum^N_{i=1}{\frac{d_i}{I_i}}}{N}}</script><h1 id="5-提取与跟踪的结果"><a href="#5-提取与跟踪的结果" class="headerlink" title="5. 提取与跟踪的结果"></a>5. 提取与跟踪的结果</h1><p><img src="/images/image-20200714141850097.png" alt="image-20200714141850097"></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>直线跟踪</tag>
      </tags>
  </entry>
  <entry>
    <title>vuepress中设置图片居中</title>
    <url>/2020/07/27/vuepress%E4%B8%AD%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<blockquote>
<p>API: <a href="https://markdown-it.github.io/markdown-it" target="_blank" rel="noopener">https://markdown-it.github.io/markdown-it</a></p>
</blockquote>
<h1 id="Markdown-it-的数据结构及解析过程"><a href="#Markdown-it-的数据结构及解析过程" class="headerlink" title="Markdown-it 的数据结构及解析过程"></a>Markdown-it 的数据结构及解析过程</h1><p><code>markdown-it</code> 中是以 <code>Token</code> 来标识整个文档及里面的元素，可以认为它就是 <code>html</code> 中标签的抽象</p>
<p>解析时，将首先把整个md文件的内容抽象成一个大的 <code>Token</code>，接着渲染这个 <code>Token</code>，得到 <code>html</code>。抽象的过程分为不断迭代的两小步，直至文档尾。第一小步先解析<strong>块级元素（block）</strong>，比如代码段、段落、引用等；第二小步解析<strong>行内元素（inline）</strong>，比如图片、文字。每一步都对应相应的提取规则（Rule）。</p>
<p>得到 <code>Token</code> 后，使用 <code>render()</code> 函数进行渲染，渲染的时候也有相应的规则，不过这些规则只针对行内元素。</p>
<p>具体过程描述如上，详细的处理规则可以通过接下来的实例进一步理解。</p>
<blockquote>
<p>源码仓库地址： <a href="https://github.com/markdown-it/markdown-it/tree/master/lib" target="_blank" rel="noopener">https://github.com/markdown-it/markdown-it/tree/master/lib</a></p>
</blockquote>
<p>下面两部分的代码均可写在 <code>vuepress</code> 的配置文件中：<code>.vuepress/config.js</code> - <code>markdown.extendMarkdown(md =&gt; {...})</code></p>
<h1 id="自定义图片处理规则（inline）"><a href="#自定义图片处理规则（inline）" class="headerlink" title="自定义图片处理规则（inline）"></a>自定义图片处理规则（inline）</h1><p>这部分其实没什么用，因为一开始的目的是把图片居中，想着在包裹图片的<code>&lt;p&gt;</code>加一个<code>text-align:center</code>样式，所以首先想着把图片搞出来处理，结果发现应该是从段落入手。然后这部分是实验的代码，边对照着源码敲出来的，不得不佩服 <code>markdown-it</code> 的开发者，把js写成了c语言，各种指针的调用，阅读起来难度有点大，极具挑战性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先将原先的图片处理规则禁用</span></span><br><span class="line">md.inline.ruler.disable(<span class="string">'image'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接着写入自定义的图片处理规则</span></span><br><span class="line">md.inline.ruler.before(<span class="string">'image'</span>, <span class="string">'imageCenter'</span>, (state) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> parsedImage = state.src.match(<span class="regexp">/!\[([\w\W]*)\]\(([\w\W]*)\)/</span>);</span><br><span class="line">    <span class="keyword">if</span> (parsedImage) &#123;</span><br><span class="line">        <span class="keyword">let</span> imageName = parsedImage[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">let</span> imageLink = parsedImage[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!imageName || !imageLink) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加入到 token 中，才可以在 renderer 中找到对应的 rule</span></span><br><span class="line">        <span class="keyword">let</span> token = state.push(<span class="string">'imageCenter'</span>, <span class="string">'imageCenter'</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 这个返回值是个指针</span></span><br><span class="line">        token.attrs = &#123;</span><br><span class="line">            imageName,</span><br><span class="line">            imageLink</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更改指针位置，表示解析完毕这串字符串        </span></span><br><span class="line">        state.pos = state.posMax;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回 true，表示字符串处理完毕</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> imageCenterRender = <span class="function">(<span class="params">tokens, idx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> content = tokens[idx];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'\n\n渲染的内容: \n'</span>, content);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;img /&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">md.renderer.rules.imageCenter = imageCenterRender;</span><br></pre></td></tr></table></figure>
<h1 id="设置图片居中"><a href="#设置图片居中" class="headerlink" title="设置图片居中"></a>设置图片居中</h1><p>这部分代码是把 <code>markdown-it</code> 源码中的 <code>lib/rules_block/paragraph.js</code> <a href="https://github.com/markdown-it/markdown-it/blob/master/lib/rules_block/paragraph.js" target="_blank" rel="noopener">paragraph.js</a> 处理部分直接抄过来，然后改了一行，往 <code>&lt;p&gt;</code> 的属性中加入了图片居中的样式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义 block 段落中的图片显示</span></span><br><span class="line">md.block.ruler.disable(<span class="string">'paragraph'</span>);</span><br><span class="line">md.block.ruler.after(<span class="string">'paragraph'</span>, <span class="string">'m_paragraph'</span>, (state, startLine) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> content, terminate, i, l, token, oldParentType,</span><br><span class="line">        nextLine = startLine + <span class="number">1</span>,</span><br><span class="line">        terminatorRules = state.md.block.ruler.getRules(<span class="string">'paragraph'</span>),</span><br><span class="line">        endLine = state.lineMax;</span><br><span class="line"></span><br><span class="line">    oldParentType = state.parentType;</span><br><span class="line">    state.parentType = <span class="string">'paragraph'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jump line-by-line until empty one or EOF</span></span><br><span class="line">    <span class="keyword">for</span> (; nextLine &lt; endLine &amp;&amp; !state.isEmpty(nextLine); nextLine++) &#123;</span><br><span class="line">        <span class="comment">// this would be a code block normally, but after paragraph</span></span><br><span class="line">        <span class="comment">// it's considered a lazy continuation regardless of what's there</span></span><br><span class="line">        <span class="keyword">if</span> (state.sCount[nextLine] - state.blkIndent &gt; <span class="number">3</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// quirk for blockquotes, this line should already be checked by that rule</span></span><br><span class="line">        <span class="keyword">if</span> (state.sCount[nextLine] &lt; <span class="number">0</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Some tags can terminate paragraph without empty line.</span></span><br><span class="line">        terminate = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, l = terminatorRules.length; i &lt; l; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (terminatorRules[i](state, nextLine, endLine, <span class="literal">true</span>)) &#123;</span><br><span class="line">                terminate = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (terminate) &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    content = state.getLines(startLine, nextLine, state.blkIndent, <span class="literal">false</span>).trim();</span><br><span class="line"></span><br><span class="line">    state.line = nextLine;</span><br><span class="line"></span><br><span class="line">    token = state.push(<span class="string">'paragraph_open'</span>, <span class="string">'p'</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 如果有图片，则居中</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^\!\[[\w\W]*\]\([\w\W]*\)$/</span>.test(content)) &#123;</span><br><span class="line">        token.attrSet(<span class="string">'style'</span>, <span class="string">"text-align:center;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    token.map = [startLine, state.line];</span><br><span class="line"></span><br><span class="line">    token = state.push(<span class="string">'inline'</span>, <span class="string">''</span>, <span class="number">0</span>);</span><br><span class="line">    token.content = content;</span><br><span class="line">    token.map = [startLine, state.line];</span><br><span class="line">    token.children = [];</span><br><span class="line"></span><br><span class="line">    token = state.push(<span class="string">'paragraph_close'</span>, <span class="string">'p'</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    state.parentType = oldParentType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Markdown-it</tag>
        <tag>Vuepress</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuepress使用vue-router切换页面时总是滚动到顶部</title>
    <url>/2020/07/19/Vuepress%E4%BD%BF%E7%94%A8vue-router%E5%88%87%E6%8D%A2%E9%A1%B5%E9%9D%A2%E6%97%B6%E6%80%BB%E6%98%AF%E6%BB%9A%E5%8A%A8%E5%88%B0%E9%A1%B6%E9%83%A8/</url>
    <content><![CDATA[<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><blockquote>
<p>参考资料：</p>
<ul>
<li><a href="https://router.vuejs.org/guide/advanced/scroll-behavior.html" target="_blank" rel="noopener">Scroll Behavior | Vue Router</a></li>
<li><a href="https://github.com/vuejs/vuepress/blob/master/packages/%40vuepress/core/lib/client/app.js" target="_blank" rel="noopener">Vuepress | GitHub</a></li>
</ul>
</blockquote>
<p>打开<code>node_modules\@vuepress\core\lib\client\app.js</code>，在里面找到 <code>vue-router</code> 实例的创建语句：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  base: routerBase,</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  fallback: <span class="literal">false</span>,</span><br><span class="line">  routes,</span><br><span class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">    <span class="keyword">if</span> (savedPosition) &#123;</span><br><span class="line">      <span class="keyword">return</span> savedPosition</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (to.hash) &#123;</span><br><span class="line">      <span class="keyword">if</span> (Vue.$vuepress.$<span class="keyword">get</span>('disableScrollBehavior')) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        selector: to.hash</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>把 <code>scrollBehavior</code> 删掉，保存并重新编译</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  base: routerBase,</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  fallback: <span class="literal">false</span>,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>此时，用 <code>$router.push()</code> 跳转页面时，滚动条将保持原来的位置不动。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vuepress</tag>
        <tag>Vue-Router</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（1） Hello World</title>
    <url>/2020/10/26/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89-Hello-World/</url>
    <content><![CDATA[<h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><p>print函数的用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'%d %s %c %f'</span> % (<span class="number">10</span>, <span class="string">'str'</span>, <span class="string">'c'</span>, <span class="number">123.45</span>))</span><br><span class="line">print(<span class="string">'hello'</span>, <span class="string">'world'</span>, sep=<span class="string">', '</span>, end=<span class="string">'!'</span>) <span class="comment"># hello, world!</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>格式化字符串中的参数设定与C语言完全一致，允许诸如<code>%ld</code>, <code>%lf</code>, <code>%10.4f</code>等输入</p>
<p><code>%x</code> 十六进制，<code>%d</code> 十进制，<code>%o</code> 八进制</p>
<p>输出二进制：用<code>bin()</code>函数。例：<code>print(bin(10))</code> -&gt; <code>0b1010</code></p>
</blockquote>
<p>从终端获取用户输入的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = input(<span class="string">'a = '</span>)</span><br></pre></td></tr></table></figure>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul>
<li>整型<ul>
<li>二进制 - <code>0b</code> 开头</li>
<li>八进制 - <code>0o</code> 开头</li>
<li>十六进制 - <code>0x</code> 开头</li>
</ul>
</li>
<li>浮点型<ul>
<li>一般 - <code>123.456</code></li>
<li>科学计数法 - <code>12.3456e5</code>, <code>1e5</code> (科学计数法均针对浮点型)</li>
</ul>
</li>
<li>字符串<ul>
<li>单行 - <code>&#39;&#39;</code> 或 <code>&quot;&quot;</code></li>
<li>多行 - <code>&#39;&#39;&#39;</code> 或 <code>&quot;&quot;&quot;</code></li>
</ul>
</li>
<li>布尔型 - <code>True</code> or <code>False</code></li>
<li>复数型 - <code>3 + 5j</code></li>
</ul>
<h3 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">12.345</span></span><br><span class="line">c = <span class="number">1</span> + <span class="number">5j</span></span><br><span class="line">d = <span class="string">'hello, world'</span></span><br><span class="line">e = <span class="literal">True</span></span><br><span class="line">print(type(a))  <span class="comment"># &lt;class 'int'&gt;</span></span><br><span class="line">print(type(b))  <span class="comment"># &lt;class 'float'&gt;</span></span><br><span class="line">print(type(c))  <span class="comment"># &lt;class 'complex'&gt;</span></span><br><span class="line">print(type(d))  <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(type(e))  <span class="comment"># &lt;class 'bool'&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul>
<li><code>int()</code><ul>
<li><code>int(123.345)</code> -&gt; <code>123</code></li>
<li><code>int(&#39;123&#39;)</code> -&gt; <code>123</code></li>
<li><code>int(123s)</code>, <code>int(&#39;123.45&#39;)</code> -&gt; 报错</li>
<li><code>int(0b100)</code>, <code>int(0o100)</code>, <code>int(0x100)</code> 不同进制的整型变量</li>
</ul>
</li>
<li><p><code>int(True)</code> -&gt; <code>1</code></p>
<ul>
<li><code>int(False)</code> -&gt; <code>0</code></li>
</ul>
</li>
<li><p><code>float()</code></p>
<ul>
<li><code>float(&#39;123&#39;)</code> -&gt; <code>123.0</code></li>
<li><code>float(&#39;123.123&#39;)</code> -&gt; <code>123.123</code></li>
<li><code>float(123)</code>, <code>float(123.0)</code> -&gt; <code>123.0</code></li>
</ul>
</li>
<li><code>str()</code> 字符串化</li>
<li><p><code>chr()</code> 将整数转成字符，类型为字符串，但只有一个字符</p>
<ul>
<li>整数对应ASCII码</li>
<li><code>chr(65)</code> -&gt; <code>A</code></li>
</ul>
</li>
<li><p><code>ord()</code> 将一个字符转换成ASCII码</p>
<ul>
<li>参数为字符串，长度只能为一个字符</li>
<li><code>ord(&#39;A&#39;)</code> -&gt; <code>65</code></li>
</ul>
</li>
</ul>
<h2 id="运算符与优先级"><a href="#运算符与优先级" class="headerlink" title="运算符与优先级"></a>运算符与优先级</h2><p>优先级<strong>从高到低</strong>的所有运算符</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[]</code> <code>[:]</code></td>
<td>下标，切片</td>
</tr>
<tr>
<td><code>**</code></td>
<td>指数</td>
</tr>
<tr>
<td><code>~</code> <code>+</code> <code>-</code></td>
<td>按位取反,正负号</td>
</tr>
<tr>
<td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td>
<td>乘，除(<strong>结果为浮点型</strong>)，模，整除(<strong>结果为整型</strong>)</td>
</tr>
<tr>
<td><code>+</code> <code>-</code></td>
<td>加，减</td>
</tr>
<tr>
<td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td>
<td>右移，左移</td>
</tr>
<tr>
<td><code>&amp;</code></td>
<td>按位与</td>
</tr>
<tr>
<td><code>^</code> `</td>
<td>`</td>
<td>按位异或，按位或</td>
</tr>
<tr>
<td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td>
<td>小于等于，小于，大于，大于等于</td>
</tr>
<tr>
<td><code>==</code> <code>!=</code></td>
<td>等于，不等于</td>
</tr>
<tr>
<td><code>is</code>  <code>is not</code></td>
<td>身份运算符（是否为同一地址）</td>
</tr>
<tr>
<td><code>in</code> <code>not in</code></td>
<td>成员运算符（针对序列，如字符串、数组、对象）</td>
</tr>
<tr>
<td><code>not</code> <code>or</code> <code>and</code></td>
<td>逻辑运算符（<code>!</code> `</td>
<td></td>
<td><code>`&amp;&amp;</code>）</td>
</tr>
<tr>
<td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> `</td>
<td>=<code>`^=</code> <code>&gt;&gt;=</code> <code>&lt;&lt;=</code></td>
<td>（复合）赋值运算符</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下标，切片</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">b = a[<span class="number">2</span>]    <span class="comment"># 3</span></span><br><span class="line">c = a[<span class="number">2</span>:<span class="number">3</span>]  <span class="comment"># [3]</span></span><br><span class="line">d = a[<span class="number">2</span>:<span class="number">4</span>]  <span class="comment"># [3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指数</span></span><br><span class="line">a = <span class="number">9</span>**<span class="number">2</span>  <span class="comment"># 81</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按位取反</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = ~a  <span class="comment"># -11, ~n = -(n+1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模，整除</span></span><br><span class="line">a = <span class="number">187</span></span><br><span class="line">b = a % <span class="number">10</span>  <span class="comment"># 7</span></span><br><span class="line">c = a // <span class="number">10</span>  <span class="comment"># 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 右移，左移</span></span><br><span class="line">a = <span class="number">326</span></span><br><span class="line">b = a &gt;&gt; <span class="number">2</span></span><br><span class="line">c = a &lt;&lt; <span class="number">2</span></span><br><span class="line">bin(a)  <span class="comment"># 0b101000110</span></span><br><span class="line">bin(b)  <span class="comment"># 0b1010001</span></span><br><span class="line">bin(c)  <span class="comment"># 0b10100011000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按位与，按位异或，按位或</span></span><br><span class="line">a = <span class="number">932</span></span><br><span class="line">b = <span class="number">648</span></span><br><span class="line">c = a &amp; b</span><br><span class="line">d = a ^ b</span><br><span class="line">e = a | b</span><br><span class="line">bin(a)  <span class="comment"># 0b 1 1 1 0 1 0 0 1 0 0</span></span><br><span class="line">bin(b)  <span class="comment"># 0b 1 0 1 0 0 0 1 0 0 0</span></span><br><span class="line">bin(c)  <span class="comment"># 0b 1 0 1 0 0 0 0 0 0 0 -&gt; 同为1时为1，否则为0</span></span><br><span class="line">bin(d)  <span class="comment"># 0b   1 0 0 1 0 1 1 0 0 -&gt; 不同时为1，相同时为0</span></span><br><span class="line">bin(e)  <span class="comment"># 0b 1 1 1 0 1 0 1 1 0 0 -&gt; 有一个为1时为1，否则为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 身份运算符</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line">b <span class="keyword">is</span> a  <span class="comment"># True</span></span><br><span class="line">b = a[:]</span><br><span class="line">b <span class="keyword">is</span> a  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员运算符</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">c = <span class="number">6</span></span><br><span class="line">b <span class="keyword">in</span> a  <span class="comment"># True</span></span><br><span class="line">c <span class="keyword">in</span> a  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">'abcde'</span></span><br><span class="line">b = <span class="string">'c'</span></span><br><span class="line">c = <span class="string">'f'</span></span><br><span class="line">b <span class="keyword">in</span> a  <span class="comment"># True</span></span><br><span class="line">c <span class="keyword">in</span> a  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="string">'a'</span>: <span class="string">'aaa'</span>, <span class="string">'b'</span>: <span class="string">'bbb'</span>, <span class="string">'c'</span>: <span class="string">'ccc'</span>&#125;</span><br><span class="line">b = <span class="string">'b'</span></span><br><span class="line">c = <span class="string">'d'</span></span><br><span class="line">b <span class="keyword">in</span> a  <span class="comment"># True</span></span><br><span class="line">c <span class="keyword">in</span> a  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>
<h1 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h1><ul>
<li><p><code>if</code></p>
</li>
<li><p><code>elif</code></p>
</li>
<li><code>else</code></li>
</ul>
<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="for-in"><a href="#for-in" class="headerlink" title="for-in"></a>for-in</h2><p>用来某个容器进行迭代，这个容器可以用<code>range()</code>指定，也可以是一个数组、对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obj = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">65</span>, <span class="number">70</span>):</span><br><span class="line">    obj[chr(i)] = chr(i) + chr(i) + chr(i)</span><br><span class="line">print(obj)  <span class="comment"># &#123;'A': 'AAA', 'B': 'BBB', 'C': 'CCC', 'D': 'DDD', 'E': 'EEE'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> obj:</span><br><span class="line">    print(obj[c])</span><br></pre></td></tr></table></figure>
<ul>
<li><code>range(100)</code> - 从0到99</li>
<li><code>range(1, 100)</code> - 从1到99</li>
<li><code>range(1, 100, 2)</code> - 1,3,5,7,…,99</li>
</ul>
<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">answer = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    number = int(input(<span class="string">'请输入: '</span>))</span><br><span class="line">    <span class="keyword">if</span> number &lt; answer:</span><br><span class="line">        print(<span class="string">'大一点'</span>)</span><br><span class="line">    <span class="keyword">elif</span> number &gt; answer:</span><br><span class="line">        print(<span class="string">'小一点'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'恭喜你猜对了!'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">'你总共猜了%d次'</span> % counter)</span><br><span class="line"><span class="keyword">if</span> counter &gt; <span class="number">7</span>:</span><br><span class="line">    print(<span class="string">'你的智商余额明显不足'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记（2） 函数和模块</title>
    <url>/2020/10/26/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89-%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h1 id="函数及函数参数"><a href="#函数及函数参数" class="headerlink" title="函数及函数参数"></a>函数及函数参数</h1><h2 id="一般函数及参数定义"><a href="#一般函数及参数定义" class="headerlink" title="一般函数及参数定义"></a>一般函数及参数定义</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义函数，指定参数及其默认值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a=<span class="number">0</span>, b=<span class="number">0</span>, c=<span class="number">0</span>)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> a + b + c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">sum(<span class="number">10</span>)  <span class="comment"># 可不写全</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">sum(b=<span class="number">2</span>, a=<span class="number">1</span>, c=<span class="number">3</span>) <span class="comment"># 自定义顺序</span></span><br></pre></td></tr></table></figure>
<h2 id="两种类型的可变参数"><a href="#两种类型的可变参数" class="headerlink" title="两种类型的可变参数"></a>两种类型的可变参数</h2><ol>
<li><code>*</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用*接收任意数量的非关键字参数（元组()，不是数组[]）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(*a)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># 输出：(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span></span><br></pre></td></tr></table></figure>
<ol>
<li><code>**</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用**接收关键字参数（对象）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(**b)</span>:</span></span><br><span class="line">    print(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func2(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>, four=<span class="number">4</span>, five=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 输出：&#123;'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5&#125;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>混合使用</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">(*a, **b)</span>:</span></span><br><span class="line">    print(<span class="string">'a = '</span>, a)</span><br><span class="line">    print(<span class="string">'b = '</span>, b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func3(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, one=<span class="number">123</span>, two=<span class="number">456</span>, three=<span class="number">789</span>)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># a =  (1, 2, 3, 4, 5)</span></span><br><span class="line"><span class="comment"># b =  &#123;'one': 123, 'two': 456, 'three': 789&#125;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><strong>打包</strong>与<strong>拆解</strong></li>
</ol>
<p>在1,2,3的例子中，<code>*</code> 与 <code>**</code> 起着<strong>打包</strong>的作用，即：将实参中的多个参数打包到一个变量中去</p>
<p>此外，这两个符号还起到<strong>拆解</strong>的作用，其用法与打包相反，且仅用于函数传参中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func4</span><span class="params">(a=<span class="number">0</span>, b=<span class="number">0</span>, c=<span class="number">0</span>, d=<span class="number">0</span>, e=<span class="number">0</span>)</span>:</span></span><br><span class="line">    print(a, b, c, d, e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func5</span><span class="params">(one=<span class="number">0</span>, two=<span class="number">0</span>, three=<span class="number">0</span>, four=<span class="number">0</span>, five=<span class="number">0</span>)</span>:</span></span><br><span class="line">    print(one, two, three, four, five)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">c = &#123;<span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'three'</span>: <span class="number">3</span>, <span class="string">'four'</span>: <span class="number">4</span>, <span class="string">'five'</span>: <span class="number">5</span>&#125;</span><br><span class="line">func4(a)    <span class="comment"># 输出：(1, 2, 3, 4, 5) 0 0 0 0</span></span><br><span class="line">func4(b)    <span class="comment"># 输出：[1, 2, 3, 4, 5] 0 0 0 0</span></span><br><span class="line">func4(c)    <span class="comment"># 输出：&#123;'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5&#125; 0 0 0 0</span></span><br><span class="line">func4(*a)   <span class="comment"># 输出：1 2 3 4 5</span></span><br><span class="line">func4(*b)   <span class="comment"># 输出：1 2 3 4 5</span></span><br><span class="line">func4(*c)   <span class="comment"># 输出：one two three four five</span></span><br><span class="line">func5(**c)  <span class="comment"># 输出：1 2 3 4 5</span></span><br></pre></td></tr></table></figure>
<p>总结来说，<code>*</code> 把一个数组、元组拆分成一个又一个的数据，把键值对的值提取出来，传入到函数中；<code>**</code> 只对键值对处理，把键值对提取为 <code>key=value</code> 的形式传入函数中。</p>
<h1 id="模块化处理"><a href="#模块化处理" class="headerlink" title="模块化处理"></a>模块化处理</h1><h2 id="书写、导入与使用模块"><a href="#书写、导入与使用模块" class="headerlink" title="书写、导入与使用模块"></a>书写、导入与使用模块</h2><p><code>module1.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'module1'</span>)</span><br></pre></td></tr></table></figure>
<p><code>module2.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'module2'</span>)</span><br></pre></td></tr></table></figure>
<p><code>main.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> module1</span><br><span class="line"><span class="keyword">import</span> module2 <span class="keyword">as</span> m2</span><br><span class="line"></span><br><span class="line">module1.func()</span><br><span class="line">m2.func()</span><br></pre></td></tr></table></figure>
<p>也可以写成这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> module1 <span class="keyword">import</span> func <span class="keyword">as</span> f1</span><br><span class="line"><span class="keyword">from</span> module2 <span class="keyword">import</span> func <span class="keyword">as</span> f2</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">f2()</span><br></pre></td></tr></table></figure>
<h2 id="避免模块文件中代码的自动执行"><a href="#避免模块文件中代码的自动执行" class="headerlink" title="避免模块文件中代码的自动执行"></a>避免模块文件中代码的自动执行</h2><p>如果 <code>module1.py</code> 中存在可执行代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'module1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure>
<p>在 <code>main.py</code> 中用 <code>import</code> 导入该模块时，会自动执行模块中除函数定义外的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> module1  <span class="comment"># 输出：hello</span></span><br></pre></td></tr></table></figure>
<p>避免这个问题的解决方法是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'module1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># __name__ 是python的内置变量，代表模块名称</span></span><br><span class="line"><span class="comment"># 当且仅当python的解释器直接执行当前.py文件时，__name__的值为__main__</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure>
<h1 id="规范化书写格式"><a href="#规范化书写格式" class="headerlink" title="规范化书写格式"></a>规范化书写格式</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># add your code here</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>pass</code> 是空语句，不做任何事情，一般用作占位语句，为了保证程序结构的完整性</p>
<p>在vscode中敲一个pass然后换行，可以往前跳一个缩进，可以用来表示当前代码块执行完毕</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用技巧：推送到多个远程仓库</title>
    <url>/2020/10/27/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%EF%BC%9A%E6%8E%A8%E9%80%81%E5%88%B0%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<p>在 <code>.git/config</code> 文件中，添加如下语句：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">remote</span> <span class="string">"all"</span>]</span><br><span class="line">	url = git@github.com:account/repo<span class="literal">-name</span>.git</span><br><span class="line">	fetch = +refs/heads/*:refs/remotes/github/*</span><br><span class="line">	url = git@gitee.com:account/repo<span class="literal">-name</span>.git</span><br><span class="line">	fetch = +refs/heads/*:refs/remotes/gitee/*</span><br></pre></td></tr></table></figure>
<blockquote>
<p>前两句指明了远程仓库地址，下面两句如果不加，会导致推送时仅完成了<code>push</code>，而本地保存的分支情况并没有得到更新，更新分支的过程即<code>fetch</code>。当我们使用命令<code>git push origin master</code>推送到远程仓库时，推送结束后<code>git</code>会自动执行一次<code>fetch</code>操作，保证本地与远程的分支情况一致。</p>
</blockquote>
<p>定义自动执行的<code>fetch</code>操作通过在<code>.git/config</code>文件中添加如上所示的<code>fetch</code>语句实现，否则当输入<code>git branch -v -a</code>查看所有分支时，会出现如下所示尴尬情况。</p>
<p><img src="/images/image-20201027190748366.png" alt="image-20201027190748366"></p>
<blockquote>
<p>不过加上了两句fetch好像也没用，只有写在前面的fetch语句中的仓库能更新远程分支情况，就像下面这样</p>
<p><img src="/images/image-20201027193917687.png" alt="image-20201027193917687"></p>
</blockquote>
<p>打开终端输入 <code>git push all</code>，即可实现推送到多个仓库。在<code>.git/config</code>下方找到如下语句，将<code>remote</code>的值改为<code>all</code>，仅输入<code>git push</code>即可实现多仓库推送（使用VS Code的版本控制系统的点击推送功能需要用到这个设置）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">branch</span> <span class="string">"master"</span>]</span><br><span class="line">	remote = all</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用技巧：使用Node.js实现批量替换图片链接前缀</title>
    <url>/2020/10/27/Hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%EF%BC%9A%E4%BD%BF%E7%94%A8Node-js%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%E5%89%8D%E7%BC%80/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 替换文件夹下所有md文件的图片链接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addImageUrlPreffix = <span class="function">(<span class="params">dirName, preffix = <span class="string">'/images'</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 过滤非.md</span></span><br><span class="line">    <span class="keyword">let</span> fileNames = fs.readdirSync(dirName).filter(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="regexp">/[\w|\W]*\.md/</span>.test(val);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> fName <span class="keyword">of</span> fileNames) &#123;</span><br><span class="line">        <span class="keyword">let</span> fileStr = fs.readFileSync(<span class="string">`<span class="subst">$&#123;dirName&#125;</span>/<span class="subst">$&#123;fName&#125;</span>`</span>).toString();</span><br><span class="line">        <span class="keyword">let</span> fileStrBak = fileStr;</span><br><span class="line">        <span class="keyword">let</span> urls = [];</span><br><span class="line">        <span class="keyword">let</span> beginAt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> endAt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> matchResult;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找图片链接</span></span><br><span class="line">        <span class="keyword">while</span> (matchResult = fileStr.match(<span class="regexp">/(!\[[\w|\W]*?\]\()(\/?[\w|\W]*?)(\))/</span>)) &#123;</span><br><span class="line">            <span class="keyword">let</span> firstBlock = matchResult[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">let</span> imgUrl = matchResult[<span class="number">2</span>];</span><br><span class="line">            beginAt = endAt + matchResult.index + firstBlock.length;</span><br><span class="line">            endAt = beginAt + imgUrl.length;</span><br><span class="line"></span><br><span class="line">            fileStr = fileStr.substr(matchResult.index + firstBlock.length + imgUrl.length, fileStr.length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 加上绝对路径</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="regexp">/^\//</span>.test(imgUrl)) &#123;</span><br><span class="line">                imgUrl = <span class="string">`/<span class="subst">$&#123;imgUrl&#125;</span>`</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            urls.push(&#123;</span><br><span class="line">                imgUrl,</span><br><span class="line">                beginAt,</span><br><span class="line">                endAt</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (urls.length == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从字符串尾部写上来</span></span><br><span class="line">        urls.reverse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 批量替换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> &#123; imgUrl, beginAt, endAt &#125;</span><br><span class="line">            <span class="keyword">of</span> urls) &#123;</span><br><span class="line">            <span class="keyword">let</span> str1 = fileStrBak.substr(<span class="number">0</span>, beginAt);</span><br><span class="line">            <span class="keyword">let</span> str2 = fileStrBak.substr(endAt, fileStrBak.length);</span><br><span class="line">            fileStrBak = str1 + preffix + imgUrl + str2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入文件</span></span><br><span class="line">        fs.writeFileSync(<span class="string">`<span class="subst">$&#123;dirName&#125;</span>/<span class="subst">$&#123;fName&#125;</span>`</span>, fileStrBak);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;dirName&#125;</span>/<span class="subst">$&#123;fName&#125;</span>, number: <span class="subst">$&#123;urls.length&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dPath = path.resolve(__dirname, <span class="string">'./source/_drafts'</span>);</span><br><span class="line"><span class="keyword">const</span> pPath = path.resolve(__dirname, <span class="string">'./source/_posts'</span>);</span><br><span class="line"></span><br><span class="line">addImageUrlPreffix(dPath);</span><br><span class="line">addImageUrlPreffix(pPath);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
        <tag>Hexo</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora自定义主题&amp;主题推荐</title>
    <url>/2020/10/27/Typora%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98-%E4%B8%BB%E9%A2%98%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<h1 id="1-主题推荐"><a href="#1-主题推荐" class="headerlink" title="1 主题推荐"></a>1 主题推荐</h1><p>Typora官方提供了一个主题汇总（ <a href="http://theme.typora.io/" target="_blank" rel="noopener">http://theme.typora.io/</a> ）可以自行前往下载，稍微筛选了一下，挑选了三款适合自己的主题。</p>
<h2 id="1-1-Mo"><a href="#1-1-Mo" class="headerlink" title="1.1 Mo"></a>1.1 Mo</h2><p>Typora主题链接：<a href="http://theme.typora.io/theme/Mo/" target="_blank" rel="noopener">http://theme.typora.io/theme/Mo/</a></p>
<p>Github：<a href="https://github.com/MarMomento/typora-mo-theme" target="_blank" rel="noopener">https://github.com/MarMomento/typora-mo-theme</a></p>
<p>Download：<a href="https://github.com/MarMomento/typora-mo-theme/releases/latest" target="_blank" rel="noopener">https://github.com/MarMomento/typora-mo-theme/releases/latest</a></p>
<p>评价：有亮暗两种主题，整体效果较为霸气，文字屏幕占比较高，代码显示花里胡哨，辨识度极高。标题居中可能有会逼死强迫症，不过用来阅读大量文字的话整体效果很好。</p>
<p><img src="/images/image-20201027204112332.png" alt="image-20201027204112332"></p>
<p><img src="/images/image-20201027204020765.png" alt="image-20201027204020765"></p>
<h2 id="1-2-Gitbook"><a href="#1-2-Gitbook" class="headerlink" title="1.2 Gitbook"></a>1.2 Gitbook</h2><p>Typora主题链接：<a href="http://theme.typora.io/theme/Gitbook/" target="_blank" rel="noopener">http://theme.typora.io/theme/Gitbook/</a></p>
<p>GitHub：<a href="https://github.com/Henning16/typora-gitbook-theme" target="_blank" rel="noopener">https://github.com/Henning16/typora-gitbook-theme</a></p>
<p>Download：<a href="https://github.com/Henning16/typora-gitbook-theme/releases/latest" target="_blank" rel="noopener">https://github.com/Henning16/typora-gitbook-theme/releases/latest</a></p>
<p>评价：有三种主题，分别为蓝白（Azure）/青白（Teal）/蓝黑（Slate），偏简约风，</p>
<p><img src="/images/image-20201027204532818.png" alt="image-20201027204532818"></p>
<p><img src="/images/image-20201027204549734.png" alt="image-20201027204549734"></p>
<p><img src="/images/image-20201027204616593.png" alt="image-20201027204616593"></p>
<h2 id="1-3-Onedark"><a href="#1-3-Onedark" class="headerlink" title="1.3 Onedark"></a>1.3 Onedark</h2><p>Typora链接：<a href="http://theme.typora.io/theme/OneDark/" target="_blank" rel="noopener">http://theme.typora.io/theme/OneDark/</a></p>
<p>GitHub：<a href="https://github.com/sweatran/typora-onedark-theme" target="_blank" rel="noopener">https://github.com/sweatran/typora-onedark-theme</a></p>
<p>Download：<a href="https://github.com/sweatran/typora-onedark-theme/releases/latest" target="_blank" rel="noopener">https://github.com/sweatran/typora-onedark-theme/releases/latest</a></p>
<p>评价：只有一种配色，就是黑色，整体给人一种严谨、肃穆、深沉的感觉，能有效降低屏幕亮度；代码块色彩的样式丰富，与整体色彩风格搭配恰到好处。</p>
<p><img src="/images/image-20201027204738050.png" alt="image-20201027204738050"></p>
<p><img src="/images/image-20201027204939736.png" alt="image-20201027204939736"></p>
<p><img src="/images/image-20201027205029943.png" alt="image-20201027205029943"></p>
<h1 id="2-Typora自定义主题"><a href="#2-Typora自定义主题" class="headerlink" title="2 Typora自定义主题"></a>2 Typora自定义主题</h1><p>将主题文件的压缩包下载下来之后，将解压出来的<strong>文件夹（如果有）和<code>.css</code>文件</strong>解压到Typora的主题文件夹下（文件-偏好设置-外观-主题-打开主题文件夹），重启Typora，就可以在“主题(T)”查看导入的主题。</p>
<p><img src="/images/image-20201027205747671.png" alt="image-20201027205747671"></p>
<p>这个主题列表是根据<code>.css</code>文件生成的，有的主题（如Gitbook）有种色系，也通过<code>.css</code>控制。</p>
<p><img src="/images/image-20201027205919415.png" alt="image-20201027205919415"></p>
<h1 id="3-修改主题样式"><a href="#3-修改主题样式" class="headerlink" title="3 修改主题样式"></a>3 修改主题样式</h1><p>看来看去，发现不同的主题各有优缺点，很难有一款面面俱到，最终决定对每一款主题进行修改，改成自己想要的样子，在此记录修改的内容。</p>
<h2 id="3-1-Gitbook"><a href="#3-1-Gitbook" class="headerlink" title="3.1 Gitbook"></a>3.1 Gitbook</h2><p>这部分内容的修改需要分别写入到三个文件中：<code>gitbook-azure.css</code>, <code>gitbook-slate.css</code>, <code>gitbook-teal.css</code>。</p>
<ul>
<li>图片：去除原有的白色边框，加上<code>box-shadow</code></li>
<li>倾斜：加上下划线</li>
<li>代码：改成鲜艳色调</li>
<li>宽度：最大宽度限定由<code>850px</code>改为<code>75%</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 自定义样式 */</span></span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">1px</span> <span class="number">#aaa</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">em</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.8em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> dashed <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.8em</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#e96900</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#write</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">75%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 自定义样式结束 */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-theme-next 使用说明</title>
    <url>/2020/10/29/hexo-theme-next-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<blockquote>
<p>参考链接：<a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">https://www.jianshu.com/p/9f0e90cc32c2</a></p>
<p>⭐带有【install】标签的表示需要使用<code>npm</code>安装额外的依赖</p>
</blockquote>
<h1 id="1-安装NexT"><a href="#1-安装NexT" class="headerlink" title="1. 安装NexT"></a>1. 安装NexT</h1><p>GitHub：<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a></p>
<p>安装方法</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> cd blog</span><br><span class="line"><span class="variable">$</span> git clone https://github.com/theme<span class="literal">-next</span>/hexo<span class="literal">-theme</span><span class="literal">-next</span> themes/next</span><br></pre></td></tr></table></figure>
<h1 id="2-更换NexT自带的主题"><a href="#2-更换NexT自带的主题" class="headerlink" title="2. 更换NexT自带的主题"></a>2. 更换NexT自带的主题</h1><p><img src="/images/image-20201028163730400.png" alt="image-20201028163730400"></p>
<p>在目录<code>blog/themes/next</code>下找到<code>_config.yml</code>，找到<code>scheme</code>，Next自带了四个主题Muse/Mist/Pisces/<strong>Gemini</strong>，本人比较喜欢最后一个，页面内容丰富又不失简洁美观。</p>
<p><img src="/images/image-20201028164059153.png" alt="image-20201028164059153"></p>
<h1 id="3-自定义菜单栏"><a href="#3-自定义菜单栏" class="headerlink" title="3. 自定义菜单栏"></a>3. 自定义菜单栏</h1><p>在<code>themes/next/_config.yml</code>中找到<code>menu</code>，这里可以手动开启菜单栏的项目。每一项的第一个参数是页面地址，第二个参数是表示的图标（<em>图标的使用方法见下一节</em>），两个参数之间用<code>||</code>隔开。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment"># schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment"># sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment"># commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要注意的是，只有<code>home</code>和<code>archives</code>不需要额外创建页面，否则需要在<code>sources</code>文件夹下创建不同路径对应的页面（例如，创建about页面：<code>hexo new page &quot;about&quot;</code>）</p>
</blockquote>
<p>创建了<code>tags</code>和<code>categories</code>之后，需要将<code>tags/index.md</code>和<code>categories/index.md</code>文件的<code>yml</code>配置加上<code>type</code>字段，<strong>否则NexT无法自动在文章标签和分类页面下填充内容</strong>。</p>
<p>tags/index.md</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">博客文章标签</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20201028205610535.png" alt="image-20201028205610535"></p>
<p>categories/index.md</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">博客文章分类</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">categories</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20201028205557994.png" alt="image-20201028205557994"></p>
<h1 id="4-Fontawesome图标的使用"><a href="#4-Fontawesome图标的使用" class="headerlink" title="4. Fontawesome图标的使用"></a>4. Fontawesome图标的使用</h1><p>NexT中引入了<a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Fontawesome</a>的免费图标，可以在官网<strong>选择</strong>样式使用。除了将fa的图标用于博客侧边栏，还可以直接在<code>.md</code>中通过<code>&lt;i&gt;</code>标签引用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">你若对我的博客感兴趣，欢迎与我联系</span><br><span class="line">- <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-github fa-2x"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> GitHub: https://github.com/whuls</span><br><span class="line">- <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-git fa-2x"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Gitee: https://gitee.com/whuls</span><br><span class="line">- <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-envelope fa-2x"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Emal:</span><br><span class="line">    - hayzlsls@163.com</span><br><span class="line">    - hayzlsls@whu.edu.cn</span><br><span class="line">    - hayzlsls@gmail.com</span><br><span class="line">- <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-qq fa-2x"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> QQ: 1009192559</span><br><span class="line">- <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-weixin fa-2x"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> WeChat: WHU_LinS</span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20201028173339415.png" alt="image-20201028173339415"></p>
<h1 id="5-添加Github-Corner"><a href="#5-添加Github-Corner" class="headerlink" title="5. 添加Github Corner"></a>5. 添加Github Corner</h1><p>在右上角添加一个角标，点击跳转到Github或者其他链接，效果如图所示：</p>
<p><img src="/images/image-20201028205713506.png" alt="image-20201028205713506"></p>
<p>在<a href="https://tholman.com/github-corners/" target="_blank" rel="noopener">Github Corner</a>挑选一款喜欢的样式，然后复制代码到<code>themes/next/layout/_layout.swig</code>文件的<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下一行。</p>
<p><img src="/images/image-20201028205812897.png" alt="image-20201028205812897"></p>
<p><img src="/images/image-20201028205931427.png" alt="image-20201028205812897"></p>
<h1 id="6-修改文末的标签图标"><a href="#6-修改文末的标签图标" class="headerlink" title="6. 修改文末的标签图标"></a>6. 修改文末的标签图标</h1><p>在<code>themes/next/_config.yml</code>中找到<code>tag_icon</code>，改值为<code>true</code>，即可查看效果。</p>
<p><img src="/images/image-20201028210541179.png" alt="image-20201028210541179"></p>
<p>如果需要自定义图标，打开<code>themes/next/layout/_macro/post.swig</code>，找到<code>class=&quot;post-footer&quot;</code>，修改相关语句。</p>
<p><img src="/images/image-20201028210704491.png" alt="image-20201028210704491"></p>
<h1 id="7-自定义网站图标-amp-添加头像"><a href="#7-自定义网站图标-amp-添加头像" class="headerlink" title="7. 自定义网站图标&amp;添加头像"></a>7. 自定义网站图标&amp;添加头像</h1><p>准备好图标和头像文件，放在<code>sources/images</code>文件夹或<code>themes/next/sources/images</code>文件夹下。</p>
<p><img src="/images/image-20201028220051959.png" alt="image-20201028220051959"></p>
<ol>
<li>在<code>themes/next/_config.yml</code>中找到<code>favicon</code>，修改图标路径</li>
</ol>
<p><img src="/images/image-20201028220205012.png" alt="image-20201028220205012"></p>
<ol>
<li>在<code>themes/next/_config.yml</code>中找到<code>avatar</code>，修改头像路径，并将头像的显示样式改为圆形</li>
</ol>
<p><img src="/images/image-20201028220350911.png" alt="image-20201028220350911"></p>
<p>最终效果如下：</p>
<p><img src="/images/image-20201028220514100.png" alt="image-20201028220514100"></p>
<p><img src="/images/image-20201028220509903.png" alt="image-20201028220509903"></p>
<h1 id="8-【install】文章字数统计和阅读时长估计"><a href="#8-【install】文章字数统计和阅读时长估计" class="headerlink" title="8. 【install】文章字数统计和阅读时长估计"></a>8. 【install】文章字数统计和阅读时长估计</h1><p>安装插件<code>hexo-symbols-count-time</code>（<a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">theme-next/hexo-symbols-count-time</a>），不需要任何配置，即可打开字数统计功能。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-symbols</span><span class="literal">-count</span><span class="literal">-time</span></span><br></pre></td></tr></table></figure>
<p>在<code>themes/next/_config.yml</code>中的<code>symbols_count_time</code>用来配置字数统计的显示样式</p>
<p><img src="/images/image-20201028222951053.png" alt="image-20201028222951053"></p>
<p><img src="/images/image-20201028223035588.png" alt="image-20201028223035588"></p>
<blockquote>
<p>图片上下分别是设置<code>item_text_xxxx</code>为<code>true</code>和<code>false</code>的显示效果</p>
</blockquote>
<h1 id="9-添加Gitalk"><a href="#9-添加Gitalk" class="headerlink" title="9. 添加Gitalk"></a>9. 添加Gitalk</h1><p>Gitalk是基于Github Issues的博客评论系统，允许用户在浏览博客时使用自己的GitHub账号登录，发表评论。发表后的评论存放在一个公开的GitHub仓库下（通常是Git Pages托管的仓库）。</p>
<blockquote>
<ul>
<li>安装参考：<a href="https://blog.csdn.net/weiwosuoai/article/details/100032034" target="_blank" rel="noopener">https://blog.csdn.net/weiwosuoai/article/details/100032034</a></li>
<li>Gitalk Home Page：<a href="https://gitalk.github.io/" target="_blank" rel="noopener">https://gitalk.github.io/</a></li>
<li>Gitalk GitHub：<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">https://github.com/gitalk/gitalk</a></li>
</ul>
</blockquote>
<p>在NexT中打开Gitalk的方法如下：</p>
<ol>
<li>打开<code>themes/next/_config.yml</code>，找到Gitalk：</li>
</ol>
<p><img src="/images/image-20201029155334603.png" alt="image-20201029155334603"></p>
<ol>
<li>进入GitHub的开发者设置（<a href="https://github.com/settings/developers" target="_blank" rel="noopener">Developer settings</a>），新建一个OAuth Apps</li>
</ol>
<p><img src="/images/image-20201029155641668.png" alt="image-20201029155641668"></p>
<ol>
<li>将OAuth Apps的<code>Client ID</code>和<code>Client secret</code>复制到<code>themes/next/_config.yml</code>的对应位置，并将其他相应字段修改为以下形式</li>
</ol>
<p><img src="/images/image-20201029160010902.png" alt="image-20201029160010902"></p>
<blockquote>
<p><strong>问题一</strong>：未找到相关Issues</p>
<p><strong>解决</strong>：正式部署后，使用本人账号在博客下登录GitHub，浏览文章后会自动创建评论</p>
<p><img src="/images/image-20201029160901524.png" alt="image-20201029160901524"></p>
<p><strong>问题二</strong>：仓库未找到（Not Found）</p>
<p><strong>解决</strong>：检查<code>gitalk.repo</code>的填写内容，是否为仓库名称，<strong>不需要填写完整仓库地址</strong>，Gitalk会通过<code>gitalk.github_id</code>自动查找</p>
<p><img src="/images/image-20201029161216012.png" alt="image-20201029161216012"></p>
</blockquote>
<h1 id="10-【install】站内搜索"><a href="#10-【install】站内搜索" class="headerlink" title="10. 【install】站内搜索"></a>10. 【install】站内搜索</h1><p>搜索站内文章或内容，使用NexT的<code>hexo-generator-searchdb</code>，需要额外安装依赖：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator</span><span class="literal">-searchdb</span></span><br></pre></td></tr></table></figure>
<p>在<code>themes/next/_config.yml</code>中打开站内搜索功能：</p>
<p><img src="/images/image-20201028224649223.png" alt="image-20201028224649223"></p>
<p>即可实现站内搜索：</p>
<p><img src="/images/image-20201028224720131.png" alt="image-20201028224720131"></p>
<p><img src="/images/image-20201028224809101.png" alt="image-20201028224809101"></p>
<h1 id="11-数学公式"><a href="#11-数学公式" class="headerlink" title="11. 数学公式"></a>11. 数学公式</h1><p>NexT提供了两种公式支持插件：<code>mathjax</code>和<code>katex</code>，在<code>themes/next/_config.yml</code>中找到<code>math</code>启用插件。</p>
<p><img src="/images/image-20201029162932909.png" alt="image-20201029162932909"></p>
<p>此外，需要使用公式的文章需要在<code>Front-matter</code>中添加字段：<code>mathjax: true</code>，该设置适用于Mathjax和Katex两种插件。</p>
<h2 id="11-1-【install】Katex"><a href="#11-1-【install】Katex" class="headerlink" title="11.1 【install】Katex"></a>11.1 【install】Katex</h2><p>Hexo默认使用<code>hexo-renderer-marked</code>作为渲染器渲染文章，它对于LaTex公式的支持极差，而要是用Katex公式，NexT开发者推荐使用<code>hexo-renderer-markdown-it-plus</code>渲染器，由于这两个渲染器在功能上重复，并且在处理公式时存在重复渲染的冲突，因此建议将默认的渲染器删除，使用<code>markdown-it-plus</code>作为包含Katex公式和文章的渲染器。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo<span class="literal">-renderer</span><span class="literal">-marked</span> <span class="literal">-D</span></span><br><span class="line">npm install hexo<span class="literal">-renderer</span><span class="literal">-markdown</span><span class="literal">-it</span><span class="literal">-plus</span> <span class="literal">-S</span></span><br></pre></td></tr></table></figure>
<p>将<code>math.katex.enable</code>设置为<code>true</code>，即可在文章中渲染公式，Katex渲染的效果如下所示：</p>
<p><img src="/images/image-20201029163304435.png" alt="image-20201029163304435"></p>
<blockquote>
<p><code>math.katex.copy_tex</code>开关打开后，将启用<a href="https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex" target="_blank" rel="noopener">copy-tex</a>，当用户点击公式时，自动选择整条公示内容，便于复制。</p>
<p><img src="/images/image-20201029195946595.png" alt="image-20201029195946595"></p>
</blockquote>
<h2 id="11-2-【install】Mathjax"><a href="#11-2-【install】Mathjax" class="headerlink" title="11.2 【install】Mathjax"></a>11.2 【install】Mathjax</h2><p>在安装插件<code>hexo-renderer-markdown-it-plus</code>之后，直接打开<code>math.mathjax.enable</code>开关，会出现奇怪的现象：所有的公式在文中连续出现了两次，一次是渲染后的，一次是未渲染成功的（如下图所示）。</p>
<p><img src="/images/image-20201029163331708.png" alt="image-20201029163331708"></p>
<p>网上关于在NexT中使用Mathjax的教程通常是先安装一个<code>hexo-renderer-kramed</code>渲染器，接着在<code>node_modules</code>文件夹中各种修改代码、修改匹配规则的正则表达式。但是在最新的<code>kramed</code>渲染器中，不需要修改依赖中的任何源码，即可实现渲染Mathjax的目标。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm i hexo<span class="literal">-renderer</span><span class="literal">-krarmed</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装完成<code>hexo-renderer-kramed</code>后，打开Mathjax的开关，公式页面的渲染效果与上方完全一致，导致这个问题的原因在于<code>markdown-it-plus</code>和<code>kramed</code>在某些处理上冲突了，解决的办法就是删除<code>hexo-renderer-markdown-it-plus</code>渲染器。</p>
</blockquote>
<p><img src="/images/image-20201029201928385.png" alt="image-20201029201928385"></p>
<h2 id="11-3-总结：用哪种渲染器？"><a href="#11-3-总结：用哪种渲染器？" class="headerlink" title="11.3 总结：用哪种渲染器？"></a>11.3 总结：用哪种渲染器？</h2><p>从以上两节的论述可以看出，两种渲染器之间存在一定的冲突，当<code>hexo-renderer-markdown-it-plus</code>和<code>hexo-renderer-kramed</code>同时存在时，只有Katex保持原有样式不变，而Mathjax存在公式重复的现象，几个插件存在形式下公式渲染的效果如下表总结所示。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>组合</th>
<th>Katex</th>
<th>Mathjax</th>
</tr>
</thead>
<tbody>
<tr>
<td>markdown-it-plus ➕ kramed</td>
<td>正常，可复制⭕</td>
<td>重复显示❌</td>
</tr>
<tr>
<td>markdown-it-plus</td>
<td>正常，可复制⭕</td>
<td>重复显示❌</td>
</tr>
<tr>
<td>kramed</td>
<td>不显示❌</td>
<td>正常，<strong>丰富的Mathjax操作</strong>⭕</td>
</tr>
<tr>
<td>marked</td>
<td>渲染成统一样式，不可选中复制❌</td>
<td>渲染成统一样式，不可选中复制❌</td>
</tr>
</tbody>
</table>
</div>
<p>总结来说，从速度上说，Katex的渲染速度极快，Mathjax稍为逊色；从渲染效果来看，Katex字体较为呆板，与正文文字区分度不高，Mathjax渲染出来的公式与正文有较高的区分度；从用户交互体验来看，Katex只提供了复制功能，可以打开<code>math.katex.copy_tex</code>开关提升复制效率，但Mathjax在用户交互上做得更加突出，右键公式可以实现<strong>丰富的内容拷贝（MathML &amp; TeX）</strong>以及<strong>公式放大</strong>、<strong>整体大小调整</strong>等功能（如下图所示）。</p>
<p><img src="/images/image-20201029204007126.png" alt="image-20201029204007126"></p>
<p><img src="/images/image-20201029204325447.png" alt="image-20201029204325447"></p>
<p><img src="/images/image-20201029204336230.png" alt="image-20201029204336230"></p>
<blockquote>
<p>不必纠结了，渲染器选<code>hexo-renderer-kramed</code>，插件用Mathjax！</p>
</blockquote>
<h1 id="12-代码高亮"><a href="#12-代码高亮" class="headerlink" title="12. 代码高亮"></a>12. 代码高亮</h1><p>NexT内置了<a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="noopener">tomorrow-theme</a>代码高亮模式，包含了<code>normal</code>, <code>night</code>, <code>night eighties</code>,  <code>night blue</code>,  <code>night bright</code> , <code>solarized</code> , <code>solarized dark</code>,  <code>galactic</code>九种代码高亮模式和<code>default</code>, <code>flat</code>, <code>mac</code>三中代码复制按钮样式。</p>
<p>在<code>themes/next/_config.yml</code>中找到<code>codeblock.highlight_theme</code>，可以配置代码区域的样式。</p>
<p><img src="/images/image-20201029210719723.png" alt="image-20201029210719723"></p>
<blockquote>
<p>在Hexo中，针对<strong>不同代码采用不同的高亮形式</strong>目前来看没有很好的解决方案，因此只能所有的代码使用一套高亮方案。</p>
</blockquote>
<h2 id="solarized-mac"><a href="#solarized-mac" class="headerlink" title="solarized + mac"></a>solarized + mac</h2><p><img src="/images/image-20201029210816781.png" alt="image-20201029210816781"></p>
<h2 id="solarized-default"><a href="#solarized-default" class="headerlink" title="solarized + default"></a>solarized + default</h2><p><img src="/images/image-20201029210907110.png" alt="image-20201029210907110"></p>
<h2 id="solarized-flat"><a href="#solarized-flat" class="headerlink" title="solarized + flat"></a>solarized + flat</h2><p><img src="/images/image-20201029210928852.png" alt="image-20201029210928852"></p>
<h2 id="normal-mac"><a href="#normal-mac" class="headerlink" title="normal + mac"></a>normal + mac</h2><p><img src="/images/image-20201029211006627.png" alt="image-20201029211006627"></p>
<h2 id="night-mac"><a href="#night-mac" class="headerlink" title="night + mac"></a>night + mac</h2><p><img src="/images/image-20201029211108427.png" alt="image-20201029211108427"></p>
<h2 id="night-eighties-mac"><a href="#night-eighties-mac" class="headerlink" title="night eighties + mac"></a>night eighties + mac</h2><p><img src="/images/image-20201029211126917.png" alt="image-20201029211126917"></p>
<h2 id="night-blue-mac"><a href="#night-blue-mac" class="headerlink" title="night blue + mac"></a>night blue + mac</h2><p><img src="/images/image-20201029211146772.png" alt="image-20201029211146772"></p>
<h2 id="night-bright-mac"><a href="#night-bright-mac" class="headerlink" title="night bright + mac"></a>night bright + mac</h2><p><img src="/images/image-20201029211205293.png" alt="image-20201029211205293"></p>
<h2 id="solarized-dark-mac"><a href="#solarized-dark-mac" class="headerlink" title="solarized dark + mac"></a>solarized dark + mac</h2><p><img src="/images/image-20201029211241398.png" alt="image-20201029211241398"></p>
<h2 id="galactic-mac"><a href="#galactic-mac" class="headerlink" title="galactic + mac"></a>galactic + mac</h2><p><img src="/images/image-20201029211259188.png" alt="image-20201029211259188"></p>
<h1 id="13-整体样式的优化"><a href="#13-整体样式的优化" class="headerlink" title="13. 整体样式的优化"></a>13. 整体样式的优化</h1><p>将以下代码拷贝到<code>themes/next/source/css/_schemes/Gemini/index.styl</code>的最后（使用Gemini主题时），如果需要应用到所有主题，拷贝到<code>themes/next/source/css/main.styl</code>的最后。</p>
<h2 id="13-1-blockquote引用块"><a href="#13-1-blockquote引用块" class="headerlink" title="13.1 blockquote引用块"></a>13.1 blockquote引用块</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// blockquote 引用块</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.post-body</span> <span class="selector-tag">blockquote</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f5f7f9</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">4px</span> solid <span class="built_in">rgb</span>(<span class="number">56</span>, <span class="number">132</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0.3rem</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.post-body</span> <span class="selector-tag">blockquote</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20201030190717762.png" alt="image-20201030190717762"></p>
<h2 id="13-2-链接"><a href="#13-2-链接" class="headerlink" title="13.2 链接"></a>13.2 链接</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// a 链接（不处理'目录'和'阅读全文按钮'的链接）</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.post-body</span>&gt;*<span class="selector-pseudo">:not(.post-body-toc)</span><span class="selector-pseudo">:not(.post-button)</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#3884FF</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.post-body</span>&gt;*<span class="selector-pseudo">:not(.post-body-toc)</span><span class="selector-pseudo">:not(.post-button)</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#2d6cd2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20201030190751108.png" alt="image-20201030190751108"></p>
<blockquote>
<p>其中，<code>*：not(.post-body-toc)</code>用于排除掉目录中的链接，结合<em>下一节</em>看。</p>
</blockquote>
<h2 id="13-3-行内代码"><a href="#13-3-行内代码" class="headerlink" title="13.3 行内代码"></a>13.3 行内代码</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 行内代码</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.post-body</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.8em</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#e96900</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20201030190824694.png" alt="image-20201030190824694"></p>
<h2 id="13-4-图片"><a href="#13-4-图片" class="headerlink" title="13.4 图片"></a>13.4 图片</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图片</span></span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.post-body</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">1px</span> <span class="number">#aaa</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="13-5-代码片段"><a href="#13-5-代码片段" class="headerlink" title="13.5 代码片段"></a>13.5 代码片段</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码片段</span></span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.post-body</span> <span class="selector-class">.highlight-container</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">20px</span> <span class="number">0</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.post-body</span> <span class="selector-class">.highlight-container</span> ::selection &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20201030191040629.png" alt="image-20201030191040629"></p>
<h2 id="13-6-斜体字"><a href="#13-6-斜体字" class="headerlink" title="13.6 斜体字"></a>13.6 斜体字</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// em 斜体字</span></span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.post-body</span> <span class="selector-tag">em</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.8em</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> dashed <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20201030191152796.png" alt="image-20201030191152796"></p>
<h1 id="14-弃用-hexo-toc，自己写目录"><a href="#14-弃用-hexo-toc，自己写目录" class="headerlink" title="14. 弃用 hexo-toc，自己写目录"></a>14. 弃用 hexo-toc，自己写目录</h1><h2 id="14-1-需求分析"><a href="#14-1-需求分析" class="headerlink" title="14.1 需求分析"></a>14.1 需求分析</h2><p>以往的做法，安装<code>hexo-toc</code>之后，在每篇文章的Front-matter处通过<code>toc: true</code>打开目录，在文中任意地方标上<code>&lt;!-- toc --&gt;</code>表示目录的位置。但是使用NexT之后，<code>hexo-toc</code>与其产生了点冲突，当文章中生成目录之后，侧边栏的目录列表怎么都点不了，其所有链接的<code>href</code>都被设置成了<code>#</code>。</p>
<p><img src="/images/image-20201030172829537.png" alt="image-20201030172829537"></p>
<p>如果将<code>hexo-toc</code>卸载，或者设置<code>toc</code>为<code>false</code>，则目录可以正常生成，但文章开头的目录就不存在。</p>
<p><img src="/images/image-20201030183527222.png" alt="image-20201030183527222"></p>
<p>文章开头的目录列表<strong>不仅使得文章结构完整，还有助于手机浏览</strong>，不可或缺；侧边栏的目录<strong>便于在浏览过程中切换章节</strong>，同样不能少。因此需要找到二者共存的方法，此外，<code>hexo-toc</code>已被弃用，安装它的过程受到了极大的阻力（各种<code>deprecated</code>），于是打算自己写<strong>在文章开头显示目录</strong>的代码。</p>
<p><img src="/images/image-20201030173338124.png" alt="image-20201030173338124"></p>
<h2 id="14-2-目录生成：从0到1"><a href="#14-2-目录生成：从0到1" class="headerlink" title="14.2 目录生成：从0到1"></a>14.2 目录生成：从0到1</h2><p>在<code>themes/next/layout/_macro/post.swig</code>中找到POST BODY的代码位置：</p>
<p><img src="/images/image-20201030183634967.png" alt="image-20201030183634967"></p>
<p>参考<code>themes/next/layout/_macro/sidebar.swig</code>中侧边栏目录的写法：</p>
<p><img src="/images/image-20201030183804105.png" alt="image-20201030183804105"></p>
<p>在POST BODY中写入如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;# 自动生成目录 #&#125;</span><br><span class="line">&#123;%- set toc = toc(page.content, &#123; class: "post-body-toc", list_number: false, max_depth: 6 &#125;) %&#125;</span><br><span class="line">&#123;%- <span class="keyword">set</span> display_toc = toc.length &gt; 1 and not is_index %&#125;</span><br><span class="line">&#123;%- <span class="keyword">if</span> display_toc %&#125;</span><br><span class="line">&#123;&#123; toc &#125;&#125;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>
<p>生成成功。</p>
<p><img src="/images/image-20201030184144616.png" alt="image-20201030184144616"></p>
<h2 id="14-3-优化目录样式：从1到2"><a href="#14-3-优化目录样式：从1到2" class="headerlink" title="14.3 优化目录样式：从1到2"></a>14.3 优化目录样式：从1到2</h2><p>打开主题样式文件（参考<em>上一节</em>），为<code>.post-body-toc</code>书写样式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.post-body-toc</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">word-spacing</span>: <span class="number">0.2em</span>;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">0.05em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.post-body-toc</span> <span class="selector-class">.post-body-toc-level-1</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.post-body-toc</span> <span class="selector-class">.post-body-toc-level-2</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: circle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.post-body-toc</span> <span class="selector-class">.post-body-toc-level-3</span>,</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.post-body-toc</span> <span class="selector-class">.post-body-toc-level-4</span>,</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.post-body-toc</span> <span class="selector-class">.post-body-toc-level-5</span>,</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-class">.post-body-toc</span> <span class="selector-class">.post-body-toc-level-6</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: square;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优化后的效果如下所示。</p>
<p><img src="/images/image-20201030185934781.png" alt="image-20201030185934781"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Fontawesome</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron.js学习笔记（1） 安装与构建第一个应用</title>
    <url>/2020/11/05/Electron-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89-%E5%AE%89%E8%A3%85%E4%B8%8E%E6%9E%84%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<ul>
<li>官方文档：<a href="https://www.electronjs.org/docs" target="_blank" rel="noopener">Documentation | Electron</a></li>
</ul>
<h1 id="使用国内镜像提升安装速度"><a href="#使用国内镜像提升安装速度" class="headerlink" title="使用国内镜像提升安装速度"></a>使用国内镜像提升安装速度</h1><p>安装Electron时，可以选择安装在工程目录下或全局目录下，全局的安装可以减少每次创建新项目的安装量，而本地化安装（安装在工程目录下）可以明确使用的Electron版本。</p>
<p>使用<code>npm</code>安装Electron的命令如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i electron -D  # 本地化安装</span><br><span class="line">npm i electron -g  # 全局安装</span><br></pre></td></tr></table></figure>
<p>直接使用<code>npm</code>安装时，程序会自动调用脚本<code>install.js</code>从 <a href="https://github.com/electron/electron/releases" target="_blank" rel="noopener">https://github.com/electron/electron/releases</a> 中下载Electron的二进制包，若访问GitHub的速度较慢，该过程可能会持续很久。</p>
<p>为了提升这一步骤的安装速度，可以使用淘宝提供的npm镜像进行安装，指定镜像路径通过配置环境变量来实现，在powershell中设置环境变量的过程如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">env:ELECTRON_MIRROR=<span class="string">"https://cdn.npm.taobao.org/dist/electron/"</span></span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">env:ELECTRON_MIRROR=<span class="string">"https://npm.taobao.org/mirrors/electron/"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">env:ELECTRON_CUSTOM_DIR=<span class="string">"&#123;&#123; version &#125;&#125;"</span></span></span><br></pre></td></tr></table></figure>
<p>设置完成后，执行Electron的安装命令，即可加快安装速度。（直接使用<code>cnpm</code>安装可以省略配置环境变量，同样使用了淘宝提供的国内镜像）</p>
<h1 id="运行第一个应用"><a href="#运行第一个应用" class="headerlink" title="运行第一个应用"></a>运行第一个应用</h1><p>Electron安装完成后，在根目录下创建三个文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|- main.js</span><br><span class="line">|- package.json</span><br><span class="line">|- index.html</span><br></pre></td></tr></table></figure>
<p>文件的内容分别为：</p>
<p>package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"hello-electron"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"main"</span>: <span class="string">"main.js"</span>,</span><br><span class="line">    <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">        <span class="attr">"start"</span>: <span class="string">"electron ."</span>,</span><br><span class="line">        <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"keywords"</span>: [],</span><br><span class="line">    <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">    <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">        <span class="attr">"electron"</span>: <span class="string">"^10.1.1"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cerateWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        width: <span class="number">800</span>,</span><br><span class="line">        height: <span class="number">600</span>,</span><br><span class="line">        webPreferences: &#123;</span><br><span class="line">            nodeIntegration: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    win.loadFile(<span class="string">'index.html'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.whenReady().then(cerateWindow);</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">        app.quit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (BrowserWindow.getAllWindows().length == <span class="number">0</span>) &#123;</span><br><span class="line">        cerateWindow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"script-src 'self' 'unsafe-inline';"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Electron<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎来到 Electron 至上主义的教室<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    We are using node</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(process.versions.node)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span>, Chrome</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(process.versions.chrome)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span>, and Electron</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(process.versions.electron)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span>.</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在命令行中运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>
<p>若安装及书写过程没有出错，程序将自动弹出软件窗口（如下所示）。<br><img src="https://img-blog.csdnimg.cn/20200908202958567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dIVV9LZXZpbl9MaW4=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h1 id="打包-获取安装包"><a href="#打包-获取安装包" class="headerlink" title="打包 - 获取安装包"></a>打包 - 获取安装包</h1><p>如何将编译好的软件打包生成软件安装包？需要用到<code>electron-builder</code>，安装的命令如下所示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i electron-builder -D</span><br></pre></td></tr></table></figure>
<p>接着在根目录下创建文件<code>electron-builder.yml</code>，写入如下内容：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nsis:</span></span><br><span class="line">  <span class="attr">oneClick:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">allowToChangeInstallationDirectory:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">createDesktopShortcut:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">runAfterFinish:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">deleteAppDataOnUninstall:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">artifactName:</span> <span class="string">'安装$&#123;productName&#125;-v$&#123;version&#125;.$&#123;ext&#125;'</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a href="https://www.electron.build/configuration/nsis" target="_blank" rel="noopener">https://www.electron.build/configuration/nsis</a></p>
</blockquote>
<p>在<code>package.json</code>的<code>script</code>中添加<code>pack:win</code>命令：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"pack:win": "electron-builder -w"</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a href="https://www.electron.build/cli" target="_blank" rel="noopener">https://www.electron.build/cli</a></p>
</blockquote>
<p>运行<code>npm run pack:win</code>，执行打包程序，打包完成后，在根目录下生成<code>dist</code>文件夹，里面包含了安装包和未解压的软件包。</p>
]]></content>
      <categories>
        <category>Electron.js</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
        <tag>Electron.js</tag>
      </tags>
  </entry>
  <entry>
    <title>无人机电力巡检图像AI处理系统学习笔记</title>
    <url>/2020/11/11/%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%94%B5%E5%8A%9B%E5%B7%A1%E6%A3%80%E5%9B%BE%E5%83%8FAI%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>来源：公众号<em>智东西公开课</em></p>
<p><img src="/images/image-20201111193726679.png" alt="image-20201111193726679"></p>
<p>原文地址：<a href="https://mp.weixin.qq.com/s/3UnBeLrOeFjiqZkvuPj7fw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/3UnBeLrOeFjiqZkvuPj7fw</a></p>
</blockquote>
<h1 id="无人机电力巡检发展现状"><a href="#无人机电力巡检发展现状" class="headerlink" title="无人机电力巡检发展现状"></a>无人机电力巡检发展现状</h1><h2 id="需求和挑战"><a href="#需求和挑战" class="headerlink" title="需求和挑战"></a>需求和挑战</h2><p><img src="/images/image-20201111193809899.png" alt="image-20201111193809899"></p>
<p><img src="/images/image-20201111193920853.png" alt="image-20201111193920853"></p>
<p><img src="/images/image-20201111194001101.png" alt="image-20201111194001101"></p>
<h2 id="趋势分析"><a href="#趋势分析" class="headerlink" title="趋势分析"></a>趋势分析</h2><p><img src="/images/image-20201111194152175.png" alt="image-20201111194152175"></p>
<p><img src="/images/image-20201111194342572.png" alt="image-20201111194342572"></p>
<h2 id="“御航智能”的整体方案"><a href="#“御航智能”的整体方案" class="headerlink" title="“御航智能”的整体方案"></a>“御航智能”的整体方案</h2><p><img src="/images/image-20201111194503414.png" alt="image-20201111194503414"></p>
<p><img src="/images/image-20201111194606674.png" alt="image-20201111194606674"></p>
<h2 id="“御航智能”产品体系"><a href="#“御航智能”产品体系" class="headerlink" title="“御航智能”产品体系"></a>“御航智能”产品体系</h2><p><img src="/images/image-20201111195603868.png" alt="image-20201111195603868"></p>
<p><img src="/images/image-20201111195651515.png" alt="image-20201111195651515"></p>
<h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><p><img src="/images/image-20201111195800783.png" alt="image-20201111195800783"></p>
<p><img src="/images/image-20201111195813675.png" alt="image-20201111195813675"></p>
<h1 id="“诸葛神知AI云平台”系统介绍"><a href="#“诸葛神知AI云平台”系统介绍" class="headerlink" title="“诸葛神知AI云平台”系统介绍"></a>“诸葛神知AI云平台”系统介绍</h1><p><img src="/images/image-20201111195923347.png" alt="image-20201111195923347"></p>
<p><img src="/images/image-20201111200244119.png" alt="image-20201111200244119"></p>
<p><img src="/images/image-20201111200330539.png" alt="image-20201111200330539"></p>
<p><img src="/images/image-20201111201112850.png" alt="image-20201111201112850"></p>
<p><img src="/images/image-20201111200611564.png" alt="image-20201111200611564"></p>
<h1 id="“御航智能”在线监测系统"><a href="#“御航智能”在线监测系统" class="headerlink" title="“御航智能”在线监测系统"></a>“御航智能”在线监测系统</h1><p>网址：<a href="http://www.hangkongai.com/zxjc" target="_blank" rel="noopener">http://www.hangkongai.com/zxjc</a></p>
]]></content>
      <categories>
        <category>无人机</category>
      </categories>
      <tags>
        <tag>无人机</tag>
        <tag>电力线巡检</tag>
      </tags>
  </entry>
  <entry>
    <title>使用youtube-dl从B站下载视频</title>
    <url>/2020/10/31/%E4%BD%BF%E7%94%A8youtube-dl%E4%BB%8EB%E7%AB%99%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<blockquote>
<p>youtube-dl - download videos from youtube.com or other video platforms</p>
<p>GitHub: <a href="https://github.com/ytdl-org/youtube-dl/" target="_blank" rel="noopener">https://github.com/ytdl-org/youtube-dl/</a></p>
<p>Gitee Fork: <a href="https://gitee.com/whuls/youtube-dl" target="_blank" rel="noopener">https://gitee.com/whuls/youtube-dl</a></p>
<p>Home Page: <a href="https://yt-dl.org/" target="_blank" rel="noopener">https://yt-dl.org/</a> </p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个开源工具触犯到了某些人的利益，所以现在它的主页是这个样子的：</p>
<p><img src="/images/image-20201031160520310.png" alt="image-20201031160520310"></p>
<p>以后会不会有更严重的制裁或者封禁不得而知，不过按照目前的形势，RIAA（美国唱片业协会）利用DMCA（数字千年版权法）对微软收购的GitHub施压，触犯了社区禁忌，着实有点不得人心。</p>
<p>目前来看，这是开源平台这一中间灰色地带受到资本干涉的第一个例子，为表抗议，许多开源社区的用户已经将这个仓库的Fork到其他账户下或者其他平台上，表达对资本的抗议以及对开源软件的保护。</p>
<h1 id="安装youtube-dl（Windows系统）"><a href="#安装youtube-dl（Windows系统）" class="headerlink" title="安装youtube-dl（Windows系统）"></a>安装youtube-dl（Windows系统）</h1><p>言归正传，安装youtube-dl可以直接通过官网（ <a href="https://yt-dl.org/download.html" target="_blank" rel="noopener">https://yt-dl.org/download.html</a> ），不过出于安全考虑，我在gitee上面备份了一个Windows的发行版，可以直接在<a href="https://gitee.com/whuls/youtube-dl/releases/2020.9.29-windows.exe" target="_blank" rel="noopener">whuls/youtube-dl</a>下载exe文件，下载后的exe文件如下所示。</p>
<p><img src="/images/image-20201031163202178.png" alt="image-20201031163202178"></p>
<p>建议为youtube-dl创建单独的文件夹，并将可执行程序（exe）的目录添加到<strong>环境变量</strong>，便于直接在命令行使用。</p>
<p><img src="/images/image-20201031163335820.png" alt="image-20201031163335820"></p>
<p>此时只需要输入<code>youtube-dl https://www.bilibili.com/video/BV1vp4y1k7cb</code>之类的命令，就可以直接将B站视频下载到打开命令行的目录下。</p>
<p><img src="/images/image-20201031164218775.png" alt="image-20201031164218775"></p>
<blockquote>
<p>youtube-dl的参数说明见文末</p>
</blockquote>
<h1 id="安装FFmpeg实现转码"><a href="#安装FFmpeg实现转码" class="headerlink" title="安装FFmpeg实现转码"></a>安装FFmpeg实现转码</h1><h2 id="1-安装FFmpeg"><a href="#1-安装FFmpeg" class="headerlink" title="1. 安装FFmpeg"></a>1. 安装FFmpeg</h2><p>下载后的flv文件无法直接通过Windows自带的视频播放器播放，要么下载FLV播放器，要么将下载后的视频转成mp4等可播放形式。</p>
<p>FFmpeg可以为视频转码提供帮助，在其<a href="https://ffmpeg.org/" target="_blank" rel="noopener">官网</a>可以直接下载到已经构建好的Windows系统下的可执行程序（<a href="https://ffmpeg.org/download.html" target="_blank" rel="noopener">下载页面</a>）。</p>
<p><img src="/images/image-20201031170040840.png" alt="image-20201031170040840"></p>
<p><a href="https://www.gyan.dev/ffmpeg/builds/" target="_blank" rel="noopener">gyan.dev</a>提供了一系列的build版本，根据实际需要选择full、essentials、full-shared版本，如果只是用作B站视频下载，essentials版本即可。</p>
<p><img src="/images/image-20201031172628248.png" alt="image-20201031172628248"></p>
<p>下载完成后将其解压，把<code>bin</code>文件夹添加到环境变量中；打开一个命令行，输入<code>ffmpeg</code>，验证是否成功。</p>
<p><img src="/images/image-20201031172916212.png" alt="image-20201031172916212"></p>
<h2 id="2-在youtube-dl中使用"><a href="#2-在youtube-dl中使用" class="headerlink" title="2. 在youtube-dl中使用"></a>2. 在youtube-dl中使用</h2><p>youtube-dl提供了一个参数<code>--recode-video FORMAT</code>，可以在下载后自动转码，前提是需要将FFmpeg的可执行程序（exe）添加到环境变量。</p>
<p><img src="/images/image-20201031165005720.png" alt="image-20201031165005720"></p>
<blockquote>
<p>优点：一键式处理，便携式操作</p>
<p>缺点：不显示处理过程的输出，且只调用了CPU，FFmpeg丰富的参数无法设置</p>
</blockquote>
<h2 id="3-直接转码"><a href="#3-直接转码" class="headerlink" title="3. 直接转码"></a>3. 直接转码</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ffmpeg <span class="literal">-i</span> <span class="string">"aaa.flv"</span> <span class="string">"aaa.mp4"</span></span><br></pre></td></tr></table></figure>
<p>以上命令即可实现视频转码，通过CPU执行转码进程。</p>
<h2 id="4-调用CUDA"><a href="#4-调用CUDA" class="headerlink" title="4. 调用CUDA"></a>4. 调用CUDA</h2><p>如果电脑上安装了CUDA，可以直接通过以下命令调用GPU实现转码加速</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ffmpeg <span class="literal">-hwaccel</span> cuda <span class="literal">-i</span> <span class="string">"aaa.flv"</span> <span class="string">"aaa.mp4"</span></span><br></pre></td></tr></table></figure>
<p>查看支持的硬件加速软件列表：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ffmpeg <span class="literal">-hwaccels</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20201031173603924.png" alt="image-20201031173603924"></p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="1-youtube-dl参数列表"><a href="#1-youtube-dl参数列表" class="headerlink" title="1. youtube-dl参数列表"></a>1. youtube-dl参数列表</h2><p>语法：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">youtube<span class="literal">-dl</span> [<span class="type">OPTIONS</span>] URL [<span class="type">URL...</span>]</span><br></pre></td></tr></table></figure>
<h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Options</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-h, --help</code></td>
<td>Print this help text and exit</td>
</tr>
<tr>
<td><code>--version</code></td>
<td>Print program version and exit</td>
</tr>
<tr>
<td><code>-U, --update</code></td>
<td>Update this program to latest version. Make sure that you have sufficient permissions (run with sudo if needed)</td>
</tr>
<tr>
<td><code>-i, --ignore-errors</code></td>
<td>Continue on download errors, for example to skip unavailable videos in a playlist</td>
</tr>
<tr>
<td><code>--abort-on-error</code></td>
<td>Abort downloading of further videos (in the playlist or the command line) if an error occurs</td>
</tr>
<tr>
<td><code>--dump-user-agent</code></td>
<td>Display the current browser identification</td>
</tr>
<tr>
<td><code>--list-extractors</code></td>
<td>List all supported extractors</td>
</tr>
<tr>
<td><code>--extractor-descriptions</code></td>
<td>Output descriptions of all supported extractors</td>
</tr>
<tr>
<td><code>--force-generic-extractor</code></td>
<td>Force extraction to use the generic extractor</td>
</tr>
<tr>
<td><code>--default-search PREFIX</code></td>
<td>Use this prefix for unqualified URLs. For example “gvsearch2:” downloads two videos from google videos for youtube-dl “large apple”. Use the value “auto” to let youtube-dl guess (“auto_warning” to emit a warning when guessing). “error” just throws an error. The default value “fixup_error” repairs broken URLs, but emits an error if this is not possible instead of searching.</td>
</tr>
<tr>
<td><code>--ignore-config</code></td>
<td>Do not read configuration files. When given in the global configuration file/etc/youtube-dl.conf: Do not read the user configuration in <code>~/.config/youtube- dl/config</code> (<code>%APPDATA%/youtube-dl/config.txt</code> on Windows)</td>
</tr>
<tr>
<td><code>--config-location PATH</code></td>
<td>Location of the configuration file; either the path to the config or its containing directory.</td>
</tr>
<tr>
<td><code>--flat-playlist</code></td>
<td>Do not extract the videos of a playlist, only list them.</td>
</tr>
<tr>
<td><code>--mark-watched</code></td>
<td>Mark videos watched (YouTube only)</td>
</tr>
<tr>
<td><code>--no-mark-watched</code></td>
<td>Do not mark videos watched (YouTube only)</td>
</tr>
<tr>
<td><code>--no-color</code></td>
<td>Do not emit color codes in output</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Network-Options"><a href="#Network-Options" class="headerlink" title="Network Options"></a>Network Options</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Network Options</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>--proxy URL</code></td>
<td>Use the specified HTTP/HTTPS/SOCKS proxy. To enable SOCKS proxy, specify a proper scheme. For example socks5://127.0.0.1:1080/. Pass in an empty string (—proxy “”) for direct connection</td>
</tr>
<tr>
<td><code>--socket-timeout SECONDS</code></td>
<td>Time to wait before giving up, in seconds</td>
</tr>
<tr>
<td><code>--source-address IP</code></td>
<td>Client-side IP address to bind to</td>
</tr>
<tr>
<td><code>-4, --force-ipv4</code></td>
<td>Make all connections via IPv4</td>
</tr>
<tr>
<td><code>-6, --force-ipv6</code></td>
<td>Make all connections via IPv6</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Geo-Restriction"><a href="#Geo-Restriction" class="headerlink" title="Geo Restriction"></a>Geo Restriction</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Geo Restriction</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>--geo-verification-proxy URL</code></td>
<td>Use this proxy to verify the IP address for some geo-restricted sites. The default proxy specified by —proxy (or none, if the option is not present) is used for the actual downloading.</td>
</tr>
<tr>
<td><code>--geo-bypass</code></td>
<td>Bypass geographic restriction via faking X-Forwarded-For HTTP header</td>
</tr>
<tr>
<td><code>--no-geo-bypass</code></td>
<td>Do not bypass geographic restriction via faking X-Forwarded-For HTTP header</td>
</tr>
<tr>
<td><code>--geo-bypass-country CODE</code></td>
<td>Force bypass geographic restriction with explicitly provided two-letter ISO 3166-2 country code</td>
</tr>
<tr>
<td><code>--geo-bypass-ip-block IP_BLOCK</code></td>
<td>Force bypass geographic restriction with explicitly provided IP block in CIDR notation</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Video-Selection"><a href="#Video-Selection" class="headerlink" title="Video Selection"></a>Video Selection</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Video Selection</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>--playlist-start NUMBER</code></td>
<td>Playlist video to start at (default is 1)</td>
</tr>
<tr>
<td><code>--playlist-end NUMBER</code></td>
<td>Playlist video to end at (default is last)</td>
</tr>
<tr>
<td><code>--playlist-items ITEM_SPEC</code></td>
<td>Playlist video items to download. Specify  indices of the videos in the playlist  separated by commas like: “—playlist-items  1,2,5,8” if you want to download videos  indexed 1, 2, 5, 8 in the playlist. You can  specify range: “—playlist-items  1-3,7,10-13”, it will download the videos  at index 1, 2, 3, 7, 10, 11, 12 and 13.</td>
</tr>
<tr>
<td><code>--match-title REGEX</code></td>
<td>Download only matching titles (regex or  caseless sub-string)</td>
</tr>
<tr>
<td><code>--reject-title REGEX</code></td>
<td>Skip download for matching titles (regex or  caseless sub-string)</td>
</tr>
<tr>
<td><code>--max-downloads NUMBER</code></td>
<td>Abort after downloading NUMBER files</td>
</tr>
<tr>
<td><code>--min-filesize SIZE</code></td>
<td>Do not download any videos smaller than  SIZE (e.g. 50k or 44.6m)</td>
</tr>
<tr>
<td><code>--max-filesize SIZE</code></td>
<td>Do not download any videos larger than SIZE (e.g. 50k or 44.6m)</td>
</tr>
<tr>
<td><code>--date DATE</code></td>
<td>Download only videos uploaded in this date</td>
</tr>
<tr>
<td><code>--datebefore DATE</code></td>
<td>Download only videos uploaded on or before  this date (i.e. inclusive)</td>
</tr>
<tr>
<td><code>--dateafter DATE</code></td>
<td>Download only videos uploaded on or after  this date (i.e. inclusive)</td>
</tr>
<tr>
<td><code>--min-views COUNT</code></td>
<td>Do not download any videos with less than  COUNT views</td>
</tr>
<tr>
<td><code>--max-views COUNT</code></td>
<td>Do not download any videos with more than  COUNT views</td>
</tr>
<tr>
<td><code>--match-filter FILTER</code></td>
<td>Generic video filter. Specify any key (see  the “OUTPUT TEMPLATE” for a list of  available keys) to match if the key is  present, !key to check if the key is not  present, key &gt; NUMBER (like “comment_count  &gt; 12”, also works with &gt;=, &lt;, &lt;=, !=, =) to  compare against a number, key = ‘LITERAL’ (like “uploader = ‘Mike Smith’”, also works  with !=) to match against a string literal  and &amp; to require multiple matches. Values  which are not known are excluded unless you  put a question mark (?) after the operator.  For example, to only match videos that have  been liked more than 100 times and disliked  less than 50 times (or the dislike  functionality is not available at the given  service), but who also have a description,  use —match-filter “like_count &gt; 100 &amp;  dislike_count &lt;? 50 &amp; description” .</td>
</tr>
<tr>
<td><code>--no-playlist</code></td>
<td>Download only the video, if the URL refers  to a video and a playlist.</td>
</tr>
<tr>
<td><code>--yes-playlist</code></td>
<td>Download the playlist, if the URL refers to  a video and a playlist.</td>
</tr>
<tr>
<td><code>--age-limit YEARS</code></td>
<td>Download only videos suitable for the given  age</td>
</tr>
<tr>
<td><code>--download-archive FILE</code></td>
<td>Download only videos not listed in the  archive file. Record the IDs of all  downloaded videos in it.</td>
</tr>
<tr>
<td><code>--include-ads</code></td>
<td>Download advertisements as well (experimental)</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Download-Options"><a href="#Download-Options" class="headerlink" title="Download Options"></a>Download Options</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Download Options</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-r, --limit-rate RATE</code></td>
<td>Maximum download rate in bytes per second(e.g. 50K or 4.2M)</td>
</tr>
<tr>
<td><code>-R, --retries RETRIES</code></td>
<td>Number of retries (default is 10), or”infinite”.</td>
</tr>
<tr>
<td><code>--fragment-retries RETRIES</code></td>
<td>Number of retries for a fragment (default is 10), or “infinite” (DASH, hlsnative and ISM)</td>
</tr>
<tr>
<td><code>--skip-unavailable-fragments</code></td>
<td>Skip unavailable fragments (DASH, hlsnative and ISM)</td>
</tr>
<tr>
<td><code>--abort-on-unavailable-fragment</code></td>
<td>Abort downloading when some fragment is not available</td>
</tr>
<tr>
<td><code>--keep-fragments</code></td>
<td>Keep downloaded fragments on disk after downloading is finished; fragments are erased by default</td>
</tr>
<tr>
<td><code>--buffer-size SIZE</code></td>
<td>Size of download buffer (e.g. 1024 or 16K)(default is 1024)</td>
</tr>
<tr>
<td><code>--no-resize-buffer</code></td>
<td>Do not automatically adjust the buffer size. By default, the buffer size is automatically resized from an initial value of SIZE.</td>
</tr>
<tr>
<td><code>--http-chunk-size SIZE</code></td>
<td>Size of a chunk for chunk-based HTTP downloading (e.g. 10485760 or 10M) (default is disabled). May be useful for bypassing bandwidth throttling imposed by a webserver(experimental)</td>
</tr>
<tr>
<td><code>--playlist-reverse</code></td>
<td>Download playlist videos in reverse order</td>
</tr>
<tr>
<td><code>--playlist-random</code></td>
<td>Download playlist videos in random order</td>
</tr>
<tr>
<td><code>--xattr-set-filesize</code></td>
<td>Set file xattribute ytdl.filesize with expected file size</td>
</tr>
<tr>
<td><code>--hls-prefer-native</code></td>
<td>Use the native HLS downloader instead of ffmpeg</td>
</tr>
<tr>
<td><code>--hls-prefer-ffmpeg</code></td>
<td>Use ffmpeg instead of the native HLS downloader</td>
</tr>
<tr>
<td><code>--hls-use-mpegts</code></td>
<td>Use the mpegts container for HLS videos, allowing to play the video while downloading (some players may not be able to play it)</td>
</tr>
<tr>
<td><code>--external-downloader COMMAND</code></td>
<td>Use the specified external downloader. Currently supports aria2c,avconv,axel,curl,ffmpeg,httpie,wget</td>
</tr>
<tr>
<td><code>--external-downloader-args ARGS</code></td>
<td>Give these arguments to the external downloader</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Filesystem-Options"><a href="#Filesystem-Options" class="headerlink" title="Filesystem Options"></a>Filesystem Options</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Filesystem Options</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-a, --batch-file FILE</code></td>
<td>File containing URLs to download (‘-‘ for stdin), one URL per line. Lines starting with ‘#’, ‘;’ or ‘]’ are considered as comments and ignored.</td>
</tr>
<tr>
<td><code>--id</code></td>
<td>Use only video ID in file name</td>
</tr>
<tr>
<td><code>-o, --output TEMPLATE</code></td>
<td>Output filename template, see the “OUTPUT TEMPLATE” for all the info</td>
</tr>
<tr>
<td><code>--autonumber-start NUMBER</code></td>
<td>Specify the start value for %(autonumber)s(default is 1)</td>
</tr>
<tr>
<td><code>--restrict-filenames</code></td>
<td>Restrict filenames to only ASCII characters, and avoid “&amp;” and spaces in filenames</td>
</tr>
<tr>
<td><code>-w, --no-overwrites</code></td>
<td>Do not overwrite files</td>
</tr>
<tr>
<td><code>-c, --continue</code></td>
<td>Force resume of partially downloaded files. By default, youtube-dl will resume downloads if possible.</td>
</tr>
<tr>
<td><code>--no-continue</code></td>
<td>Do not resume partially downloaded files(restart from beginning)</td>
</tr>
<tr>
<td><code>--no-part</code></td>
<td>Do not use .part files - write directly into output file</td>
</tr>
<tr>
<td><code>--no-mtime</code></td>
<td>Do not use the Last-modified header to set the file modification time</td>
</tr>
<tr>
<td><code>--write-description</code></td>
<td>Write video description to a .description file</td>
</tr>
<tr>
<td><code>--write-info-json</code></td>
<td>Write video metadata to a .info.json file</td>
</tr>
<tr>
<td><code>--write-annotations</code></td>
<td>Write video annotations to a.annotations.xml file</td>
</tr>
<tr>
<td><code>--load-info-json FILE</code></td>
<td>JSON file containing the video information(created with the <code>--write-info-json</code> option)</td>
</tr>
<tr>
<td><code>--cookies FILE</code></td>
<td>File to read cookies from and dump cookie jar in</td>
</tr>
<tr>
<td><code>--cache-dir DIR</code></td>
<td>Location in the filesystem where youtube-dl can store some downloaded information permanently. By default <code>$XDG_CACHE_HOME/youtube-dl</code> or <code>~/.cache/youtube-dl</code>. At the moment, only YouTube player files (for videos with obfuscated signatures) are cached, but that may change.</td>
</tr>
<tr>
<td><code>--no-cache-dir</code></td>
<td>Disable filesystem caching</td>
</tr>
<tr>
<td><code>--rm-cache-dir</code></td>
<td>Delete all filesystem cache files</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Thumbnail-images"><a href="#Thumbnail-images" class="headerlink" title="Thumbnail images"></a>Thumbnail images</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Thumbnail images</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>--write-thumbnail</code></td>
<td>Write thumbnail image to disk</td>
</tr>
<tr>
<td><code>--write-all-thumbnails</code></td>
<td>Write all thumbnail image formats to disk</td>
</tr>
<tr>
<td><code>--list-thumbnails</code></td>
<td>Simulate and list all available thumbnail formats</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Verbosity-Simulation-Options"><a href="#Verbosity-Simulation-Options" class="headerlink" title="Verbosity / Simulation Options"></a>Verbosity / Simulation Options</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Verbosity / Simulation Options</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-q, --quiet</code></td>
<td>Activate quiet mode</td>
</tr>
<tr>
<td><code>--no-warnings</code></td>
<td>Ignore warnings</td>
</tr>
<tr>
<td><code>-s, --simulate</code></td>
<td>Do not download the video and do not write anything to disk</td>
</tr>
<tr>
<td><code>--skip-download</code></td>
<td>Do not download the video</td>
</tr>
<tr>
<td><code>-g, --get-url</code></td>
<td>Simulate, quiet but print URL</td>
</tr>
<tr>
<td><code>-e, --get-title</code></td>
<td>Simulate, quiet but print title</td>
</tr>
<tr>
<td><code>--get-id</code></td>
<td>Simulate, quiet but print id</td>
</tr>
<tr>
<td><code>--get-thumbnail</code></td>
<td>Simulate, quiet but print thumbnail URL</td>
</tr>
<tr>
<td><code>--get-description</code></td>
<td>Simulate, quiet but print video description</td>
</tr>
<tr>
<td><code>--get-duration</code></td>
<td>Simulate, quiet but print video length</td>
</tr>
<tr>
<td><code>--get-filename</code></td>
<td>Simulate, quiet but print output filename</td>
</tr>
<tr>
<td><code>--get-format</code></td>
<td>Simulate, quiet but print output format</td>
</tr>
<tr>
<td><code>-j, --dump-json</code></td>
<td>Simulate, quiet but print JSON information. See the <code>OUTPUT TEMPLATE</code> for a description of available keys.</td>
</tr>
<tr>
<td><code>-J, --dump-single-json</code></td>
<td>Simulate, quiet but print JSON information for each command-line argument. If the URL refers to a playlist, dump the whole playlist information in a single line.</td>
</tr>
<tr>
<td><code>--print-json</code></td>
<td>Be quiet and print the video information as JSON (video is still being downloaded).</td>
</tr>
<tr>
<td><code>--newline</code></td>
<td>Output progress bar as new lines</td>
</tr>
<tr>
<td><code>--no-progress</code></td>
<td>Do not print progress bar</td>
</tr>
<tr>
<td><code>--console-title</code></td>
<td>Display progress in console titlebar</td>
</tr>
<tr>
<td><code>-v, --verbose</code></td>
<td>Print various debugging information</td>
</tr>
<tr>
<td><code>--dump-pages</code></td>
<td>Print downloaded pages encoded using base64 to debug problems (very verbose)</td>
</tr>
<tr>
<td><code>--write-pages</code></td>
<td>Write downloaded intermediary pages to files in the current directory to debug problems</td>
</tr>
<tr>
<td><code>--print-traffic</code></td>
<td>Display sent and read HTTP traffic</td>
</tr>
<tr>
<td><code>-C, --call-home</code></td>
<td>Contact the youtube-dl server for debugging</td>
</tr>
<tr>
<td><code>--no-call-home</code></td>
<td>Do NOT contact the youtube-dl server for debugging</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Workarounds"><a href="#Workarounds" class="headerlink" title="Workarounds"></a>Workarounds</h3><div class="table-container">
<table>
<thead>
<tr>
<th>FWorkarounds</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>--encoding ENCODING</code></td>
<td>Force the specified encoding (experimental)</td>
</tr>
<tr>
<td><code>--no-check-certificate</code></td>
<td>Suppress HTTPS certificate validation</td>
</tr>
<tr>
<td><code>--prefer-insecure</code></td>
<td>Use an unencrypted connection to retrieve information about the video. (Currently supported only for YouTube)</td>
</tr>
<tr>
<td><code>--user-agent UA</code></td>
<td>Specify a custom user agent</td>
</tr>
<tr>
<td><code>--referer URL</code></td>
<td>Specify a custom referer, use if the video access is restricted to one domain</td>
</tr>
<tr>
<td><code>--add-header FIELD:VALUE</code></td>
<td>Specify a custom HTTP header and its value, separated by a colon ‘:’. You can use this option multiple times</td>
</tr>
<tr>
<td><code>--bidi-workaround</code></td>
<td>Work around terminals that lack bidirectional text support. Requires bidiv or fribidi executable in PATH</td>
</tr>
<tr>
<td><code>--sleep-interval SECONDS</code></td>
<td>Number of seconds to sleep before each download when used alone or a lower bound of a range for randomized sleep before each download (minimum possible number of seconds to sleep) when used along with —max-sleep-interval.</td>
</tr>
<tr>
<td><code>--max-sleep-interval SECONDS</code></td>
<td>Upper bound of a range for randomized sleep before each download (maximum possible number of seconds to sleep). Must only be used along with —min-sleep-interval.</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Video-Format-Options"><a href="#Video-Format-Options" class="headerlink" title="Video Format Options"></a>Video Format Options</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Video Format Options</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-f, --format FORMAT</code></td>
<td>Video format code, see the “FORMAT SELECTION” for all the info</td>
</tr>
<tr>
<td><code>--all-formats</code></td>
<td>Download all available video formats</td>
</tr>
<tr>
<td><code>--prefer-free-formats</code></td>
<td>Prefer free video formats unless a specific one is requested</td>
</tr>
<tr>
<td><code>-F, --list-formats</code></td>
<td>List all available formats of requested videos</td>
</tr>
<tr>
<td><code>--youtube-skip-dash-manifest</code></td>
<td>Do not download the DASH manifests and related data on YouTube videos</td>
</tr>
<tr>
<td><code>--merge-output-format FORMAT</code></td>
<td>If a merge is required (e.g. bestvideo+bestaudio), output to given container format. One of mkv, mp4, ogg, webm, flv. Ignored if no merge is required</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Subtitle-Options"><a href="#Subtitle-Options" class="headerlink" title="Subtitle Options"></a>Subtitle Options</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Subtitle Options</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>--write-sub</code></td>
<td>Write subtitle file</td>
</tr>
<tr>
<td><code>--write-auto-sub</code></td>
<td>Write automatically generated subtitle file(YouTube only)</td>
</tr>
<tr>
<td><code>--all-subs</code></td>
<td>Download all the available subtitles of the video</td>
</tr>
<tr>
<td><code>--list-subs</code></td>
<td>List all available subtitles for the video</td>
</tr>
<tr>
<td><code>--sub-format FORMAT</code></td>
<td>Subtitle format, accepts formats preference, for example: “srt” or”ass/srt/best”</td>
</tr>
<tr>
<td><code>--sub-lang LANGS</code></td>
<td>Languages of the subtitles to download(optional) separated by commas, use —list- subs for available language tags</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Authentication-Options"><a href="#Authentication-Options" class="headerlink" title="Authentication Options"></a>Authentication Options</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Authentication Options</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-u, --username USERNAME</code></td>
<td>Login with this account ID</td>
</tr>
<tr>
<td><code>-p, --password PASSWORD</code></td>
<td>Account password. If this option is left out, youtube-dl will ask interactively.</td>
</tr>
<tr>
<td><code>-2, --twofactor TWOFACTOR</code></td>
<td>Two-factor authentication code</td>
</tr>
<tr>
<td><code>-n, --netrc</code></td>
<td>Use .netrc authentication data</td>
</tr>
<tr>
<td><code>--video-password PASSWORD</code></td>
<td>Video password (vimeo, smotri, youku)</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Adobe-Pass-Options"><a href="#Adobe-Pass-Options" class="headerlink" title="Adobe Pass Options"></a>Adobe Pass Options</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Adobe Pass Options</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>--ap-mso MSO</code></td>
<td>Adobe Pass multiple-system operator (TV provider) identifier, use —ap-list-mso for a list of available MSOs</td>
</tr>
<tr>
<td><code>--ap-username USERNAME</code></td>
<td>Multiple-system operator account login</td>
</tr>
<tr>
<td><code>--ap-password PASSWORD</code></td>
<td>Multiple-system operator account password. If this option is left out, youtube-dl will ask interactively.</td>
</tr>
<tr>
<td><code>--ap-list-mso</code></td>
<td>List all supported multiple-system operators</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Post-processing-Options"><a href="#Post-processing-Options" class="headerlink" title="Post-processing Options"></a>Post-processing Options</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Post-processing Options</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-x, --extract-audio</code></td>
<td>Convert video files to audio-only files(requires ffmpeg or avconv and ffprobe or avprobe)</td>
</tr>
<tr>
<td><code>--audio-format FORMAT</code></td>
<td>Specify audio format: “best”, “aac”,”flac”, “mp3”, “m4a”, “opus”, “vorbis”, or”wav”; “best” by default; No effect without-x</td>
</tr>
<tr>
<td><code>--audio-quality QUALITY</code></td>
<td>Specify ffmpeg/avconv audio quality, insert a value between 0 (better) and 9 (worse) for VBR or a specific bitrate like 128K(default 5)</td>
</tr>
<tr>
<td><code>--recode-video FORMAT</code></td>
<td>Encode the video to another format if necessary (currently supported: mp4</td>
</tr>
<tr>
<td><code>--postprocessor-args ARGS</code></td>
<td>Give these arguments to the postprocessor</td>
</tr>
<tr>
<td><code>-k, --keep-video</code></td>
<td>Keep the video file on disk after the post- processing; the video is erased by default</td>
</tr>
<tr>
<td><code>--no-post-overwrites</code></td>
<td>Do not overwrite post-processed files; the post-processed files are overwritten by default</td>
</tr>
<tr>
<td><code>--embed-subs</code></td>
<td>Embed subtitles in the video (only for mp4, webm and mkv videos)</td>
</tr>
<tr>
<td><code>--embed-thumbnail</code></td>
<td>Embed thumbnail in the audio as cover art</td>
</tr>
<tr>
<td><code>--add-metadata</code></td>
<td>Write metadata to the video file</td>
</tr>
<tr>
<td><code>--metadata-from-title FORMAT</code></td>
<td>Parse additional metadata like song title / artist from the video title. The format syntax is the same as <code>--output</code>. Regular expression with named capture groups may also be used. The parsed parameters replace existing values. Example: <code>--metadata-from- title &quot;%(artist)s - %(title)s&quot;</code> matches a title like “Coldplay - Paradise”. Example(regex): <code>--metadata-from-title &quot;(?P&lt;artist&gt;.+?) - (?P&lt;title&gt;.+)&quot;</code></td>
</tr>
<tr>
<td><code>--xattrs</code></td>
<td>Write metadata to the video file’s xattrs(using dublin core and xdg standards)</td>
</tr>
<tr>
<td><code>--fixup POLICY</code></td>
<td>Automatically correct known faults of the file. One of never (do nothing), warn (only emit a warning), detect_or_warn (the default; fix file if we can, warn otherwise)</td>
</tr>
<tr>
<td><code>--prefer-avconv</code></td>
<td>Prefer avconv over ffmpeg for running the postprocessors</td>
</tr>
<tr>
<td><code>--prefer-ffmpeg</code></td>
<td>Prefer ffmpeg over avconv for running the postprocessors (default)</td>
</tr>
<tr>
<td><code>--ffmpeg-location PATH</code></td>
<td>Location of the <code>ffmpeg/avconv</code> binary; either the path to the binary or its containing directory.</td>
</tr>
<tr>
<td><code>--exec CMD</code></td>
<td>Execute a command on the file after downloading and post-processing, similar to find’s -exec syntax. Example: <code>--exec &#39;adb push {} /sdcard/Music/ &amp;&amp; rm {}&#39;</code></td>
</tr>
<tr>
<td><code>--convert-subs FORMAT</code></td>
<td>Convert the subtitles to other format(currently supported: srt</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2-FFmpeg-Documentation"><a href="#2-FFmpeg-Documentation" class="headerlink" title="2. FFmpeg Documentation"></a>2. FFmpeg Documentation</h2><blockquote>
<p><a href="https://ffmpeg.org/ffmpeg.html" target="_blank" rel="noopener">https://ffmpeg.org/ffmpeg.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>youtube-dl</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
        <tag>youtube-dl</tag>
      </tags>
  </entry>
  <entry>
    <title>【转】find函数用于c++中vector的查找</title>
    <url>/2020/10/30/find%E5%87%BD%E6%95%B0%E7%94%A8%E4%BA%8Ec-%E4%B8%ADvector%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<blockquote>
<p>全文转载自：<a href="https://blog.csdn.net/wangshubo1989/article/details/50389811" target="_blank" rel="noopener">https://blog.csdn.net/wangshubo1989/article/details/50389811</a></p>
<p>作者：<a href="https://me.csdn.net/wangshubo1989" target="_blank" rel="noopener">江南-一苇渡江</a></p>
</blockquote>
<p>先定义一个类：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>  m_ItemId;</span><br><span class="line">    <span class="keyword">int</span> m_Price;</span><br><span class="line">    <span class="keyword">int</span> m_Count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Item(<span class="built_in">std</span>::<span class="built_in">string</span> id, <span class="keyword">int</span> price, <span class="keyword">int</span> count):</span><br><span class="line">        m_ItemId(id), m_Count(count), m_Price(price)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_Count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">getItemId</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_ItemId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_Price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Item &amp; obj2) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;getItemId().compare(obj2.getItemId()) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Item&gt; <span class="title">getItemList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Item&gt; vecOfItems ;</span><br><span class="line">    vecOfItems.push_back(Item(<span class="string">"D121"</span>,<span class="number">100</span>,<span class="number">2</span>));</span><br><span class="line">    vecOfItems.push_back(Item(<span class="string">"D122"</span>,<span class="number">12</span>,<span class="number">5</span>));</span><br><span class="line">    vecOfItems.push_back(Item(<span class="string">"D123"</span>,<span class="number">28</span>,<span class="number">6</span>));</span><br><span class="line">    vecOfItems.push_back(Item(<span class="string">"D124"</span>,<span class="number">8</span>,<span class="number">10</span>));</span><br><span class="line">    vecOfItems.push_back(Item(<span class="string">"D125"</span>,<span class="number">99</span>,<span class="number">3</span>));</span><br><span class="line">    <span class="keyword">return</span> vecOfItems;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来就是使用<code>std::find</code>算法了：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Item&gt; vecOfItems = getItemList();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Item&gt;::iterator it;</span><br><span class="line">    it = <span class="built_in">std</span>::<span class="built_in">find</span>(vecOfItems.<span class="built_in">begin</span>(), vecOfItems.<span class="built_in">end</span>(), Item(<span class="string">"D123"</span>, <span class="number">99</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">if</span> (it != vecOfItems.<span class="built_in">end</span>())</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Found with Price ::"</span> &lt;&lt; it-&gt;getPrice() &lt;&lt; <span class="string">" Count :: "</span> &lt;&lt; it-&gt;getCount() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Item with ID :: D126 not Found"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line">Found with Price ::<span class="number">28</span> Count :: <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>但是如果不能使用<code>==</code>的情况下，我们就可以使用<code>find_if</code>解决问题了：<br>增加函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">priceComparision</span><span class="params">(Item &amp; obj, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.getPrice() == y)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就是这样：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>  m_ItemId;</span><br><span class="line">    <span class="keyword">int</span> m_Price;</span><br><span class="line">    <span class="keyword">int</span> m_Count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Item(<span class="built_in">std</span>::<span class="built_in">string</span> id, <span class="keyword">int</span> price, <span class="keyword">int</span> count) :</span><br><span class="line">        m_ItemId(id), m_Count(count), m_Price(price) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_Count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">getItemId</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_ItemId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_Price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Item &amp; obj2) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;getItemId().compare(obj2.getItemId()) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">priceComparision</span><span class="params">(Item &amp; obj, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.getPrice() == y)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Item&gt; <span class="title">getItemList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Item&gt; vecOfItems;</span><br><span class="line">    vecOfItems.push_back(Item(<span class="string">"D121"</span>, <span class="number">100</span>, <span class="number">2</span>));</span><br><span class="line">    vecOfItems.push_back(Item(<span class="string">"D122"</span>, <span class="number">12</span>, <span class="number">5</span>));</span><br><span class="line">    vecOfItems.push_back(Item(<span class="string">"D123"</span>, <span class="number">28</span>, <span class="number">6</span>));</span><br><span class="line">    vecOfItems.push_back(Item(<span class="string">"D124"</span>, <span class="number">8</span>, <span class="number">10</span>));</span><br><span class="line">    vecOfItems.push_back(Item(<span class="string">"D125"</span>, <span class="number">99</span>, <span class="number">3</span>));</span><br><span class="line">    <span class="keyword">return</span> vecOfItems;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Item&gt; vecOfItems = getItemList();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Item&gt;::iterator it;</span><br><span class="line">    it = <span class="built_in">std</span>::find_if(vecOfItems.<span class="built_in">begin</span>(), vecOfItems.<span class="built_in">end</span>(), <span class="built_in">std</span>::bind(priceComparision, <span class="built_in">std</span>::placeholders::_1, <span class="number">28</span>));</span><br><span class="line">    <span class="keyword">if</span> (it != vecOfItems.<span class="built_in">end</span>())</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Item Price ::"</span> &lt;&lt; it-&gt;getPrice() &lt;&lt; <span class="string">" Count :: "</span> &lt;&lt; it-&gt;getCount() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Item not Found"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后还可以使用<code>lambda</code>表达式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Item&gt; vecOfItems = getItemList();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Item&gt;::iterator it;</span><br><span class="line">it = <span class="built_in">std</span>::find_if(vecOfItems.<span class="built_in">begin</span>(), vecOfItems.<span class="built_in">end</span>(), [](Item <span class="keyword">const</span>&amp; obj)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.getPrice() == <span class="number">28</span>;</span><br><span class="line">    &#125; );</span><br><span class="line"><span class="keyword">if</span>(it != vecOfItems.<span class="built_in">end</span>())</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Item Price ::"</span>&lt;&lt;it-&gt;getPrice()&lt;&lt;<span class="string">" Count :: "</span>&lt;&lt;it-&gt;getCount()&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Item not Found"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>全文转载自：<a href="https://blog.csdn.net/wangshubo1989/article/details/50389811" target="_blank" rel="noopener">https://blog.csdn.net/wangshubo1989/article/details/50389811</a></p>
<p>作者：<a href="https://me.csdn.net/wangshubo1989" target="_blank" rel="noopener">江南-一苇渡江</a></p>
</blockquote>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo修改标签大小写</title>
    <url>/2020/11/12/Hexo%E4%BF%AE%E6%94%B9%E6%A0%87%E7%AD%BE%E5%A4%A7%E5%B0%8F%E5%86%99/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在Hexo中修改标签的大小写后，之前提交到代码仓库的<code>tags</code>文件夹下的子文件夹并不会发生变化，但是在<code>tags</code>页面下的标签名称是会发生变化的，因此点击标签进入页面后，提示404。</p>
<p><img src="/images/image-20201112161921122.png" alt="image-20201112161921122" style="zoom:50%;" /></p>
<p><img src="/images/image-20201112162119064.png" alt="image-20201112162119064" style="zoom: 67%;" /></p>
<p><img src="/images/image-20201112162107852.png" alt="image-20201112162107852" style="zoom: 50%;" /></p>
<h1 id="原因及解决"><a href="#原因及解决" class="headerlink" title="原因及解决"></a>原因及解决</h1><blockquote>
<p><a href="https://vopaaz.github.io/2019/01/15/change-tag-case-in-Hexo/" target="_blank" rel="noopener">https://vopaaz.github.io/2019/01/15/change-tag-case-in-Hexo/</a></p>
</blockquote>
<p>原因是git对文件名的大小写不敏感，因此只需要修改git配置，再重新部署一次，就可以解决问题。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git config core.ignorecase false</span><br></pre></td></tr></table></figure>
<blockquote>
<p>重新部署后建议对文章进行一些修改，否则hexo无法替换原来的文件</p>
</blockquote>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Excel 2016打开后空白的问题</title>
    <url>/2020/11/05/%E8%A7%A3%E5%86%B3Excel-2016%E6%89%93%E5%BC%80%E5%90%8E%E7%A9%BA%E7%99%BD%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>作者：学哥<br>链接：<a href="https://www.zhihu.com/question/66969603/answer/663572843" target="_blank" rel="noopener">https://www.zhihu.com/question/66969603/answer/663572843</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<p>开始——运行——regedit</p>
<p>修改<code>HKEY_CLASSES_ROOT\Excel.Sheet.12\shell\Open\command</code>项默认值。</p>
<p>原值：</p>
<p><code>&quot;C:\Program Files\Microsoft Office\Root\Office16\EXCEL.EXE&quot;</code></p>
<p>增加<code>&quot;%1&quot;</code>，如下：</p>
<p><code>&quot;C:\Program Files\Microsoft Office\Root\Office16\EXCEL.EXE&quot; &quot;%1&quot;</code></p>
<p>保存即可。</p>
<hr>
<p>以上配置针对<code>xlsx</code>文件，如果要打开<code>xls</code>文件，只需要以同样的方式修改<code>Excel.Sheet.8\shell\Open\command</code>即可</p>
<p>针对<code>csv</code>文件，修改<code>计算机\HKEY_CLASSES_ROOT\Excel.CSV\shell\Open\command</code></p>
<p>或者干脆一点重新装一个</p>
]]></content>
      <categories>
        <category>Excel</category>
      </categories>
      <tags>
        <tag>Microsoft Office</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV 3.4.11 cv::dnn::Net::forward()函数第一个参数的理解</title>
    <url>/2020/11/05/OpenCV-3-4-11-cv-dnn-Net-forward-%E5%87%BD%E6%95%B0%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h1><blockquote>
<p>使用OpenCV 3.4.11在C++下跑YOLOv4的时候对<code>cv::dnn::Net::forward()</code>函数的第一个参数产生了一些疑问，在此记录学习解惑的过程</p>
</blockquote>
<p>代码来源：</p>
<ul>
<li><a href="https://www.learnopencv.com/deep-learning-based-object-detection-using-yolov3-with-opencv-python-c/" target="_blank" rel="noopener">https://www.learnopencv.com/deep-learning-based-object-detection-using-yolov3-with-opencv-python-c/</a></li>
<li><a href="https://blog.csdn.net/guyuealian/article/details/84098461" target="_blank" rel="noopener">https://blog.csdn.net/guyuealian/article/details/84098461</a></li>
</ul>
<p>网络模型训练自：<a href="https://github.com/AlexeyAB/darknet" target="_blank" rel="noopener">https://github.com/AlexeyAB/darknet</a></p>
<p>使用<code>dnn</code>网络进行输入输出的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件路径</span></span><br><span class="line"><span class="built_in">string</span> imgPath = imgDir + <span class="string">"test1.jpg"</span>;</span><br><span class="line"><span class="built_in">string</span> cfgPath = netDir + <span class="string">"yolo-obj.cfg"</span>;</span><br><span class="line"><span class="built_in">string</span> wtPath = netDir + <span class="string">"yolo-obj_last.weights"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载网络</span></span><br><span class="line">Net net = dnn::readNetFromDarknet(cfgPath, wtPath);</span><br><span class="line">net.setPreferableBackend(DNN_BACKEND_OPENCV);</span><br><span class="line">net.setPreferableTarget(DNN_TARGET_CPU);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取图片</span></span><br><span class="line">Mat img = imread(imgPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 4D blob</span></span><br><span class="line">Mat blob;</span><br><span class="line">blobFromImage(img, blob, <span class="number">1</span>/<span class="number">255.0</span>, cvSize(iw, ih), Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置网络输入</span></span><br><span class="line">net.setInput(blob);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行 forward pass 获取输出层的输出</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Mat&gt; outs;</span><br><span class="line">net.forward(outs, getOutputsNames(net));</span><br></pre></td></tr></table></figure>
<p>在这里，函数<code>getOutputsNames()</code>的输出为网络中的三个输出层名称（函数代码在文末）。<br><img src="https://img-blog.csdnimg.cn/20201007174940791.png#pic_center" alt="在这里插入图片描述"><br><code>net.forward()</code>函数根据输出层名称得到如下的输出结果：<br><img src="https://img-blog.csdnimg.cn/20201007173741340.png#pic_center" alt="在这里插入图片描述"><br>观察可得，<code>net.forward()</code>的输出内容<code>outs</code>为一个<code>Mat</code>数组，每个<code>Mat</code>为6维度向量组（n行6列矩阵）</p>
<h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><p>官方文档：<a href="https://docs.opencv.org/3.4.11/db/d30/classcv_1_1dnn_1_1Net.html#a00e707a86b2da4f980f9342b1fc2cc92" target="_blank" rel="noopener">https://docs.opencv.org/3.4.11/</a></p>
<p><img src="https://img-blog.csdnimg.cn/20201007180432740.png#pic_center" alt="在这里插入图片描述"><br>在上部分的调试信息中看到，<code>outs</code>数组的每一个元素都是一个6维向量，根据OpenCV官方文档的解释，该6维向量是每一个输出层的输出，形式为blob二进制对象，是<strong>根据不同的网络结构发生改变的数据结构</strong>。</p>
<p>在<a href="https://www.learnopencv.com/deep-learning-based-object-detection-using-yolov3-with-opencv-python-c/" target="_blank" rel="noopener">Sunita Nayak的文章</a>中，找到了对YOLOv4网络结构下<code>forward()</code>函数输出的解释：<br><img src="https://img-blog.csdnimg.cn/20201007192201830.png#pic_center" alt="在这里插入图片描述"><br>YOLOv4网络的输出为矩形框，每个矩形框由一个向量表示，所有矩形框组成一个向量组。每个向量的长度为<strong>类别数 + 5个参数</strong>，这五个参数的前四个分别是矩形框在图像上的位置<strong>center_x, center_y, width, height</strong>（均为比例，范围在0-1之间），第五个参数是该矩形框包含一个物体的<strong>置信度</strong>。</p>
<p>从向量的第五个参数开始，分别表示<strong>矩形框中物体对应每个类别的置信度</strong>。</p>
<p>在本文的例子中，自行训练的网络仅包含一个类，因此每个向量的长度为<strong>5+1=6</strong>。下面是一些数据例子：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>center_x</th>
<th>center_y</th>
<th>width</th>
<th>height</th>
<th>confidence of containing a object</th>
<th>confidence of class1</th>
</tr>
</thead>
<tbody>
<tr>
<td>0.503206133842</td>
<td>0.0607067160308</td>
<td>0.0554036833346</td>
<td>0.0370224379003</td>
<td>0.956498086452</td>
<td>0.947924435139</td>
</tr>
<tr>
<td>0.26918810606</td>
<td>0.0922166779637</td>
<td>0.0577514693141</td>
<td>0.034457128495</td>
<td>0.797747373581</td>
<td>0.791282773018</td>
</tr>
<tr>
<td>0.029834818095</td>
<td>0.00789603963494</td>
<td>0.0494357012212</td>
<td>0.0207939371467</td>
<td>0.000170804531081</td>
<td>0.0</td>
</tr>
</tbody>
</table>
</div>
<p>处理<code>forward()</code>函数输出<code>outs</code>的详细代码及注释见文末。</p>
<hr>
<p><strong>附</strong></p>
<ol>
<li><p><code>getOutputsNames()</code>函数代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;String&gt; <span class="title">getOutputsNames</span><span class="params">(Net &amp;net)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;String&gt; names;</span><br><span class="line">    <span class="keyword">if</span> (names.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取输出层的索引号</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; outLayers = net.getUnconnectedOutLayers();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取网络中所有层的名称</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;String&gt; layersNames = net.getLayerNames();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 cv::String 转为 std::string</span></span><br><span class="line">        names.resize(outLayers.size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; outLayers.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            names[i] = layersNames[outLayers[i] - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> names;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>postprocess()</code>函数</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postprocess</span><span class="params">(Mat&amp; frame, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;Mat&gt;&amp; outs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; classIds;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; confidences;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Rect&gt; boxes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; outs.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Scan through all the bounding boxes output from the network and keep only the</span></span><br><span class="line">        <span class="comment">// ones with high confidence scores. Assign the box's class label as the class</span></span><br><span class="line">        <span class="comment">// with the highest score for the box.</span></span><br><span class="line">        <span class="comment">/// 扫描所有的矩形框，在找出该矩形框中对应的置信度最高的类别</span></span><br><span class="line">        <span class="comment">/// 当该类别的置信度高于阈值时，保留并记录类别号</span></span><br><span class="line">        <span class="keyword">float</span>* data = (<span class="keyword">float</span>*)outs[i].data;  <span class="comment">// 强制转换成 float</span></span><br><span class="line">        <span class="comment">// 针对每一行进行处理</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; outs[i].rows; ++j, data += outs[i].cols)</span><br><span class="line">        &#123;</span><br><span class="line">            Mat scores = outs[i].row(j).colRange(<span class="number">5</span>, outs[i].cols);  <span class="comment">// 第i个Mat，第j行</span></span><br><span class="line">            Point classIdPoint;</span><br><span class="line">            <span class="keyword">double</span> confidence;</span><br><span class="line">            <span class="comment">// Get the value and location of the maximum score</span></span><br><span class="line">            <span class="comment">/// 获取具有最高置信度的类别</span></span><br><span class="line">            <span class="comment">/// (const SparseMat &amp;a, double *minVal, double *maxVal, int *minIdx, int *maxIdx)</span></span><br><span class="line">            minMaxLoc(scores, <span class="number">0</span>, &amp;confidence, <span class="number">0</span>, &amp;classIdPoint);</span><br><span class="line">            <span class="keyword">if</span> (confidence &gt; cfdThr)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/// data</span></span><br><span class="line">                <span class="comment">/// |centerX|centerY|width|height|confidence of containing object|confidence1|confidence2|...</span></span><br><span class="line">                <span class="keyword">int</span> centerX = (<span class="keyword">int</span>)(data[<span class="number">0</span>] * frame.cols);</span><br><span class="line">                <span class="keyword">int</span> centerY = (<span class="keyword">int</span>)(data[<span class="number">1</span>] * frame.rows);</span><br><span class="line">                <span class="keyword">int</span> width = (<span class="keyword">int</span>)(data[<span class="number">2</span>] * frame.cols);</span><br><span class="line">                <span class="keyword">int</span> height = (<span class="keyword">int</span>)(data[<span class="number">3</span>] * frame.rows);</span><br><span class="line">                <span class="keyword">int</span> left = centerX - width / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">int</span> top = centerY - height / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">                classIds.push_back(classIdPoint.x);</span><br><span class="line">                confidences.push_back((<span class="keyword">float</span>)confidence);</span><br><span class="line">                boxes.push_back(Rect(left, top, width, height));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Perform non maximum suppression to eliminate redundant overlapping boxes with</span></span><br><span class="line">    <span class="comment">// lower confidences</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; indices;</span><br><span class="line">    NMSBoxes(boxes, confidences, cfdThr, nmsThr, indices);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; indices.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> idx = indices[i];</span><br><span class="line">        Rect box = boxes[idx];</span><br><span class="line">        drawPred(classIds[idx], confidences[idx], box.x, box.y,</span><br><span class="line">            box.x + box.width, box.y + box.height, frame);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Draw the predicted bounding box</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawPred</span><span class="params">(<span class="keyword">int</span> classId, <span class="keyword">float</span> conf, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom, Mat&amp; frame)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//Draw a rectangle displaying the bounding box</span></span><br><span class="line">    rectangle(frame, Point(left, top), Point(right, bottom), Scalar(<span class="number">255</span>, <span class="number">178</span>, <span class="number">50</span>), <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Get the label for the class name and its confidence</span></span><br><span class="line">    <span class="built_in">string</span> label = format(<span class="string">"%.2f"</span>, conf);</span><br><span class="line">    <span class="keyword">if</span> (!classes.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        CV_Assert(classId &lt; (<span class="keyword">int</span>)classes.size());</span><br><span class="line">        label = classes[classId] + <span class="string">":"</span> + label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Display the label at the top of the bounding box</span></span><br><span class="line">    <span class="keyword">int</span> baseLine;</span><br><span class="line">    Size labelSize = getTextSize(label, FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, <span class="number">1</span>, &amp;baseLine);</span><br><span class="line">    top = max(top, labelSize.height);</span><br><span class="line">    rectangle(frame, Point(left, top - round(<span class="number">1.5</span>*labelSize.height)), Point(left + round(<span class="number">1.5</span>*labelSize.width), top + baseLine), Scalar(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), FILLED);</span><br><span class="line">    putText(frame, label, Point(left, top), FONT_HERSHEY_SIMPLEX, <span class="number">0.75</span>, Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
        <tag>C++</tag>
        <tag>YOLOv4</tag>
        <tag>Darknet</tag>
      </tags>
  </entry>
  <entry>
    <title>Anaconda原理探究与环境操作指南</title>
    <url>/2020/12/11/Anaconda%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="环境操作"><a href="#环境操作" class="headerlink" title="环境操作"></a>环境操作</h1><h2 id="添加环境"><a href="#添加环境" class="headerlink" title="添加环境"></a>添加环境</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">conda create <span class="literal">-n</span> py35 python=<span class="number">3.5</span> anaconda</span><br></pre></td></tr></table></figure>
<p><code>-n</code>指定环境名，<code>python=</code>指定python版本，<code>python=3.5</code>+<code>anaconda</code>表示该环境中要安装或更新的包。</p>
<blockquote>
<p><a href="https://docs.conda.io/projects/conda/en/latest/commands/create.html" target="_blank" rel="noopener">https://docs.conda.io/projects/conda/en/latest/commands/create.html</a></p>
</blockquote>
<h2 id="查看环境"><a href="#查看环境" class="headerlink" title="查看环境"></a>查看环境</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">conda env list</span><br><span class="line">conda info -<span class="literal">-env</span></span><br></pre></td></tr></table></figure>
<h2 id="修改环境中的python版本"><a href="#修改环境中的python版本" class="headerlink" title="修改环境中的python版本"></a>修改环境中的python版本</h2><p>会替换掉原来的python.exe（在base环境中无法替换）。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">conda install python=<span class="number">3.6</span></span><br></pre></td></tr></table></figure>
<h2 id="复制环境"><a href="#复制环境" class="headerlink" title="复制环境"></a>复制环境</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">conda create <span class="literal">-n</span> new_env -<span class="literal">-clone</span> old_env</span><br></pre></td></tr></table></figure>
<h2 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">conda remove <span class="literal">-n</span> py35 -<span class="literal">-all</span></span><br></pre></td></tr></table></figure>
<h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><p>先复制，再删除</p>
<h2 id="激活和退出环境"><a href="#激活和退出环境" class="headerlink" title="激活和退出环境"></a>激活和退出环境</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">conda active py35</span><br><span class="line">conda deactive py35</span><br></pre></td></tr></table></figure>
<h1 id="Anaconda文件夹及其原理说明"><a href="#Anaconda文件夹及其原理说明" class="headerlink" title="Anaconda文件夹及其原理说明"></a>Anaconda文件夹及其原理说明</h1><p>安装Anaconda时，选用的python版本是3.8，Anaconda的安装路径为<code>D:\Anaconda\anaconda3</code>，python.exe作为默认环境base的解译器，保存在该目录下。</p>
<p>所有的包安装在<code>pkgs</code>文件夹下（Anaconda安装目录总的10.1个G，pkgs文件夹占了5.63G），不同版本用文件夹名称区分（如下图）。</p>
<p><img src="/images/image-20201211185356457.png" alt="image-20201211185356457" style="zoom:50%;" /></p>
<h2 id="python-exe在哪？pip在哪？"><a href="#python-exe在哪？pip在哪？" class="headerlink" title="python.exe在哪？pip在哪？"></a>python.exe在哪？pip在哪？</h2><p>默认环境base的python.exe在Anaconda的安装目录下（pip在路径<code>Scripts</code>下），不同环境下的python.exe在<code>envs/环境名/</code>目录下。如果你的电脑上本身安装了一个python（已经将其目录添加到环境变量<code>path</code>中），某个环境（base或者自建的）需要的python版本刚好和电脑上自带的版本一致，则不会在环境目录下安装python.exe，而是索引到电脑上已有的那个python文件夹去。</p>
<h2 id="创建环境的时候怎么搜索已有的python？顺序是怎样的？找不到又要怎么办？"><a href="#创建环境的时候怎么搜索已有的python？顺序是怎样的？找不到又要怎么办？" class="headerlink" title="创建环境的时候怎么搜索已有的python？顺序是怎样的？找不到又要怎么办？"></a>创建环境的时候怎么搜索已有的python？顺序是怎样的？找不到又要怎么办？</h2><p>创建环境（包括安装Anaconda时自动创建的base环境）时，Anaconda心里面已经想好了要安装的python版本，然后这时候开始搜索环境变量<code>path</code>，如果找到了对应的版本，就会把python的安装路径保存下来，不会额外安装python。</p>
<p>如果找遍了环境变量发现没有python，则开始从网上下载安装，安装的位置就在环境所在的目录下（base环境的目录就是Anaconda的安装目录，其他环境的目录位于<code>envs/环境名/</code>）</p>
<h2 id="激活不同环境后使用python和pip有什么区别？"><a href="#激活不同环境后使用python和pip有什么区别？" class="headerlink" title="激活不同环境后使用python和pip有什么区别？"></a>激活不同环境后使用python和pip有什么区别？</h2><p>打开<code>Anaconda Prompt</code>，输入<code>python -V</code>和<code>pip -V</code>，结果如下。可以看出，由于之前我们指定python版本号为3.5创建了一个环境py35，当切换到这个环境后使用python和pip，发现其路径是<code>Anaconda安装路径\envs\py35</code>；切回到base环境，发现路径就是Anaconda安装路径。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(py35) C:\Users\whuls&gt;python -V</span><br><span class="line">Python 3.5.5 :: Anaconda, Inc.</span><br><span class="line"></span><br><span class="line">(py35) C:\Users\whuls&gt;pip -V</span><br><span class="line">pip 10.0.1 from D:\Anaconda\anaconda3\envs\py35\lib\site-packages\pip (python 3.5)</span><br><span class="line"></span><br><span class="line">(py35) PS C:\Users\whuls&gt; conda env list</span><br><span class="line"><span class="meta">#</span><span class="bash"> conda environments:</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">base                     D:\Anaconda\anaconda3</span><br><span class="line">py35                  *  D:\Anaconda\anaconda3\envs\py35</span><br><span class="line"></span><br><span class="line">(py35) PS C:\Users\whuls&gt; conda activate base</span><br><span class="line">(base) PS C:\Users\whuls&gt; python -V</span><br><span class="line">Python 3.8.3</span><br><span class="line">(base) PS C:\Users\whuls&gt; pip -V</span><br><span class="line">pip 20.1.1 from D:\Anaconda\anaconda3\lib\site-packages\pip (python 3.8)</span><br></pre></td></tr></table></figure>
<p>这时候我们创建一个新的环境，命名为test（<code>conda create -n test</code>，不指定python版本），然后切换到这个环境下，运行<code>python -V</code>和<code>pip -V</code>，结果如下。可以看出，创建环境时，Anaconda搜索了环境变量<code>path</code>的值，发现了在我电脑的<code>D:\python37</code>存在一个可用的python版本，于是就把这个python拿来，作为新环境的python解译器（我愿称之为“省流大师”）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) PS C:\Users\whuls&gt; conda activate test</span><br><span class="line">(test) PS C:\Users\whuls&gt; python -V</span><br><span class="line">Python 3.7.4</span><br><span class="line">(test) PS C:\Users\whuls&gt; pip -V</span><br><span class="line">pip 20.2.3 from d:\python37\lib\site-packages\pip (python 3.7)</span><br></pre></td></tr></table></figure>
<p>还有一个很有意思的现象，如果把环境变量<code>path</code>中的python路径删掉，使用<code>conda create -n 环境名</code>创建环境并激活后，<strong>无法找到python和pip</strong>，看来如果不指定python，conda默认不设置python，全凭环境变量处置。</p>
<blockquote>
<p>Anaconda不建议将其安装目录添加到环境变量中，而如果电脑上也不愿意暴露出python的路径，避免pip安装混乱，则必须在创建环境时指定python版本号（如果不指定，使用<code>conda create -n name python</code>，会安装最新的python）。官方对create命令的参数有如下说明。（<a href="https://docs.conda.io/projects/conda/en/latest/commands/create.html" target="_blank" rel="noopener">完整参数</a>）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">conda create [-<span class="type">n</span> <span class="type">ENVIRONMENT</span> | -<span class="type">p</span> <span class="type">PATH</span>] [<span class="type">package_spec</span> [<span class="type">package_spec</span> <span class="type">...</span>]]</span><br></pre></td></tr></table></figure>
<p>参数<code>python=3.8</code>或<code>python</code>或<code>anaconda</code>，都是<code>package_spec</code>，也就是要加到<code>envs/环境名/</code>下的包内容，如果省去了这个参数，直接<code>conda create -n 环境名</code>，则不会添加任何包，和普通的powershell没啥区别（只有用到<code>conda install</code>才会有所区别，但因为conda无法安装gluoncv，所以不用它）。</p>
</blockquote>
<h2 id="直接在Powershell中使用python和pip和在conda中使用有什么区别？"><a href="#直接在Powershell中使用python和pip和在conda中使用有什么区别？" class="headerlink" title="直接在Powershell中使用python和pip和在conda中使用有什么区别？"></a>直接在Powershell中使用python和pip和在conda中使用有什么区别？</h2><p>conda作为一个python版本管理工具，允许用户在不同环境下自由切换使用的python版本。如果在powershell中使用python，使用的是Windows环境变量<code>path</code>记录的<strong>第一个</strong>python路径下的python和pip，这里假设该路径为<code>D:\Python37\</code>。使用<code>pip install</code>命令安装的所有东西都会存放在同一个路径下的<code>Scripts</code>文件夹中（<code>D:\Python37\Scripts</code>）。</p>
<p>那么问题来了，有些代码对python的版本有要求，比如某些较老的代码需要python2.x；而有些代码必须在python3.5版本下运行，在python3.6或以上的版本运行就会报错。虽然可以将所有版本的python路径都添加到Windows的环境变量<code>path</code>中，但是在命令行或powershell中调用时，只会运行<code>path</code>中记录的第一个python，这就无法做到自由调用不同版本。</p>
<p>而在conda中，可以为一个环境指定一个python版本，不同版本的python保存在不同的路径下，由Anaconda统一管理路径，用户只需要切换环境就可以实现不同python版本的调用。</p>
<h1 id="Conda设置代理"><a href="#Conda设置代理" class="headerlink" title="Conda设置代理"></a>Conda设置代理</h1><blockquote>
<p><a href="https://blog.csdn.net/tianshixingyu/article/details/80239317" target="_blank" rel="noopener">https://blog.csdn.net/tianshixingyu/article/details/80239317</a></p>
</blockquote>
<p>在<code>C:\Users\xxx\</code>下找到<code>.condarc</code>，添加代理服务器地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_servers:</span><br><span class="line">    http: http:&#x2F;&#x2F;proxy.yourorg.org:port</span><br><span class="line">    https: http:&#x2F;&#x2F;proxy.yourorg.org:port</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript用正则表达式分割字符串并返回每个字符串的起始位置</title>
    <url>/2021/01/01/JavaScript%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%86%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B9%B6%E8%BF%94%E5%9B%9E%E6%AF%8F%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%B5%B7%E5%A7%8B%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>记录一个函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> splitStr = <span class="function">(<span class="params">str, regBlock = <span class="regexp">/[;|；]+\ */</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> blocks = [];</span><br><span class="line">    <span class="keyword">let</span> charPos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (str) &#123;</span><br><span class="line">        <span class="keyword">let</span> block = str.match(regBlock);</span><br><span class="line">        <span class="keyword">if</span> (!block) &#123;</span><br><span class="line">            blocks.push(&#123;</span><br><span class="line">                substr: str,</span><br><span class="line">                startAt: charPos</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> tagStartAt = block.index;</span><br><span class="line">        <span class="keyword">let</span> tagLen = block[<span class="number">0</span>].length;</span><br><span class="line">        blocks.push(&#123;</span><br><span class="line">            substr: str.substring(<span class="number">0</span>, tagStartAt),</span><br><span class="line">            startAt: charPos</span><br><span class="line">        &#125;);</span><br><span class="line">        charPos += (tagStartAt + tagLen);</span><br><span class="line">        str = str.substring(tagStartAt + tagLen, str.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> blocks;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>name 林杉 林四；  年级 2016  ; 班级 16B5</code>的输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; substr: &#39;name 林杉 林四&#39;, startAt: 0 &#125;,</span><br><span class="line">  &#123; substr: &#39;年级 2016  &#39;, startAt: 13 &#125;,</span><br><span class="line">  &#123; substr: &#39;班级 16B5&#39;, startAt: 24 &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="改进：引号引起来的不受分隔符影响"><a href="#改进：引号引起来的不受分隔符影响" class="headerlink" title="改进：引号引起来的不受分隔符影响"></a>改进：引号引起来的不受分隔符影响</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分割字符串，引号引起来的不受分隔符影响</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>str 要分割的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;RegExp&#125;</span> </span>regBlock 分隔符的正则表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Array&#125;</span> <span class="type">&#123;[substr, startAt]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> splitStr = <span class="function">(<span class="params">str, seperator</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> quoteReg = <span class="regexp">/[\'|\"|“|‘|”|’]/</span>;</span><br><span class="line">    <span class="keyword">let</span> substr = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> substrArr = [];</span><br><span class="line">    <span class="keyword">let</span> inQuote = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, ch = str[i]; i &lt; str.length; i++, ch = str[i]) &#123;</span><br><span class="line">        <span class="comment">// 如果是引号，则记录开始或结尾</span></span><br><span class="line">        <span class="keyword">if</span> (quoteReg.test(ch)) &#123;</span><br><span class="line">            inQuote = !inQuote;</span><br><span class="line">            <span class="comment">// 如果引号是结束引号，则将引号前面的字符串提出来</span></span><br><span class="line">            <span class="keyword">if</span> (!inQuote &amp;&amp; substr) &#123;</span><br><span class="line">                substr += ch;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在引号内，连同分隔符全都记录</span></span><br><span class="line">        <span class="comment">// 否则，根据分隔符来分割字符串</span></span><br><span class="line">        <span class="keyword">if</span> (!inQuote &amp;&amp; seperator.test(ch)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (substr) &#123;</span><br><span class="line">                substrArr.push(&#123;</span><br><span class="line">                    substr,</span><br><span class="line">                    startAt: i - substr.length</span><br><span class="line">                &#125;);</span><br><span class="line">                substr = <span class="string">''</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        substr += ch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环结束后，如果substr不为空，说明是最后一段，子字符串</span></span><br><span class="line">    <span class="keyword">if</span> (substr) &#123;</span><br><span class="line">        substrArr.push(&#123; substr, <span class="attr">startAt</span>: i - substr.length &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> substrArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">let str = <span class="string">'珞樱缤纷，我的灵魂，“和着节奏，穿梭行走，幻觉爱上这花瓣”,盛开后落无忧；“秋去春来，花落会开；我们何时再回头？” 倘若沦为合照朋友；“一切是曾有”'</span>;</span><br><span class="line">console.log(splitStr(str, /[\ |\:|：|\,|，]+/));</span><br><span class="line">console.log(splitStr(str, /[;|；]+\ */));</span><br></pre></td></tr></table></figure>
<p>输出（包含引号）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; substr: &#39;珞樱缤纷&#39;, startAt: 0 &#125;,</span><br><span class="line">  &#123; substr: &#39;我的灵魂&#39;, startAt: 5 &#125;,</span><br><span class="line">  &#123; substr: &#39;“和着节奏，穿梭行走，幻觉爱上这花瓣”&#39;, startAt: 10 &#125;,</span><br><span class="line">  &#123; substr: &#39;盛开后落无忧；“秋去春来，花落会开；我们何时再回头？”&#39;, startAt: 30 &#125;,</span><br><span class="line">  &#123; substr: &#39;倘若沦为合照朋友；“一切是曾有”&#39;, startAt: 58 &#125;</span><br><span class="line">]</span><br><span class="line">[</span><br><span class="line">  &#123; substr: &#39;珞樱缤纷，我的灵魂，“和着节奏，穿梭行走，幻觉爱上这花瓣”,盛开后落无忧&#39;, startAt: 0 &#125;,</span><br><span class="line">  &#123; substr: &#39;“秋去春来，花落会开；我们何时再回头？” 倘若沦为合照朋友&#39;, startAt: 37 &#125;,</span><br><span class="line">  &#123; substr: &#39;“一切是曾有”&#39;, startAt: 67 &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu使用手记</title>
    <url>/2021/01/16/Ubuntu%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="1-终端操作部分"><a href="#1-终端操作部分" class="headerlink" title="1. 终端操作部分"></a>1. 终端操作部分</h1><h2 id="1-1-查看操作系统信息"><a href="#1-1-查看操作系统信息" class="headerlink" title="1.1. 查看操作系统信息"></a>1.1. 查看操作系统信息</h2><blockquote>
<p><a href="https://blog.csdn.net/zhengxiangwen/article/details/60324802" target="_blank" rel="noopener">https://blog.csdn.net/zhengxiangwen/article/details/60324802</a></p>
</blockquote>
<h3 id="位数"><a href="#位数" class="headerlink" title="位数"></a>位数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo name -m</span><br></pre></td></tr></table></figure>
<p>32位会显示<code>i386</code>到<code>i686</code>，64位会显示<code>x86_64</code></p>
<h3 id="操作系统版本号"><a href="#操作系统版本号" class="headerlink" title="操作系统版本号"></a>操作系统版本号</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/issue</span><br></pre></td></tr></table></figure>
<p>输出诸如：<code># Ubuntu 18.04.5 LTS \n \l</code></p>
<h3 id="其他信息"><a href="#其他信息" class="headerlink" title="其他信息"></a>其他信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) whuls@whuls:~$uname -s  # 内核名称</span><br><span class="line">Linux</span><br><span class="line">(base) whuls@whuls:~$uname -r  # 内核版本</span><br><span class="line">5.4.0-62-generic</span><br><span class="line">(base) whuls@whuls:~$uname -n  # 网络主机名</span><br><span class="line">whuls</span><br><span class="line">(base) whuls@whuls:~$uname -p  # CPU</span><br><span class="line">x86_64</span><br></pre></td></tr></table></figure>
<h2 id="1-2-查看硬件信息"><a href="#1-2-查看硬件信息" class="headerlink" title="1.2. 查看硬件信息"></a>1.2. 查看硬件信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lspci</span><br></pre></td></tr></table></figure>
<h3 id="查看显卡型号"><a href="#查看显卡型号" class="headerlink" title="查看显卡型号"></a>查看显卡型号</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lspci | grep VGA</span><br></pre></td></tr></table></figure>
<p>输出诸如：<code>01:00.0 VGA compatible controller: NVIDIA Corporation GP106 [GeForce GTX 1060 5GB] (rev a1)</code></p>
<h2 id="1-3-找到命令对应的路径"><a href="#1-3-找到命令对应的路径" class="headerlink" title="1.3. 找到命令对应的路径"></a>1.3. 找到命令对应的路径</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">which code</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis code</span><br></pre></td></tr></table></figure>
<p><code>which</code>显示当前可执行脚本的路径，而<code>whereis</code>会在环境变量里面搜索所有匹配的命令或文件（或软链接）。</p>
<h2 id="1-4-软链接"><a href="#1-4-软链接" class="headerlink" title="1.4. 软链接"></a>1.4. 软链接</h2><h3 id="创建软链接"><a href="#创建软链接" class="headerlink" title="创建软链接"></a>创建软链接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s ./node /usr/bin/</span><br></pre></td></tr></table></figure>
<p><code>-s</code>用来指定链接类型为软链接，后面紧跟的第一个参数指定<strong>文件</strong>，第二个参数是软链接保存的<strong>路径</strong>。</p>
<p>上面的命令中意思是在<code>/usr/bin/</code>目录下创建一个关于<code>node</code>的软链接。</p>
<h3 id="删除软链接"><a href="#删除软链接" class="headerlink" title="删除软链接"></a>删除软链接</h3><p>如果在创建软链接后，把链接的文件删除了，创建的软链接就成了无效的软链接。删除无效软链接使用<code>symlinks</code>自动完成。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install symlinks</span><br><span class="line">symlinks -d /usr/bin</span><br></pre></td></tr></table></figure>
<p>命令的意思：删除<code>/usr/bin/</code>目录下所有无效软链接。</p>
<h2 id="1-5-wget-网络下载"><a href="#1-5-wget-网络下载" class="headerlink" title="1.5. wget 网络下载"></a>1.5. wget 网络下载</h2><p>用来下载网络文件。通过一条命令来解释一些常用参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -</span><br></pre></td></tr></table></figure>
<p><code>-q</code>: 安静模式，无命令行输出；</p>
<p><code>-O</code>：大写字母O，将地址的内容输出到文件名中。在这条命令中，<code>-</code>是一个特殊的符号，表示将链接内容输出到变量<code>-</code>中；</p>
<p><code>-P</code>：下载的文件的保存路径，文件是啥名就保存啥名字，不关心文件内容；如果已经声明了<code>-O</code>，<code>-P</code>就不起作用；</p>
<h2 id="1-6-tar-打包与解压"><a href="#1-6-tar-打包与解压" class="headerlink" title="1.6. tar 打包与解压"></a>1.6. tar 打包与解压</h2><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir nodejs</span><br><span class="line">tar -xf node-v14.15.4-linux-x64.tar.xz -C ./nodejs</span><br></pre></td></tr></table></figure>
<p>将<code>*.tar.xz</code>解压到<code>./nodejs</code>文件夹中，前提是该文件夹存在。若不指定，则解压到当前文件夹。</p>
<p><code>-C</code>：指定目标文件夹，默认为<code>.</code> </p>
<p><code>-x</code>：从压缩包中取出文件</p>
<p><code>-f</code>：指定压缩包的文件名</p>
<h3 id="查看压缩文件"><a href="#查看压缩文件" class="headerlink" title="查看压缩文件"></a>查看压缩文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -tf node-v14.15.4-linux-x64.tar.xz</span><br><span class="line">tar -tvf node-v14.15.4-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>
<p><code>-t</code>：列出压缩包的内容</p>
<p><code>-v</code>：列出压缩包的<strong>详细</strong>内容</p>
<h3 id="打包创建压缩文件"><a href="#打包创建压缩文件" class="headerlink" title="打包创建压缩文件"></a>打包创建压缩文件</h3><p>默认的<code>tar</code>命令只能创建<code>.tar</code>或<code>.tar.gz</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -c abc.doc -f pack.tar</span><br><span class="line">tar -cf pack.tar abc.doc</span><br><span class="line">tar -cvf pack.tar abc.doc</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zc abc.doc -f pack.tar</span><br><span class="line">tar -zcf pack.tar abc.doc</span><br><span class="line">tar -zcvf pack.tar abc.doc</span><br></pre></td></tr></table></figure>
<p><code>-c</code>创建新的压缩包，但没有压缩功能，仅打包。可以选择一个或多个文件或文件夹；</p>
<p><code>-z</code>压缩或解压，算法为<code>gzip</code>；</p>
<p><code>-v</code>打包的时候显示文件信息；</p>
<h2 id="1-7-在终端打开文件资源管理器"><a href="#1-7-在终端打开文件资源管理器" class="headerlink" title="1.7. 在终端打开文件资源管理器"></a>1.7. 在终端打开文件资源管理器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nautilus .</span><br></pre></td></tr></table></figure>
<p>后面那个<code>.</code>可以替换为任意相对或绝对路径</p>
<h2 id="1-8-环境变量"><a href="#1-8-环境变量" class="headerlink" title="1.8. 环境变量"></a>1.8. 环境变量</h2><p>在命令行输入<code>env</code>，查看环境变量内容</p>
<p>设置环境变量在<code>~/.bashrc</code>中，导出一个环境变量用<code>export</code>命令，具体用法见下方：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export NODE_HOME=/usr/local/nodejs/node-v14.15.4-linux-x64</span><br><span class="line">export PATH=$NODE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
<h2 id="1-9-删除文件（夹）"><a href="#1-9-删除文件（夹）" class="headerlink" title="1.9. 删除文件（夹）"></a>1.9. 删除文件（夹）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm xxxx.xx</span><br></pre></td></tr></table></figure>
<p><code>-f</code>强制删除；</p>
<p><code>-r</code>递归，用来删除文件夹，删除空文件夹还可以用：<code>rmdir xxx</code>；</p>
<h2 id="1-10-grep-正则表达式"><a href="#1-10-grep-正则表达式" class="headerlink" title="1.10. grep 正则表达式"></a>1.10. grep 正则表达式</h2><blockquote>
<p><a href="https://www.cnblogs.com/peida/archive/2012/12/17/2821195.html" target="_blank" rel="noopener">每天一个linux命令（39）：grep 命令</a></p>
</blockquote>
<p>全称为Global Regular Expression Print，执行正则表达式匹配搜索。一般用来筛选终端的输出，用法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) whuls@whuls:~$ ls</span><br><span class="line">anaconda3  codes  snap  公共的  模板  视频  图片  文档  下载  音乐  桌面</span><br></pre></td></tr></table></figure>
<p>筛选只有英文和数字的文件夹名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) whuls@whuls:~$ ls | grep "[a-z|0-9]"</span><br><span class="line">anaconda3</span><br><span class="line">codes</span><br><span class="line">snap</span><br></pre></td></tr></table></figure>
<h2 id="1-11-将终端输出保存到临时变量"><a href="#1-11-将终端输出保存到临时变量" class="headerlink" title="1.11. 将终端输出保存到临时变量"></a>1.11. 将终端输出保存到临时变量</h2><blockquote>
<p>应用场景：通过<code>ls</code>获取当前文件夹的文件时，需要在下一条命令中对这个文件进行操作</p>
</blockquote>
<p>获取当前文件夹下的一个<code>xxx.deb</code>文件，保存到变量<code>$m_out</code>中，并且执行安装操作。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">m_out=$(ls *.deb)  # 将ls *.deb的结果作为变量保存到m_out中</span><br><span class="line">echo $m_out  # 打印变量内容（不会作为命令执行）</span><br><span class="line"><span class="meta">$</span><span class="bash">m_out  <span class="comment"># 将变量内容作为命令执行</span></span></span><br><span class="line">sudo apt install ./$m_out  # 安装.deb文件</span><br></pre></td></tr></table></figure>
<h2 id="1-12-输出重定向"><a href="#1-12-输出重定向" class="headerlink" title="1.12. 输出重定向"></a>1.12. 输出重定向</h2><blockquote>
<p><a href="https://www.runoob.com/linux/linux-shell-io-redirections.html" target="_blank" rel="noopener">Shell 输入/输出重定向 | 菜鸟教程</a></p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>command &gt; file</code></td>
<td>将输出重定向到 file。</td>
</tr>
<tr>
<td style="text-align:center"><code>command &lt; file</code></td>
<td>将输入重定向到 file。</td>
</tr>
<tr>
<td style="text-align:center"><code>command &gt;&gt; file</code></td>
<td>将输出以追加的方式重定向到 file。</td>
</tr>
<tr>
<td style="text-align:center"><code>n &gt; file</code></td>
<td>将文件描述符为 n 的文件重定向到 file。</td>
</tr>
<tr>
<td style="text-align:center"><code>n &gt;&gt; file</code></td>
<td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td>
</tr>
<tr>
<td style="text-align:center"><code>n &gt;&amp; m</code></td>
<td>将输出文件 m 和 n 合并。</td>
</tr>
<tr>
<td style="text-align:center"><code>n &lt;&amp; m</code></td>
<td>将输入文件 m 和 n 合并。</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;&lt; tag</code></td>
<td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>
</tr>
</tbody>
</table>
</div>
<p>常见的一种用法就是<code>2&gt;&amp;1</code>，这里<code>2</code>代表标准输出错误<code>stderr</code>，<code>1</code>代表标准输出<code>stdout</code>。</p>
<h2 id="1-13-lsmod-查看已加载的module"><a href="#1-13-lsmod-查看已加载的module" class="headerlink" title="1.13. lsmod 查看已加载的module"></a>1.13. lsmod 查看已加载的module</h2><blockquote>
<p><a href="https://www.runoob.com/linux/linux-comm-lsmod.html" target="_blank" rel="noopener">Linux lsmod命令 | 菜鸟教程</a></p>
</blockquote>
<p>查看是否开启<code>nouveau</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br></pre></td></tr></table></figure>
<h2 id="1-14-telinit与切换tty"><a href="#1-14-telinit与切换tty" class="headerlink" title="1.14. telinit与切换tty"></a>1.14. telinit与切换tty</h2><blockquote>
<p><a href="https://blog.csdn.net/dengjin20104042056/article/details/99686141" target="_blank" rel="noopener">【Linux】一步一步学Linux——telinit命令(144)</a></p>
</blockquote>
<p><code>telinit</code>用来设置当前系统的运行等级，常用作关闭图形界面、关机、重启等操作。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) whuls@whuls:~$ telinit --help</span><br><span class="line">telinit [OPTIONS...] &#123;COMMAND&#125;</span><br><span class="line"></span><br><span class="line">Send control commands to the init daemon.</span><br><span class="line"></span><br><span class="line">     --help      Show this help</span><br><span class="line">     --no-wall   Don't send wall message before halt/power-off/reboot</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  0              Power-off the machine</span><br><span class="line">  6              Reboot the machine</span><br><span class="line">  2, 3, 4, 5     Start runlevelX.target unit</span><br><span class="line">  1, s, S        Enter rescue mode</span><br><span class="line">  q, Q           Reload init daemon configuration</span><br><span class="line">  u, U           Reexecute init daemon</span><br></pre></td></tr></table></figure>
<ul>
<li>关机：<code>telinit 0</code></li>
<li>重启：<code>telinit 6</code></li>
<li>关闭图形化界面：<code>telinit 3</code></li>
<li>（重新）启动图形化界面：<code>telinit 5</code>，若启动失败，通过<code>sudo service gdm3 start</code>启动（<code>gdm3</code>or<code>lightdm</code>）</li>
</ul>
<p>关闭图形化界面后，显示屏会黑掉，且会关闭当前运行的程序，接着自动进入一个命令行，需要登录；若没有自动进入，使用<code>Ctrl + Alt +F1</code>开启。</p>
<p><code>Ctrl</code> + <code>Alt</code> + <code>F1~6</code>，最多开启6个。</p>
<h2 id="1-15-chmod-修改文件权限"><a href="#1-15-chmod-修改文件权限" class="headerlink" title="1.15. chmod 修改文件权限"></a>1.15. chmod 修改文件权限</h2><blockquote>
<p><a href="https://www.runoob.com/linux/linux-comm-chmod.html" target="_blank" rel="noopener">Linux chmod命令</a></p>
</blockquote>
<p>一条命令：给<code>xxx.run</code>添加所有用户的可执行权限。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod a+x xxx.run</span><br></pre></td></tr></table></figure>
<p>查看权限：<code>ls -l 文件名</code>;</p>
<h2 id="1-16-gedit-图形化文件编辑器"><a href="#1-16-gedit-图形化文件编辑器" class="headerlink" title="1.16. gedit 图形化文件编辑器"></a>1.16. gedit 图形化文件编辑器</h2><p>通常用于编辑需要<strong>高级权限</strong>的文本文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit [filename]</span><br></pre></td></tr></table></figure>
<h1 id="2-软件安装部分"><a href="#2-软件安装部分" class="headerlink" title="2. 软件安装部分"></a>2. 软件安装部分</h1><h2 id="2-1-安装Typora"><a href="#2-1-安装Typora" class="headerlink" title="2.1. 安装Typora"></a>2.1. 安装Typora</h2><blockquote>
<p> 参考链接：<a href="https://typora.io/#linux" target="_blank" rel="noopener">https://typora.io/#linux</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> or run:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span></span><br><span class="line">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> add Typora<span class="string">'s repository</span></span></span><br><span class="line">sudo add-apt-repository 'deb https://typora.io/linux ./'</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> install typora</span></span><br><span class="line">sudo apt-get install typora</span><br></pre></td></tr></table></figure>
<h2 id="2-2-安装nodejs"><a href="#2-2-安装nodejs" class="headerlink" title="2.2. 安装nodejs"></a>2.2. 安装nodejs</h2><p><strong>第一步</strong>：下载安装包</p>
<ul>
<li>中文网：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></li>
<li>官网：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></li>
<li>下载<strong>Linux Binaries (x64)</strong></li>
</ul>
<p><strong>第二步</strong>：解压</p>
<p>一般解压到系统目录下，如<code>/usr/local/nodejs</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://npm.taobao.org/mirrors/node/v14.15.4/node-v14.15.4-linux-x64.tar.xz</span><br><span class="line">sudo mkdir ~/nodejs</span><br><span class="line">sudo tar -xf node-v14.15.4-linux-x64.tar.xz -C /usr/local/nodejs</span><br></pre></td></tr></table></figure>
<p><strong>第三步</strong>：添加环境变量</p>
<p>在<code>~/.bashrc</code>末尾添加：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export NODE_HOME=/usr/local/nodejs/node-v14.15.4-linux-x64</span><br><span class="line">export PATH=$NODE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
<h2 id="2-3-安装VS-Code（不要用snap-VS-Code）"><a href="#2-3-安装VS-Code（不要用snap-VS-Code）" class="headerlink" title="2.3. 安装VS Code（不要用snap VS Code）"></a>2.3. 安装VS Code（不要用snap VS Code）</h2><blockquote>
<p><a href="https://code.visualstudio.com/docs/setup/linux" target="_blank" rel="noopener">VS Code官网 | Linux</a></p>
<p><a href="https://blog.csdn.net/qq_35092399/article/details/105526908" target="_blank" rel="noopener">Ubuntu使用VSCode无法输入中文</a></p>
</blockquote>
<p>在Snap中下载的VS Code是阉割版本的，无法支持中文。改为官方版本的流程如下：（若没有安装过code，直接从第二步开始）</p>
<ol>
<li><p>从snap中卸载VS Code：<code>sudo snap remove code</code></p>
</li>
<li><p>下载VS Code的.deb包：<a href="https://code.visualstudio.com/download" target="_blank" rel="noopener">官网</a></p>
</li>
<li><p>安装deb包</p>
<ul>
<li>方法一：在下载目录下，执行<code>vscode_deb_name=$(ls|grep &quot;^code_&quot;) | echo $vscode_deb_name | sudo apt install $vscode_deb_name</code></li>
<li>方法二：复制deb包的名称，直接<code>sudo apt install 包名</code></li>
</ul>
</li>
<li><p>查看安装是否成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) whuls@whuls:~/下载$ code -v</span><br><span class="line">1.52.1</span><br><span class="line">ea3859d4ba2f3e577a159bc91e3074c5d85c0523</span><br><span class="line">x64</span><br><span class="line">(base) whuls@whuls:~/下载$ whereis code</span><br><span class="line">code: /usr/bin/code /usr/share/code</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="2-4-安装NVIDIA驱动（手动）"><a href="#2-4-安装NVIDIA驱动（手动）" class="headerlink" title="2.4. 安装NVIDIA驱动（手动）"></a>2.4. 安装NVIDIA驱动（手动）</h2><blockquote>
<p><a href="https://blog.csdn.net/u014682691/article/details/80605201" target="_blank" rel="noopener">【成功】ubuntu安装显卡驱动的三种方法</a></p>
<p><a href="https://blog.csdn.net/wf19930209/article/details/81877822#t7" target="_blank" rel="noopener">【失败】使用官方的NVIDIA驱动手动安装 | Linux安装NVIDIA显卡驱动的正确姿势</a></p>
<p><a href="https://http.download.nvidia.com/XFree86/" target="_blank" rel="noopener">NVIDIA下载中心</a></p>
</blockquote>
<h3 id="挑选合适的驱动"><a href="#挑选合适的驱动" class="headerlink" title="挑选合适的驱动"></a>挑选合适的驱动</h3><p>查看显卡型号：<code>lspci</code>或<code>lshw</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) whuls@whuls:~$ lspci | grep VGA</span><br><span class="line">01:00.0 VGA compatible controller: NVIDIA Corporation GP106 [GeForce GTX 1060 5GB] (rev a1)</span><br><span class="line">(base) whuls@whuls:~$ lshw -numeric -C display</span><br><span class="line">WARNING: you should run this program as super-user.</span><br><span class="line">  *-display                 </span><br><span class="line">       description: VGA compatible controller</span><br><span class="line">       product: GP106 [GeForce GTX 1060 5GB] [10DE:1C04]</span><br><span class="line">       vendor: NVIDIA Corporation [10DE]</span><br><span class="line">       physical id: 0</span><br><span class="line">       bus info: pci@0000:01:00.0</span><br><span class="line">       version: a1</span><br><span class="line">       width: 64 bits</span><br><span class="line">       clock: 33MHz</span><br><span class="line">       capabilities: vga_controller bus_master cap_list rom</span><br><span class="line">       configuration: driver=nouveau latency=0</span><br><span class="line">       resources: irq:137 memory:a2000000-a2ffffff memory:90000000-9fffffff memory:a0000000-a1ffffff ioport:4000(size=128) memory:c0000-dffff</span><br><span class="line">WARNING: output may be incomplete or inaccurate, you should run this program as super-user.</span><br></pre></td></tr></table></figure>
<p>前往<a href="https://www.nvidia.com/" target="_blank" rel="noopener">NVIDIA官网</a>寻找<a href="https://www.nvidia.cn/geforce/drivers/" target="_blank" rel="noopener">驱动程序</a>并下载，一般能搜到多个版本，这是显卡能支持的所有驱动；或者前往<a href="https://http.download.nvidia.com/XFree86/Linux-x86_64/" target="_blank" rel="noopener">下载列表</a>找到你想要的驱动。要选择哪一个进行安装，主要看具体用途，比如我们需要用到CUDA，就可以到官网去看看<a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html" target="_blank" rel="noopener">CUDA版本和驱动对应</a>的情况。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>CUDA Toolkit</th>
<th>Linux x86_64 Driver Version</th>
<th>Windows x86_64 Driver Version</th>
</tr>
</thead>
<tbody>
<tr>
<td>CUDA 11.2.0 GA</td>
<td>&gt;=460.27.04</td>
<td>&gt;=460.89</td>
</tr>
<tr>
<td>CUDA 11.1.1 Update 1</td>
<td>&gt;=455.32</td>
<td>&gt;=456.81</td>
</tr>
<tr>
<td>CUDA 11.1 GA</td>
<td>&gt;=455.23</td>
<td>&gt;=456.38</td>
</tr>
<tr>
<td>CUDA 11.0.3 Update 1</td>
<td>&gt;= 450.51.06</td>
<td>&gt;= 451.82</td>
</tr>
<tr>
<td>CUDA 11.0.2 GA</td>
<td>&gt;= 450.51.05</td>
<td>&gt;= 451.48</td>
</tr>
<tr>
<td>CUDA 11.0.1 RC</td>
<td>&gt;= 450.36.06</td>
<td>&gt;= 451.22</td>
</tr>
<tr>
<td>CUDA 10.2.89</td>
<td>&gt;= 440.33</td>
<td>&gt;= 441.22</td>
</tr>
<tr>
<td>CUDA 10.1 (10.1.105 general release, and updates)</td>
<td>&gt;= 418.39</td>
<td>&gt;= 418.96</td>
</tr>
<tr>
<td>CUDA 10.0.130</td>
<td>&gt;= 410.48</td>
<td>&gt;= 411.31</td>
</tr>
<tr>
<td>CUDA 9.2 (9.2.148 Update 1)</td>
<td>&gt;= 396.37</td>
<td>&gt;= 398.26</td>
</tr>
<tr>
<td>CUDA 9.2 (9.2.88)</td>
<td>&gt;= 396.26</td>
<td>&gt;= 397.44</td>
</tr>
<tr>
<td>CUDA 9.1 (9.1.85)</td>
<td>&gt;= 390.46</td>
<td>&gt;= 391.29</td>
</tr>
<tr>
<td>CUDA 9.0 (9.0.76)</td>
<td>&gt;= 384.81</td>
<td>&gt;= 385.54</td>
</tr>
<tr>
<td>CUDA 8.0 (8.0.61 GA2)</td>
<td>&gt;= 375.26</td>
<td>&gt;= 376.51</td>
</tr>
<tr>
<td>CUDA 8.0 (8.0.44)</td>
<td>&gt;= 367.48</td>
<td>&gt;= 369.30</td>
</tr>
<tr>
<td>CUDA 7.5 (7.5.16)</td>
<td>&gt;= 352.31</td>
<td>&gt;= 353.66</td>
</tr>
<tr>
<td>CUDA 7.0 (7.0.28)</td>
<td>&gt;= 346.46</td>
<td>&gt;= 347.62</td>
</tr>
</tbody>
</table>
</div>
<h3 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h3><ol>
<li>这里我选择了<a href="https://http.download.nvidia.com/XFree86/Linux-x86_64/440.100/NVIDIA-Linux-x86_64-440.100.run" target="_blank" rel="noopener">440版本的驱动</a>，下载下来的文件名为<code>NVIDIA-Linux-x86_64-440.100.run</code>;</li>
<li>卸载已经安装过的显卡驱动：<code>sudo apt-get remove --purge nvidia*</code>;</li>
<li>禁用nouveau<ul>
<li>创建<code>/etc/modprobe.d/blacklist-nouveau.conf</code></li>
<li>文末添加<code>blacklist nouveau</code>和<code>options nouveau modeset=0</code></li>
<li>重新构建内核生效<code>sudo update-initramfs -u</code></li>
<li>重启<code>reboot</code></li>
</ul>
</li>
<li>BIOS禁用secure boot，如果没有禁用，会导致驱动安装失败或不正常;</li>
<li>关闭图形服务：<code>sudo service gdm3 stop</code>;</li>
<li>关闭可视化界面：<code>sudo telinit 3</code>;</li>
<li>执行安装：<code>sudo sh ./NVIDIA-Linux-x86_64-440.100.run</code>;</li>
<li>重新打开图形化界面：<code>sudo service gdm3 start</code>;</li>
</ol>
<p>验证是否安装成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvidia-smi</span><br><span class="line">nvidia-settings</span><br></pre></td></tr></table></figure>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol>
<li>checksum错误：一般是.run文件下载不全，检查完整性；（<a href="https://http.download.nvidia.com/XFree86/Linux-x86_64/" target="_blank" rel="noopener">下载列表</a>）</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error in check sums xxxxxxxx xxxxxxxx</span><br></pre></td></tr></table></figure>
<ol>
<li>在<a href="https://blog.csdn.net/wf19930209/article/details/81877822#t7" target="_blank" rel="noopener">有些教程</a>里面说指导的最后一步的安装命令应该加上<code>--no-opengl-files</code>参数，且还要把<code>nouveau</code>禁用，我这么试了发现重启的时候根本就无法正常分辨率显示，然后换了个<a href="https://blog.csdn.net/u014682691/article/details/80605201" target="_blank" rel="noopener">教程</a>跟了一下发现并没有这个参数，安装驱动就很轻松；</li>
<li>执行<code>sudo ./xxx.run</code>之后，会提示<code>pre-install script failed...</code>的错误，据说这只是一个程序员开的玩笑，直接不理点继续就行了，然后之后的步骤就按照默认一路Enter就行，除非你能明白自己在做什么，否则按照默认的来就行了；好像我只改了一个地方，成功了，之前不成功估计也是自作聪明瞎改选项。</li>
</ol>
<h2 id="2-5-安装CUDA-10-2-cuDNN-7-6-5"><a href="#2-5-安装CUDA-10-2-cuDNN-7-6-5" class="headerlink" title="2.5. 安装CUDA 10.2+cuDNN 7.6.5"></a>2.5. 安装CUDA 10.2+cuDNN 7.6.5</h2><blockquote>
<p><a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">CUDA Toolkit Archive</a></p>
<p><a href="https://developer.nvidia.com/rdp/cudnn-archive" target="_blank" rel="noopener">cuDNN Archive</a></p>
<p><a href="https://blog.csdn.net/zhouchen1998/article/details/107778087" target="_blank" rel="noopener">Linux系统CUDA10.2+CUDNN安装教程</a></p>
</blockquote>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>前往<a href="https://developer.nvidia.com/cuda-10.2-download-archive?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1804&amp;target_type=runfilelocal" target="_blank" rel="noopener">CUDA 官网</a>下载<code>cuda_10.2.89_440.33.01_linux.run</code>。</p>
<p>注册一个NVIDIA账号，前往<a href="https://developer.nvidia.com/rdp/cudnn-archive" target="_blank" rel="noopener">cuDNN下在页面</a>下载<a href="[cuDNN Library for Linux](https://developer.nvidia.com/compute/machine-learning/cudnn/secure/7.6.5.32/Production/10.2_20191118/cudnn-10.2-linux-x64-v7.6.5.32.tgz">cnDNN Library for Linux | cuDNN 7.6.5 for CUDA 10.2</a>)，文件名为<code>cudnn-10.2-linux-x64-v7.6.5.32.tgz</code>。</p>
<h3 id="安装CUDA-10-2"><a href="#安装CUDA-10-2" class="headerlink" title="安装CUDA 10.2"></a>安装CUDA 10.2</h3><ol>
<li><p>关闭图形化界面，进入终端模式：<code>sudo telinit 3</code>；</p>
</li>
<li><p>运行runfile：<code>sudo sh ./cuda_10.2.89_440.33.01_linux.run</code>；</p>
</li>
<li><p>如果计算机上已经安装过一个驱动，会提示<code>Existing package manager installation of the driver found. It is strongly recommended that you remove this before continuing.</code>，意思就是强烈推荐你重新装一个驱动，你要不同意就不让你继续。不过我们还是有办法不用重新安装驱动就可以成功安装CUDA 10.2，在这里选择<code>Continue</code>；</p>
</li>
<li><p>下一页是一个<code>End User License Aggrement</code>，在下面输入<code>accept</code>表示同意安装协议；</p>
</li>
<li><p>进入<code>CUDA Installer</code>，在这里直接把<code>Driver</code>/<code>CUDA Samples 10.2</code>/<code>CUDA Demo Suite 10.2</code>/<code>CUDA Documentation 10.2</code>全都去掉，只保留<code>CUDA Toolkit 10.2</code>，接着选择<code>Install</code>，回车；</p>
</li>
<li><p>安装完成后，重新打开图形化界面：<code>sudo service gdm3 start</code>（<code>gdm3</code>或<code>lightdm</code>）</p>
</li>
<li><p>在目录<code>/usr/local/</code>下已自动创建<code>cuda-10.2</code>文件夹，将其添加到环境变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ~/.bashrc</span></span><br><span class="line">export CUDA_HOME=/usr/local/cuda-10.2</span><br><span class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CUDA_HOME/lib64</span><br><span class="line">export PATH=$PATH:$CUDA_HOME/bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>接着更新环境变量：<code>source ~/.bashrc</code>；</p>
</li>
<li><p>输入<code>nvcc -V</code>查看是否安装成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) whuls@whuls:~$ nvcc -V</span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2019 NVIDIA Corporation</span><br><span class="line">Built on Wed_Oct_23_19:24:38_PDT_2019</span><br><span class="line">Cuda compilation tools, release 10.2, V10.2.89</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="安装cuDNN-7-6-5"><a href="#安装cuDNN-7-6-5" class="headerlink" title="安装cuDNN 7.6.5"></a>安装cuDNN 7.6.5</h3><p>安装过程就是把cuDNN的内容拷贝到CUDA安装目录下并且使其可执行。</p>
<p>解压cuDNN</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -z解压，-x从压缩包中读取，-v读取详细信息，-f文件名</span></span><br><span class="line">tar -zxvf cudnn-10.2-linux-x64-v7.6.5.32.tgz</span><br></pre></td></tr></table></figure>
<p>拷贝到cuda目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp cuda/include/cudnn.h /usr/local/cuda-10.2/include/</span><br><span class="line">sudo cp cuda/lib64/libcudnn* /usr/local/cuda-10.2/lib64/</span><br></pre></td></tr></table></figure>
<p>设置权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -r可读</span></span><br><span class="line">sudo chmod a+r /usr/local/cuda-10.2/include/cudnn.h</span><br><span class="line">sudo chmod a+r /usr/local/cuda-10.2/lib64/libcudnn*</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>基于OpenCV的实用函数</title>
    <url>/2021/01/20/%E5%9F%BA%E4%BA%8EOpenCV%E7%9A%84%E5%AE%9E%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="1-显示图像：showImage"><a href="#1-显示图像：showImage" class="headerlink" title="1. 显示图像：showImage()"></a>1. 显示图像：showImage()</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示图像</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">showImage</span><span class="params">(Mat&amp; src, <span class="keyword">int</span> wk = <span class="number">0</span>, <span class="built_in">string</span> winname = <span class="string">"Image"</span>, <span class="keyword">int</span> flags = WINDOW_NORMAL, Size winsize = Size(<span class="number">500</span>, <span class="number">500</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	namedWindow(winname, flags);</span><br><span class="line">	resizeWindow(winname, winsize.<span class="built_in">width</span>, winsize.<span class="built_in">height</span>);</span><br><span class="line">	imshow(winname, src);</span><br><span class="line">	<span class="keyword">return</span> waitKey(wk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="2-三通道图像灰度化"><a href="#2-三通道图像灰度化" class="headerlink" title="2. 三通道图像灰度化"></a>2. 三通道图像灰度化</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图像灰度化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gray</span><span class="params">(Mat&amp; src, Mat&amp; dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 获取图像宽高</span></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">height</span>, <span class="built_in">width</span>;</span><br><span class="line">	<span class="built_in">height</span> = src.rows;</span><br><span class="line">	<span class="built_in">width</span> = src.cols;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 初始化目标图像</span></span><br><span class="line">	dst.create(<span class="built_in">height</span>, <span class="built_in">width</span>, CV_8UC1);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 灰度图</span></span><br><span class="line">	<span class="keyword">if</span> (src.type() == CV_8UC1)</span><br><span class="line">	&#123;</span><br><span class="line">		dst.data = src.data;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 三通道图像</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (src.type() == CV_8UC3)</span><br><span class="line">	&#123;</span><br><span class="line">		uchar* s_ptr = src.data;</span><br><span class="line">		uchar* d_ptr = dst.data;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">height</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">width</span>; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				d_ptr[i * <span class="built_in">width</span> + j] = s_ptr[<span class="number">3</span> * (i * <span class="built_in">width</span> + j) + <span class="number">0</span>] / <span class="number">3</span></span><br><span class="line">					+ s_ptr[<span class="number">3</span> * (i * <span class="built_in">width</span> + j) + <span class="number">1</span>] / <span class="number">3</span> + s_ptr[<span class="number">3</span> * (i * <span class="built_in">width</span> + j) + <span class="number">2</span>] / <span class="number">3</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="3-二维卷积"><a href="#3-二维卷积" class="headerlink" title="3. 二维卷积"></a>3. 二维卷积</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 卷积</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conv</span><span class="params">(Mat&amp; src, Mat&amp; dst, Mat kernel = (Mat_&lt;<span class="keyword">int</span>&gt;(<span class="number">3</span>,<span class="number">3</span>) &lt;&lt; <span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">5</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 获取宽高</span></span><br><span class="line">	<span class="keyword">int</span> w, h, ch;</span><br><span class="line">	w = src.cols;</span><br><span class="line">	h = src.rows;</span><br><span class="line">	ch = src.channels();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 卷积核大小</span></span><br><span class="line">	<span class="keyword">int</span> kw, kh;</span><br><span class="line">	kw = kernel.cols;</span><br><span class="line">	kh = kernel.rows;</span><br><span class="line">	<span class="keyword">if</span> (kw != kh || kw % <span class="number">2</span> == <span class="number">0</span> || kh % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 卷积</span></span><br><span class="line">	dst = src.clone();</span><br><span class="line">	uchar* ptr = src.data;</span><br><span class="line">	uchar* d_ptr = dst.data;</span><br><span class="line">	<span class="keyword">int</span>* k_ptr = (<span class="keyword">int</span>*)kernel.data;</span><br><span class="line">	<span class="keyword">int</span> s = kh / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> light_sum;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=s; i&lt;h-s; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=s; j&lt;w-s; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 遍历通道</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> c=<span class="number">0</span>; c &lt; ch; c++)</span><br><span class="line">			&#123;</span><br><span class="line">				light_sum = <span class="number">0</span>;</span><br><span class="line">				<span class="comment">// 遍历卷积核</span></span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> m=<span class="number">0</span>; m&lt;kh; m++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;kw; n++)</span><br><span class="line">					&#123;</span><br><span class="line"></span><br><span class="line">						light_sum += <span class="keyword">int</span>(ptr[ch * ((i-s+m)*w + (j-s+n)) + c]) * k_ptr[m*kw+n];</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				d_ptr[ch*(i*w+j) + c] = light_sum &lt; <span class="number">0</span> ? <span class="number">0</span> : (light_sum &gt; <span class="number">255</span> ? <span class="number">255</span> : light_sum);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="4-从文件读取图片列表"><a href="#4-从文件读取图片列表" class="headerlink" title="4. 从文件读取图片列表"></a>4. 从文件读取图片列表</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 读取图片列表 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getImageList</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; imgList, <span class="built_in">string</span> listFilePath = <span class="string">"./image-list.txt"</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE* fp;</span><br><span class="line">	<span class="keyword">if</span> (fopen_s(&amp;fp, listFilePath.c_str(), <span class="string">"r"</span>) || !fp) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">while</span> (!feof(fp))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">string</span> filePath;</span><br><span class="line">		<span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">// 逐行读取</span></span><br><span class="line">		<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">			fscanf_s(fp, <span class="string">"%c"</span>, &amp;ch, <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (ch == <span class="string">'\n'</span> || feof(fp)) <span class="keyword">break</span>;</span><br><span class="line">			filePath.push_back(ch);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 非零入列</span></span><br><span class="line">		<span class="keyword">if</span> (filePath.<span class="built_in">size</span>() != <span class="number">0</span>) imgList.push_back(filePath);</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="5-提取较粗的边缘，并对比"><a href="#5-提取较粗的边缘，并对比" class="headerlink" title="5. 提取较粗的边缘，并对比"></a>5. 提取较粗的边缘，并对比</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*提取较粗边缘*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getCoarseEdge</span><span class="params">(Mat &amp;src, Mat &amp;dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!src.data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; QString(<span class="string">"输入图像为空"</span>).toLocal8Bit().toStdString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 灰度化</span></span><br><span class="line">    Mat gray;</span><br><span class="line">    cvtColor(src, gray, COLOR_BGR2GRAY);</span><br><span class="line"></span><br><span class="line">    gray.convertTo(gray, CV_32FC1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sobel 八个方向</span></span><br><span class="line">    Mat leftTopSobelKernel = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt;</span><br><span class="line">        <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-2</span>);</span><br><span class="line">    Mat topSobelKernel = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt;</span><br><span class="line">        <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-1</span>);</span><br><span class="line">    Mat rightTopSobelKernel = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt;</span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,</span><br><span class="line">        <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    Mat rightSobelKernel = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt;</span><br><span class="line">        <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">-2</span>, <span class="number">0</span>, <span class="number">2</span>,</span><br><span class="line">        <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    Mat rightBottomSobelKernel = -leftTopSobelKernel;</span><br><span class="line">    Mat bottomSobelKernel = -topSobelKernel;</span><br><span class="line">    Mat leftBottomSobelKernel = -rightTopSobelKernel;</span><br><span class="line">    Mat leftSobelKernel = -rightSobelKernel;</span><br><span class="line">    Mat g1, g2, g3, g4, g5, g6, g7, g8;</span><br><span class="line">    filter2D(gray, g1, CV_32F, leftTopSobelKernel);</span><br><span class="line">    filter2D(gray, g2, CV_32F, topSobelKernel);</span><br><span class="line">    filter2D(gray, g3, CV_32F, rightTopSobelKernel);</span><br><span class="line">    filter2D(gray, g4, CV_32F, rightSobelKernel);</span><br><span class="line">    filter2D(gray, g5, CV_32F, rightBottomSobelKernel);</span><br><span class="line">    filter2D(gray, g6, CV_32F, bottomSobelKernel);</span><br><span class="line">    filter2D(gray, g7, CV_32F, leftBottomSobelKernel);</span><br><span class="line">    filter2D(gray, g8, CV_32F, leftSobelKernel);</span><br><span class="line"></span><br><span class="line">    gray.<span class="built_in">release</span>();</span><br><span class="line"></span><br><span class="line">    Mat result = ((<span class="built_in">abs</span>(g1) + <span class="built_in">abs</span>(g2) + <span class="built_in">abs</span>(g3) + <span class="built_in">abs</span>(g4) + <span class="built_in">abs</span>(g5) + <span class="built_in">abs</span>(g6) + <span class="built_in">abs</span>(g7) + <span class="built_in">abs</span>(g8)) / <span class="number">8</span>);</span><br><span class="line">    g1.<span class="built_in">release</span>();</span><br><span class="line">    g2.<span class="built_in">release</span>();</span><br><span class="line">    g3.<span class="built_in">release</span>();</span><br><span class="line">    g4.<span class="built_in">release</span>();</span><br><span class="line">    g5.<span class="built_in">release</span>();</span><br><span class="line">    g6.<span class="built_in">release</span>();</span><br><span class="line">    g7.<span class="built_in">release</span>();</span><br><span class="line">    g8.<span class="built_in">release</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> maxLight;</span><br><span class="line">    minMaxIdx(result, <span class="literal">NULL</span>, &amp;maxLight);</span><br><span class="line">    result.convertTo(dst, CV_8UC1, <span class="number">255.0</span> / maxLight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 边缘对比 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">compareEdge</span><span class="params">(Mat&amp; img1, Mat&amp; img2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 提取边缘</span></span><br><span class="line">    Mat edge1, edge2;</span><br><span class="line">    getCoarseEdge(img1, edge1);</span><br><span class="line">    getCoarseEdge(img2, edge2);</span><br><span class="line"></span><br><span class="line">    cvtColor(edge1, edge1, COLOR_GRAY2BGR);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;edge1.rows; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;edge1.cols; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            edge1.at&lt;Vec3b&gt;(i, j)[<span class="number">2</span>] = edge2.at&lt;uchar&gt;(i, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    showImage(edge1, <span class="number">0</span>, <span class="string">"Compare"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>从fscanf/fprintf到fstream</title>
    <url>/2021/01/22/%E4%BB%8Efscanf-fprintf%E5%88%B0fstream/</url>
    <content><![CDATA[<p>在C语言中，使用<code>fscanf</code>和<code>fprintf</code>操作由<code>fopen</code>打开的文件指针，进行文件读写，其格式化读写方式使用起来相当便利。但是在C++中，文件读写通常使用<code>fstream</code>方式，对于C里面的两个函数以及<code>fopen</code>开始强调安全性问题，推荐使用<code>fopen_s</code>，<code>fscanf_s</code>和<code>fprintf_s</code>代替，在最新的编译器立面通常需要在“项目-属性-C/C++-预处理器-预处理器定义”中加入<code>_CRT_SECURE_NO_WARNINGS</code>才能保证不报错。那么如何使文件流的方式用起来和格式化读写一样便利呢？本文进行探究。</p>
<h1 id="1-C中的文件读写示例：使用fscanf和fprintf"><a href="#1-C中的文件读写示例：使用fscanf和fprintf" class="headerlink" title="1. C中的文件读写示例：使用fscanf和fprintf"></a>1. C中的文件读写示例：使用fscanf和fprintf</h1><p>例如有一些点保存在数组中，使用fscanf和fprintf可以很方便地按照一定的格式（一行保存两个坐标）将它们保存到文本文件中，如下所示。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 保存点 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">savePoints</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; pts, <span class="built_in">string</span> fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE* fp;</span><br><span class="line">	fp = fopen(fileName.c_str(), <span class="string">"w"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!fp)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Open file failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; pts.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(fp, <span class="string">"%d %d\n"</span>, pts[i].x, pts[i].y);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (pts.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"[WARNING] point number is 0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读取点 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readPoints</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; pts, <span class="built_in">string</span> fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE* fp;</span><br><span class="line">	fp = fopen(fileName.c_str(), <span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!fp)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Open file failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!feof(fp))</span><br><span class="line">	&#123;</span><br><span class="line">		Point pt;</span><br><span class="line">		<span class="built_in">fscanf</span>(fp, <span class="string">"%d %d\n"</span>, &amp;pt.x, &amp;pt.y);</span><br><span class="line">		pts.push_back(pt);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (pts.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"[WARNING] point number is 0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="2-ifstream-ofstream-fstream使用示例"><a href="#2-ifstream-ofstream-fstream使用示例" class="headerlink" title="2. ifstream/ofstream/fstream使用示例"></a>2. ifstream/ofstream/fstream使用示例</h1><blockquote>
<p><a href="https://www.runoob.com/cplusplus/cpp-files-streams.html" target="_blank" rel="noopener">C++ 文件和流 | 菜鸟教程</a></p>
</blockquote>
<p>将读写点的代码用<code>fstream</code>改写，大致如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 保存点 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">savePoints</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; pts, <span class="built_in">string</span> fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fstream file;</span><br><span class="line">	file.<span class="built_in">open</span>(fileName, ios::out | ios::trunc);  <span class="comment">// ios::trunc截断，强行覆盖已有结果</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; pts.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		file &lt;&lt; pts[i].x &lt;&lt; <span class="string">" "</span> &lt;&lt; pts[i].y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	file.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读取点 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readPoints</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; pts, <span class="built_in">string</span> fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fstream file;</span><br><span class="line">	file.<span class="built_in">open</span>(fileName, ios::in);</span><br><span class="line"></span><br><span class="line">	Point pt;</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	<span class="keyword">while</span> (!file.eof())</span><br><span class="line">	&#123;</span><br><span class="line">		file &gt;&gt; pt.x &gt;&gt; pt.y;</span><br><span class="line">		pts.push_back(pt);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	file.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>open()</code>函数的第二个参数可以参考下表。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>模式标志</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ios::app</td>
<td>追加模式。所有写入都追加到文件末尾。</td>
</tr>
<tr>
<td>ios::ate</td>
<td>文件打开后定位到文件末尾。</td>
</tr>
<tr>
<td>ios::in</td>
<td>打开文件用于读取。</td>
</tr>
<tr>
<td>ios::out</td>
<td>打开文件用于写入。</td>
</tr>
<tr>
<td>ios::trunc</td>
<td>如果该文件已经存在，其内容将在打开文件之前被截断，即把文件长度设为 0。</td>
</tr>
</tbody>
</table>
</div>
<p>但是用改写的代码执行后存在一个问题，由于采用的是流的方式进行读写，因此更偏向于单个字符或单个数字的操作，读入时会自动跳过<strong>空格</strong>和<strong>换行符</strong>，当输出到文件时使用<code>file &lt;&lt; pt.x &lt;&lt; &quot; &quot; &lt;&lt; pt.y &lt;&lt; endl;</code>，那么对应输入时只需要用<code>file &gt;&gt; pt.x &gt;&gt; pt.y;</code>即可。这就导致两个问题：</p>
<ol>
<li><strong>无法自定义分隔符</strong>。如果使用逗号或多个逗号作为分隔符，那么必须将其作为单个字符读入到变量中：<code>file &gt;&gt; pt.x &gt;&gt; ch &gt;&gt; pt.y;</code>，或者已知分隔符的长度，控制文件指针跳转（用到seek get）：<code>file &gt;&gt; pt.x; file.seekg(n, ios::cur); file &gt;&gt; pt.y;</code>；</li>
<li><strong>文件尾难以判断</strong>。假设文件中保存了1000个点，那么在保存时，通常会记录1000行的x、y坐标，最后一行为空。在使用<code>fscanf</code>格式化输入时，会自动跟到数据和换行符（例如<code>fscanf(fp, &quot;%d %d\n&quot;)</code>），而在使用文件流时，最后一个换行符的存在导致读取完最后一个数据行之后，<code>file.eof()</code>函数返回值仍为<code>false</code>，因此会额外执行一次循环，而此时<code>file &gt;&gt; pt.x &gt;&gt; pt.y</code>根本无法读入数据，因此会导致最后一个数据项在数组的末尾出现两次。因此，需要设计额外的逻辑来判断真实的文件尾。</li>
</ol>
<h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>fstream采用流的方式读取文件，更加安全，也符合读写逻辑，但损失了格式化的便捷性。</p>
<p>针对流的操作只能用流的方式来应对，改进一下上面的例子，当数据之间的分隔符为空格时，可以不考虑分隔符直接读入；在确保数据文件的最后一项数据之后有一个换行符的前提下，可以采用读完数据再判断是否到达文末的方式打断循环，这种方法可以解决当前问题，但是如果最后一行没有换行符，那么这种方法就会少读取一行数据。而相对地，fscanf只会提示错误，而不会导致数据缺失。综合来看，<strong>格式化输入输出要比纯粹的流方法来得方便，流方式无法达到格式化输入的便利性</strong>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 保存点 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">savePoints</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; pts, <span class="built_in">string</span> fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fstream file;</span><br><span class="line">	file.<span class="built_in">open</span>(fileName, ios::out | ios::trunc);  <span class="comment">// ios::trunc截断，强行覆盖已有结果</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; pts.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		file &lt;&lt; pts[i].x &lt;&lt; <span class="string">" "</span> &lt;&lt; pts[i].y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	file.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读取点 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readPoints</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; pts, <span class="built_in">string</span> fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fstream file;</span><br><span class="line">	file.<span class="built_in">open</span>(fileName, ios::in);</span><br><span class="line"></span><br><span class="line">	Point pt;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		file &gt;&gt; pt.x &gt;&gt; pt.y;</span><br><span class="line">		<span class="keyword">if</span> (file.eof()) <span class="keyword">break</span>;</span><br><span class="line">		pts.push_back(pt);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	file.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="4-改进：既不要-CRT-SECURE-NO-WARNINGS，又要格式化输入输出"><a href="#4-改进：既不要-CRT-SECURE-NO-WARNINGS，又要格式化输入输出" class="headerlink" title="4. 改进：既不要_CRT_SECURE_NO_WARNINGS，又要格式化输入输出"></a>4. 改进：既不要_CRT_SECURE_NO_WARNINGS，又要格式化输入输出</h1><p>解决方案：使用<code>fopen_s</code>，<code>fscanf_s</code>，<code>fprintf_s</code>。使用上的区别主要在<code>fopen_s</code>上，三个函数的使用如下所示。使用这样的代码就可以避免VS报错和警告。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 保存点 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">savePoints</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; pts, <span class="built_in">string</span> fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE* fp;</span><br><span class="line">	<span class="keyword">if</span> (!fopen_s(&amp;fp, fileName.c_str(), <span class="string">"w"</span>) != <span class="number">0</span> || !fp)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"File open failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; pts.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		fprintf_s(fp, <span class="string">"%d %d\n"</span>, pts[i].x, pts[i].y);</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读取点 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readPoints</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; pts, <span class="built_in">string</span> fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE* fp;</span><br><span class="line">	<span class="keyword">if</span> (fopen_s(&amp;fp, fileName.c_str(), <span class="string">"r"</span>) != <span class="number">0</span> || !fp)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"File open failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Point pt;</span><br><span class="line">	<span class="keyword">while</span> (!feof(fp))</span><br><span class="line">	&#123;</span><br><span class="line">		fscanf_s(fp, <span class="string">"%d %d\n"</span>, &amp;pt.x, &amp;pt.y);</span><br><span class="line">		pts.push_back(pt);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>ICP迭代最近点算法</title>
    <url>/2021/01/23/ICP%E8%BF%AD%E4%BB%A3%E6%9C%80%E8%BF%91%E7%82%B9%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="1-三维点云配准"><a href="#1-三维点云配准" class="headerlink" title="1. 三维点云配准"></a>1. 三维点云配准</h1><h2 id="1-1-三维配准理论基础"><a href="#1-1-三维配准理论基础" class="headerlink" title="1.1 三维配准理论基础"></a>1.1 三维配准理论基础</h2><p>假设通过RGB-D相机得到了第一组点云<script type="math/tex">P=\{p_1, p_2,\cdots,p_n\}</script>，相机通过位姿变换（旋转+平移）后拍摄第二组点云<script type="math/tex">Q=\{q_1, q_2, \cdots, q_m\}</script>，其中<script type="math/tex">P_{xyz}</script>和<script type="math/tex">Q_{xyz}</script>分别对应两个独立的坐标系。假设相机的平移量为<script type="math/tex">t_{3 \times 1}=\{d_x, d_y, d_z\}^T</script>，旋转量用绕<script type="math/tex">y, x, z</script>轴的旋转角<script type="math/tex">\varphi, \omega, \kappa</script>来表示（先绕<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>，再绕<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container>，最后绕<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.052ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 465 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g></g></g></svg></mjx-container>，方向为逆时针），则空间点<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.699ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 751 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g></g></g></svg></mjx-container>在两个坐标系下的坐标<script type="math/tex">p_i = \{x_i, y_i, z_i\}^T</script>与<script type="math/tex">q_i=\{x_i', y_i', z_i'\}^T</script>的对应关系为：</p>
<script type="math/tex; mode=display">
p_i = R_{3 \times 3}q_i+t_{3 \times 1}</script><p>其中，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="4.675ex" height="1.92ex" role="img" focusable="false" viewBox="0 -683 2066.2 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(759, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(500, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(1278, 0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></g></svg></mjx-container>的构成如下：</p>
<script type="math/tex; mode=display">
R = \begin{bmatrix}a_{1} & a_{2} & a_{3}\\b_{1} & b_{2} & b_{3}\\c_{1} & c_{2} & c_{3}\end{bmatrix} = \begin{bmatrix}\cos\varphi & 0 & -\sin\varphi \\ 0 & 1 & 0 \\ \sin\varphi & 0 & \cos\varphi\end{bmatrix} 
\begin{bmatrix}1 & 0 & 0 \\ 0 & \cos\omega & -\sin\omega \\ 0 & \sin\omega & \cos\omega\end{bmatrix}
\begin{bmatrix}\cos\kappa & -\sin\kappa & 0 \\ \sin\kappa & \cos\kappa & 0 \\ 0 & 0 & 1\end{bmatrix}</script><ul>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.493ex" xmlns="http://www.w3.org/2000/svg" width="32.271ex" height="2.007ex" role="img" focusable="false" viewBox="0 -669 14263.9 887"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(529, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1210.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2266.1, 0)"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(944, 0)"></path></g><g data-mml-node="mo" transform="translate(3604.1, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(3770.8, 0)"><path data-c="1D711" d="M92 210Q92 176 106 149T142 108T185 85T220 72L235 70L237 71L250 112Q268 170 283 211T322 299T370 375T429 423T502 442Q547 442 582 410T618 302Q618 224 575 152T457 35T299 -10Q273 -10 273 -12L266 -48Q260 -83 252 -125T241 -179Q236 -203 215 -212Q204 -218 190 -218Q159 -215 159 -185Q159 -175 214 -2L209 0Q204 2 195 5T173 14T147 28T120 46T94 71T71 103T56 142T50 190Q50 238 76 311T149 431H162Q183 431 183 423Q183 417 175 409Q134 361 114 300T92 210ZM574 278Q574 320 550 344T486 369Q437 369 394 329T323 218Q309 184 295 109L286 64Q304 62 306 62Q423 62 498 131T574 278Z"></path></g><g data-mml-node="mi" transform="translate(4591.4, 0)"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(944, 0)"></path></g><g data-mml-node="mo" transform="translate(5929.4, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(6096.1, 0)"><path data-c="1D705" d="M83 -11Q70 -11 62 -4T51 8T49 17Q49 30 96 217T147 414Q160 442 193 442Q205 441 213 435T223 422T225 412Q225 401 208 337L192 270Q193 269 208 277T235 292Q252 304 306 349T396 412T467 431Q489 431 500 420T512 391Q512 366 494 347T449 327Q430 327 418 338T405 368Q405 370 407 380L397 375Q368 360 315 315L253 266L240 257H245Q262 257 300 251T366 230Q422 203 422 150Q422 140 417 114T411 67Q411 26 437 26Q484 26 513 137Q516 149 519 151T535 153Q554 153 554 144Q554 121 527 64T457 -7Q447 -10 431 -10Q386 -10 360 17T333 90Q333 108 336 122T339 146Q339 170 320 186T271 209T222 218T185 221H180L155 122Q129 22 126 16Q113 -11 83 -11Z"></path></g><g data-mml-node="mo" transform="translate(6894.3, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(7894.6, 0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672, 0)"></path></g><g data-mml-node="mo" transform="translate(9122.6, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(9289.2, 0)"><path data-c="1D711" d="M92 210Q92 176 106 149T142 108T185 85T220 72L235 70L237 71L250 112Q268 170 283 211T322 299T370 375T429 423T502 442Q547 442 582 410T618 302Q618 224 575 152T457 35T299 -10Q273 -10 273 -12L266 -48Q260 -83 252 -125T241 -179Q236 -203 215 -212Q204 -218 190 -218Q159 -215 159 -185Q159 -175 214 -2L209 0Q204 2 195 5T173 14T147 28T120 46T94 71T71 103T56 142T50 190Q50 238 76 311T149 431H162Q183 431 183 423Q183 417 175 409Q134 361 114 300T92 210ZM574 278Q574 320 550 344T486 369Q437 369 394 329T323 218Q309 184 295 109L286 64Q304 62 306 62Q423 62 498 131T574 278Z"></path></g><g data-mml-node="mi" transform="translate(10109.9, 0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672, 0)"></path></g><g data-mml-node="mo" transform="translate(11337.9, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(11504.6, 0)"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mi" transform="translate(12293.2, 0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672, 0)"></path></g><g data-mml-node="mo" transform="translate(13521.2, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(13687.9, 0)"><path data-c="1D705" d="M83 -11Q70 -11 62 -4T51 8T49 17Q49 30 96 217T147 414Q160 442 193 442Q205 441 213 435T223 422T225 412Q225 401 208 337L192 270Q193 269 208 277T235 292Q252 304 306 349T396 412T467 431Q489 431 500 420T512 391Q512 366 494 347T449 327Q430 327 418 338T405 368Q405 370 407 380L397 375Q368 360 315 315L253 266L240 257H245Q262 257 300 251T366 230Q422 203 422 150Q422 140 417 114T411 67Q411 26 437 26Q484 26 513 137Q516 149 519 151T535 153Q554 153 554 144Q554 121 527 64T457 -7Q447 -10 431 -10Q386 -10 360 17T333 90Q333 108 336 122T339 146Q339 170 320 186T271 209T222 218T185 221H180L155 122Q129 22 126 16Q113 -11 83 -11Z"></path></g></g></g></svg></mjx-container></li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.493ex" xmlns="http://www.w3.org/2000/svg" width="32.271ex" height="2.007ex" role="img" focusable="false" viewBox="0 -669 14263.9 887"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(529, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1210.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2266.1, 0)"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(944, 0)"></path></g><g data-mml-node="mo" transform="translate(3604.1, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(3770.8, 0)"><path data-c="1D711" d="M92 210Q92 176 106 149T142 108T185 85T220 72L235 70L237 71L250 112Q268 170 283 211T322 299T370 375T429 423T502 442Q547 442 582 410T618 302Q618 224 575 152T457 35T299 -10Q273 -10 273 -12L266 -48Q260 -83 252 -125T241 -179Q236 -203 215 -212Q204 -218 190 -218Q159 -215 159 -185Q159 -175 214 -2L209 0Q204 2 195 5T173 14T147 28T120 46T94 71T71 103T56 142T50 190Q50 238 76 311T149 431H162Q183 431 183 423Q183 417 175 409Q134 361 114 300T92 210ZM574 278Q574 320 550 344T486 369Q437 369 394 329T323 218Q309 184 295 109L286 64Q304 62 306 62Q423 62 498 131T574 278Z"></path></g><g data-mml-node="mi" transform="translate(4591.4, 0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672, 0)"></path></g><g data-mml-node="mo" transform="translate(5819.4, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(5986.1, 0)"><path data-c="1D705" d="M83 -11Q70 -11 62 -4T51 8T49 17Q49 30 96 217T147 414Q160 442 193 442Q205 441 213 435T223 422T225 412Q225 401 208 337L192 270Q193 269 208 277T235 292Q252 304 306 349T396 412T467 431Q489 431 500 420T512 391Q512 366 494 347T449 327Q430 327 418 338T405 368Q405 370 407 380L397 375Q368 360 315 315L253 266L240 257H245Q262 257 300 251T366 230Q422 203 422 150Q422 140 417 114T411 67Q411 26 437 26Q484 26 513 137Q516 149 519 151T535 153Q554 153 554 144Q554 121 527 64T457 -7Q447 -10 431 -10Q386 -10 360 17T333 90Q333 108 336 122T339 146Q339 170 320 186T271 209T222 218T185 221H180L155 122Q129 22 126 16Q113 -11 83 -11Z"></path></g><g data-mml-node="mo" transform="translate(6784.3, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(7784.6, 0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672, 0)"></path></g><g data-mml-node="mo" transform="translate(9012.6, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(9179.2, 0)"><path data-c="1D711" d="M92 210Q92 176 106 149T142 108T185 85T220 72L235 70L237 71L250 112Q268 170 283 211T322 299T370 375T429 423T502 442Q547 442 582 410T618 302Q618 224 575 152T457 35T299 -10Q273 -10 273 -12L266 -48Q260 -83 252 -125T241 -179Q236 -203 215 -212Q204 -218 190 -218Q159 -215 159 -185Q159 -175 214 -2L209 0Q204 2 195 5T173 14T147 28T120 46T94 71T71 103T56 142T50 190Q50 238 76 311T149 431H162Q183 431 183 423Q183 417 175 409Q134 361 114 300T92 210ZM574 278Q574 320 550 344T486 369Q437 369 394 329T323 218Q309 184 295 109L286 64Q304 62 306 62Q423 62 498 131T574 278Z"></path></g><g data-mml-node="mi" transform="translate(9999.9, 0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672, 0)"></path></g><g data-mml-node="mo" transform="translate(11227.9, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(11394.6, 0)"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mi" transform="translate(12183.2, 0)"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(944, 0)"></path></g><g data-mml-node="mo" transform="translate(13521.2, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(13687.9, 0)"><path data-c="1D705" d="M83 -11Q70 -11 62 -4T51 8T49 17Q49 30 96 217T147 414Q160 442 193 442Q205 441 213 435T223 422T225 412Q225 401 208 337L192 270Q193 269 208 277T235 292Q252 304 306 349T396 412T467 431Q489 431 500 420T512 391Q512 366 494 347T449 327Q430 327 418 338T405 368Q405 370 407 380L397 375Q368 360 315 315L253 266L240 257H245Q262 257 300 251T366 230Q422 203 422 150Q422 140 417 114T411 67Q411 26 437 26Q484 26 513 137Q516 149 519 151T535 153Q554 153 554 144Q554 121 527 64T457 -7Q447 -10 431 -10Q386 -10 360 17T333 90Q333 108 336 122T339 146Q339 170 320 186T271 209T222 218T185 221H180L155 122Q129 22 126 16Q113 -11 83 -11Z"></path></g></g></g></svg></mjx-container></li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.493ex" xmlns="http://www.w3.org/2000/svg" width="17.088ex" height="2.007ex" role="img" focusable="false" viewBox="0 -669 7552.8 887"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(529, -150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(1210.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2266.1, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3210.8, 0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672, 0)"></path></g><g data-mml-node="mo" transform="translate(4438.8, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(4605.4, 0)"><path data-c="1D711" d="M92 210Q92 176 106 149T142 108T185 85T220 72L235 70L237 71L250 112Q268 170 283 211T322 299T370 375T429 423T502 442Q547 442 582 410T618 302Q618 224 575 152T457 35T299 -10Q273 -10 273 -12L266 -48Q260 -83 252 -125T241 -179Q236 -203 215 -212Q204 -218 190 -218Q159 -215 159 -185Q159 -175 214 -2L209 0Q204 2 195 5T173 14T147 28T120 46T94 71T71 103T56 142T50 190Q50 238 76 311T149 431H162Q183 431 183 423Q183 417 175 409Q134 361 114 300T92 210ZM574 278Q574 320 550 344T486 369Q437 369 394 329T323 218Q309 184 295 109L286 64Q304 62 306 62Q423 62 498 131T574 278Z"></path></g><g data-mml-node="mi" transform="translate(5426.1, 0)"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(944, 0)"></path></g><g data-mml-node="mo" transform="translate(6764.1, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(6930.8, 0)"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g></g></g></svg></mjx-container></li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="14.548ex" height="1.91ex" role="img" focusable="false" viewBox="0 -694 6430.1 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(429, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1110.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2166.1, 0)"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(944, 0)"></path></g><g data-mml-node="mo" transform="translate(3504.1, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(3670.8, 0)"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mi" transform="translate(4459.4, 0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672, 0)"></path></g><g data-mml-node="mo" transform="translate(5687.4, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(5854.1, 0)"><path data-c="1D705" d="M83 -11Q70 -11 62 -4T51 8T49 17Q49 30 96 217T147 414Q160 442 193 442Q205 441 213 435T223 422T225 412Q225 401 208 337L192 270Q193 269 208 277T235 292Q252 304 306 349T396 412T467 431Q489 431 500 420T512 391Q512 366 494 347T449 327Q430 327 418 338T405 368Q405 370 407 380L397 375Q368 360 315 315L253 266L240 257H245Q262 257 300 251T366 230Q422 203 422 150Q422 140 417 114T411 67Q411 26 437 26Q484 26 513 137Q516 149 519 151T535 153Q554 153 554 144Q554 121 527 64T457 -7Q447 -10 431 -10Q386 -10 360 17T333 90Q333 108 336 122T339 146Q339 170 320 186T271 209T222 218T185 221H180L155 122Q129 22 126 16Q113 -11 83 -11Z"></path></g></g></g></svg></mjx-container></li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="14.797ex" height="1.91ex" role="img" focusable="false" viewBox="0 -694 6540.1 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(429, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1110.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2166.1, 0)"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(944, 0)"></path></g><g data-mml-node="mo" transform="translate(3504.1, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(3670.8, 0)"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mi" transform="translate(4459.4, 0)"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(944, 0)"></path></g><g data-mml-node="mo" transform="translate(5797.4, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(5964.1, 0)"><path data-c="1D705" d="M83 -11Q70 -11 62 -4T51 8T49 17Q49 30 96 217T147 414Q160 442 193 442Q205 441 213 435T223 422T225 412Q225 401 208 337L192 270Q193 269 208 277T235 292Q252 304 306 349T396 412T467 431Q489 431 500 420T512 391Q512 366 494 347T449 327Q430 327 418 338T405 368Q405 370 407 380L397 375Q368 360 315 315L253 266L240 257H245Q262 257 300 251T366 230Q422 203 422 150Q422 140 417 114T411 67Q411 26 437 26Q484 26 513 137Q516 149 519 151T535 153Q554 153 554 144Q554 121 527 64T457 -7Q447 -10 431 -10Q386 -10 360 17T333 90Q333 108 336 122T339 146Q339 170 320 186T271 209T222 218T185 221H180L155 122Q129 22 126 16Q113 -11 83 -11Z"></path></g></g></g></svg></mjx-container></li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="11.601ex" height="1.945ex" role="img" focusable="false" viewBox="0 -694 5127.4 859.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(429, -150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(1110.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2166.1, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3110.8, 0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672, 0)"></path></g><g data-mml-node="mo" transform="translate(4338.8, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(4505.4, 0)"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g></g></g></svg></mjx-container></li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.493ex" xmlns="http://www.w3.org/2000/svg" width="32.054ex" height="2.007ex" role="img" focusable="false" viewBox="0 -669 14167.9 887"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(433, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1114.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2170.1, 0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672, 0)"></path></g><g data-mml-node="mo" transform="translate(3398.1, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(3564.8, 0)"><path data-c="1D711" d="M92 210Q92 176 106 149T142 108T185 85T220 72L235 70L237 71L250 112Q268 170 283 211T322 299T370 375T429 423T502 442Q547 442 582 410T618 302Q618 224 575 152T457 35T299 -10Q273 -10 273 -12L266 -48Q260 -83 252 -125T241 -179Q236 -203 215 -212Q204 -218 190 -218Q159 -215 159 -185Q159 -175 214 -2L209 0Q204 2 195 5T173 14T147 28T120 46T94 71T71 103T56 142T50 190Q50 238 76 311T149 431H162Q183 431 183 423Q183 417 175 409Q134 361 114 300T92 210ZM574 278Q574 320 550 344T486 369Q437 369 394 329T323 218Q309 184 295 109L286 64Q304 62 306 62Q423 62 498 131T574 278Z"></path></g><g data-mml-node="mi" transform="translate(4385.4, 0)"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(944, 0)"></path></g><g data-mml-node="mo" transform="translate(5723.4, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(5890.1, 0)"><path data-c="1D705" d="M83 -11Q70 -11 62 -4T51 8T49 17Q49 30 96 217T147 414Q160 442 193 442Q205 441 213 435T223 422T225 412Q225 401 208 337L192 270Q193 269 208 277T235 292Q252 304 306 349T396 412T467 431Q489 431 500 420T512 391Q512 366 494 347T449 327Q430 327 418 338T405 368Q405 370 407 380L397 375Q368 360 315 315L253 266L240 257H245Q262 257 300 251T366 230Q422 203 422 150Q422 140 417 114T411 67Q411 26 437 26Q484 26 513 137Q516 149 519 151T535 153Q554 153 554 144Q554 121 527 64T457 -7Q447 -10 431 -10Q386 -10 360 17T333 90Q333 108 336 122T339 146Q339 170 320 186T271 209T222 218T185 221H180L155 122Q129 22 126 16Q113 -11 83 -11Z"></path></g><g data-mml-node="mo" transform="translate(6688.3, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(7688.6, 0)"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(944, 0)"></path></g><g data-mml-node="mo" transform="translate(9026.6, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(9193.2, 0)"><path data-c="1D711" d="M92 210Q92 176 106 149T142 108T185 85T220 72L235 70L237 71L250 112Q268 170 283 211T322 299T370 375T429 423T502 442Q547 442 582 410T618 302Q618 224 575 152T457 35T299 -10Q273 -10 273 -12L266 -48Q260 -83 252 -125T241 -179Q236 -203 215 -212Q204 -218 190 -218Q159 -215 159 -185Q159 -175 214 -2L209 0Q204 2 195 5T173 14T147 28T120 46T94 71T71 103T56 142T50 190Q50 238 76 311T149 431H162Q183 431 183 423Q183 417 175 409Q134 361 114 300T92 210ZM574 278Q574 320 550 344T486 369Q437 369 394 329T323 218Q309 184 295 109L286 64Q304 62 306 62Q423 62 498 131T574 278Z"></path></g><g data-mml-node="mi" transform="translate(10013.9, 0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672, 0)"></path></g><g data-mml-node="mo" transform="translate(11241.9, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(11408.6, 0)"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mi" transform="translate(12197.2, 0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672, 0)"></path></g><g data-mml-node="mo" transform="translate(13425.2, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(13591.9, 0)"><path data-c="1D705" d="M83 -11Q70 -11 62 -4T51 8T49 17Q49 30 96 217T147 414Q160 442 193 442Q205 441 213 435T223 422T225 412Q225 401 208 337L192 270Q193 269 208 277T235 292Q252 304 306 349T396 412T467 431Q489 431 500 420T512 391Q512 366 494 347T449 327Q430 327 418 338T405 368Q405 370 407 380L397 375Q368 360 315 315L253 266L240 257H245Q262 257 300 251T366 230Q422 203 422 150Q422 140 417 114T411 67Q411 26 437 26Q484 26 513 137Q516 149 519 151T535 153Q554 153 554 144Q554 121 527 64T457 -7Q447 -10 431 -10Q386 -10 360 17T333 90Q333 108 336 122T339 146Q339 170 320 186T271 209T222 218T185 221H180L155 122Q129 22 126 16Q113 -11 83 -11Z"></path></g></g></g></svg></mjx-container></li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.493ex" xmlns="http://www.w3.org/2000/svg" width="34.191ex" height="2.007ex" role="img" focusable="false" viewBox="0 -669 15112.6 887"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(433, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1114.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2170.1, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3114.8, 0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672, 0)"></path></g><g data-mml-node="mo" transform="translate(4342.8, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(4509.4, 0)"><path data-c="1D711" d="M92 210Q92 176 106 149T142 108T185 85T220 72L235 70L237 71L250 112Q268 170 283 211T322 299T370 375T429 423T502 442Q547 442 582 410T618 302Q618 224 575 152T457 35T299 -10Q273 -10 273 -12L266 -48Q260 -83 252 -125T241 -179Q236 -203 215 -212Q204 -218 190 -218Q159 -215 159 -185Q159 -175 214 -2L209 0Q204 2 195 5T173 14T147 28T120 46T94 71T71 103T56 142T50 190Q50 238 76 311T149 431H162Q183 431 183 423Q183 417 175 409Q134 361 114 300T92 210ZM574 278Q574 320 550 344T486 369Q437 369 394 329T323 218Q309 184 295 109L286 64Q304 62 306 62Q423 62 498 131T574 278Z"></path></g><g data-mml-node="mi" transform="translate(5330.1, 0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672, 0)"></path></g><g data-mml-node="mo" transform="translate(6558.1, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(6724.8, 0)"><path data-c="1D705" d="M83 -11Q70 -11 62 -4T51 8T49 17Q49 30 96 217T147 414Q160 442 193 442Q205 441 213 435T223 422T225 412Q225 401 208 337L192 270Q193 269 208 277T235 292Q252 304 306 349T396 412T467 431Q489 431 500 420T512 391Q512 366 494 347T449 327Q430 327 418 338T405 368Q405 370 407 380L397 375Q368 360 315 315L253 266L240 257H245Q262 257 300 251T366 230Q422 203 422 150Q422 140 417 114T411 67Q411 26 437 26Q484 26 513 137Q516 149 519 151T535 153Q554 153 554 144Q554 121 527 64T457 -7Q447 -10 431 -10Q386 -10 360 17T333 90Q333 108 336 122T339 146Q339 170 320 186T271 209T222 218T185 221H180L155 122Q129 22 126 16Q113 -11 83 -11Z"></path></g><g data-mml-node="mo" transform="translate(7523, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(8523.2, 0)"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(944, 0)"></path></g><g data-mml-node="mo" transform="translate(9861.2, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(10027.9, 0)"><path data-c="1D711" d="M92 210Q92 176 106 149T142 108T185 85T220 72L235 70L237 71L250 112Q268 170 283 211T322 299T370 375T429 423T502 442Q547 442 582 410T618 302Q618 224 575 152T457 35T299 -10Q273 -10 273 -12L266 -48Q260 -83 252 -125T241 -179Q236 -203 215 -212Q204 -218 190 -218Q159 -215 159 -185Q159 -175 214 -2L209 0Q204 2 195 5T173 14T147 28T120 46T94 71T71 103T56 142T50 190Q50 238 76 311T149 431H162Q183 431 183 423Q183 417 175 409Q134 361 114 300T92 210ZM574 278Q574 320 550 344T486 369Q437 369 394 329T323 218Q309 184 295 109L286 64Q304 62 306 62Q423 62 498 131T574 278Z"></path></g><g data-mml-node="mi" transform="translate(10848.6, 0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672, 0)"></path></g><g data-mml-node="mo" transform="translate(12076.6, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(12243.2, 0)"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mi" transform="translate(13031.9, 0)"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(944, 0)"></path></g><g data-mml-node="mo" transform="translate(14369.9, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(14536.6, 0)"><path data-c="1D705" d="M83 -11Q70 -11 62 -4T51 8T49 17Q49 30 96 217T147 414Q160 442 193 442Q205 441 213 435T223 422T225 412Q225 401 208 337L192 270Q193 269 208 277T235 292Q252 304 306 349T396 412T467 431Q489 431 500 420T512 391Q512 366 494 347T449 327Q430 327 418 338T405 368Q405 370 407 380L397 375Q368 360 315 315L253 266L240 257H245Q262 257 300 251T366 230Q422 203 422 150Q422 140 417 114T411 67Q411 26 437 26Q484 26 513 137Q516 149 519 151T535 153Q554 153 554 144Q554 121 527 64T457 -7Q447 -10 431 -10Q386 -10 360 17T333 90Q333 108 336 122T339 146Q339 170 320 186T271 209T222 218T185 221H180L155 122Q129 22 126 16Q113 -11 83 -11Z"></path></g></g></g></svg></mjx-container></li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.493ex" xmlns="http://www.w3.org/2000/svg" width="14.982ex" height="1.812ex" role="img" focusable="false" viewBox="0 -583 6622.1 801"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(433, -150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(1114.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2170.1, 0)"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(944, 0)"></path></g><g data-mml-node="mo" transform="translate(3508.1, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(3674.8, 0)"><path data-c="1D711" d="M92 210Q92 176 106 149T142 108T185 85T220 72L235 70L237 71L250 112Q268 170 283 211T322 299T370 375T429 423T502 442Q547 442 582 410T618 302Q618 224 575 152T457 35T299 -10Q273 -10 273 -12L266 -48Q260 -83 252 -125T241 -179Q236 -203 215 -212Q204 -218 190 -218Q159 -215 159 -185Q159 -175 214 -2L209 0Q204 2 195 5T173 14T147 28T120 46T94 71T71 103T56 142T50 190Q50 238 76 311T149 431H162Q183 431 183 423Q183 417 175 409Q134 361 114 300T92 210ZM574 278Q574 320 550 344T486 369Q437 369 394 329T323 218Q309 184 295 109L286 64Q304 62 306 62Q423 62 498 131T574 278Z"></path></g><g data-mml-node="mi" transform="translate(4495.4, 0)"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444, 0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(944, 0)"></path></g><g data-mml-node="mo" transform="translate(5833.4, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(6000.1, 0)"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g></g></g></svg></mjx-container></li>
</ul>
<blockquote>
<p>右手坐标系产生<strong>绕轴顺时针旋转</strong>和<strong>正方向平移</strong>后，导致<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="7.227ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3194.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(961, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1405.7, 0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1895.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2340.3, 0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(2805.3, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>变换为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="8.886ex" height="2.283ex" role="img" focusable="false" viewBox="0 -759 3927.7 1009"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(389, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(1205.5, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(1650.1, 0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(490, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(2384.6, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(2829.2, 0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(465, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(3538.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，那么变换关系应该从变换后的坐标往回计算，即：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="12.841ex" height="1.903ex" role="img" focusable="false" viewBox="0 -759 5675.7 841"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2185.6, 0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="msup" transform="translate(2944.6, 0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(903.2, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(4314.4, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(5314.7, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>。可以通过二维右手系自行推导，右手系即右手大拇指、食指、中指展开后，分别代表<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="5.467ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 2416.3 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1016.7, 0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1506.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1951.3, 0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g></g></g></svg></mjx-container>轴。</p>
</blockquote>
<p>用函数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.397ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2827.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(485, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(874, 0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(1633, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2077.7, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(2438.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>表示点集<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.699ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 751 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g></g></g></svg></mjx-container>在变换<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.3ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2342.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(1148, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1592.7, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1953.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>下与目标点集<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.79ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 791 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g></g></g></svg></mjx-container>的误差：</p>
<script type="math/tex; mode=display">
v(R, t) = \sum^n_{i=1}||Rq_i + t - p_i||^2</script><p>求解最优变换参数的问题可以转化为满足<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="12.282ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5428.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1223, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1823, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2212, 0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(2697, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3086, 0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(3845, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4289.7, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(4650.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5039.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>最优解<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="7.126ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 3149.8 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(389, 0)"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mn" transform="translate(759, 363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1551.6, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(1996.2, 0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(361, 363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(2760.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>的问题。</p>
<h2 id="1-2-ICP算法"><a href="#1-2-ICP算法" class="headerlink" title="1.2 ICP算法"></a>1.2 ICP算法</h2><blockquote>
<p>ICP：Iterative Closet Point，迭代最近点算法，分别在待匹配的目标点云Q和源点云P中，按照一定的约束条件，找出一定数量的最邻近的对应点<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="4.483ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 1981.6 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(797, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1241.6, 0)"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(446, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>，计算出最优变换参数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="3.54ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 1564.7 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(759, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1203.7, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>，使得误差函数最小。其中误差函数为：</p>
<script type="math/tex; mode=display">
v(R,t) = \frac{1}{n}\sum^n_{i=1}||Rq_i+t-p_i||^2</script><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>为距离最近的对应点对的数量，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.048ex" xmlns="http://www.w3.org/2000/svg" width="1.717ex" height="1.593ex" role="img" focusable="false" viewBox="0 -683 759 704"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g></g></g></svg></mjx-container>为三维空间旋转矩阵，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>为三维空间平移向量，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.803ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 797 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.674ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 740 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(446, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>分别是对应点在源点云坐标系<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.699ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 751 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g></g></g></svg></mjx-container>和目标点云坐标系<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.79ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 791 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g></g></g></svg></mjx-container>下的三维坐标。</p>
</blockquote>
<p>算法流程：</p>
<ol>
<li>在目标点云<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.79ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 791 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g></g></g></svg></mjx-container>中选取点集<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex" xmlns="http://www.w3.org/2000/svg" width="23.003ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 10167.3 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(446, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(740, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(1018, 0)"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(446, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2035.7, 0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2980.5, 0)"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(3771.5, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4216.1, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4838.9, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5894.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6394.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(6839.3, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(7339.3, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(7784, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(9122.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(9567.3, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>；</li>
<li>根据最小距离准则在源点云<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.699ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 751 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g></g></g></svg></mjx-container>中寻找对应点<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex" xmlns="http://www.w3.org/2000/svg" width="23.17ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 10241.3 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(797, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(1075, 0)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2149.7, 0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3094.5, 0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(3845.5, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4290.1, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4912.9, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5968.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6468.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(6913.3, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(7413.3, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(7858, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(9196.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(9641.3, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>（需要去重心化处理）；</li>
<li>计算旋转矩阵<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.048ex" xmlns="http://www.w3.org/2000/svg" width="1.717ex" height="1.593ex" role="img" focusable="false" viewBox="0 -683 759 704"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g></g></g></svg></mjx-container>和平移向量<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>；</li>
<li>对<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex" xmlns="http://www.w3.org/2000/svg" width="8.533ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 3771.5 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(446, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(740, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(1018, 0)"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(446, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2035.7, 0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2980.5, 0)"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g></g></g></g></svg></mjx-container>进行三维运算，得到新的坐标<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.592ex" xmlns="http://www.w3.org/2000/svg" width="28.507ex" height="2.309ex" role="img" focusable="false" viewBox="0 -759 12600.1 1020.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(510.7, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g><g data-mml-node="mi" transform="translate(446, -254) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(755.2, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msubsup" transform="translate(1033.2, 0)"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(510.7, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g><g data-mml-node="mi" transform="translate(446, -254) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2066.1, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3121.9, 0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="msub" transform="translate(3880.9, 0)"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(446, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(4843, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(5843.3, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(6204.3, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(6648.9, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7271.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(8327.5, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8827.5, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(9272.1, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(9772.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(10216.8, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(11555.5, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(12000.1, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></li>
<li>计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.674ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 740 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(446, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>与<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.803ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 797 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>的平均距离<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="18.998ex" height="2.755ex" role="img" focusable="false" viewBox="0 -864.9 8397.3 1217.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(797.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(1853.6, 0)"><g data-mml-node="mn" transform="translate(255.4, 394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220, -345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2884.5, 0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mo" transform="translate(4107.2, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(4385.2, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msubsup" transform="translate(4663.2, 0)"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(510.7, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g><g data-mml-node="mi" transform="translate(446, -254) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(5640.5, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(6640.8, 0)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(7437.7, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msup" transform="translate(7715.7, 0)"><g data-mml-node="mo"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mn" transform="translate(278, 363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>；</li>
<li>如果<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex" xmlns="http://www.w3.org/2000/svg" width="1.176ex" height="1.593ex" role="img" focusable="false" viewBox="0 -694 520 704"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container>满足收敛条件，则停止迭代；否则令<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.592ex" xmlns="http://www.w3.org/2000/svg" width="6.4ex" height="2.309ex" role="img" focusable="false" viewBox="0 -759 2828.7 1020.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(446, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1017.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msubsup" transform="translate(2073.5, 0)"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(510.7, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g><g data-mml-node="mi" transform="translate(446, -254) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>，返回第2步。</li>
</ol>
<h1 id="2-二维轮廓点配准"><a href="#2-二维轮廓点配准" class="headerlink" title="2. 二维轮廓点配准"></a>2. 二维轮廓点配准</h1><p>ICP算法同样适用于二维情形：当相机对某个物体拍照得到影像后，对影像提取轮廓点得到边缘点云P；相机在同一空间平面内作二维旋转和平移，对同一物体拍照，提取轮廓点后得到边缘点云Q。在不考虑中心投影引起的变形时，轮廓点的配准可以采用ICP算法。</p>
<blockquote>
<p>将ICP算法应用于二维情景通常针对相机姿态变化较小的情形，例如运动相机的相邻帧跟踪。</p>
</blockquote>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX学习笔记（2） 文章书写技巧</title>
    <url>/2021/03/05/LaTeX%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89-%E6%96%87%E7%AB%A0%E4%B9%A6%E5%86%99%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><blockquote>
<p><a href="https://blog.csdn.net/u014803202/article/details/50410748" target="_blank" rel="noopener">https://blog.csdn.net/u014803202/article/details/50410748</a></p>
</blockquote>
<h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><blockquote>
<p><a href="https://blog.csdn.net/bi_hu_man_wu/article/details/72465664" target="_blank" rel="noopener">https://blog.csdn.net/bi_hu_man_wu/article/details/72465664</a></p>
</blockquote>
<p>a. 连续参考文献序号</p>
<p>b. 参考文献上标</p>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/bi_hu_man_wu/article/details/72465664" target="_blank" rel="noopener">Latex 参考文献上标_bi_hu_man_wu的博客-CSDN博客</a></p>
</blockquote>
<p>在文章开头添加如下代码，新增命令<code>\upcite</code>，借助<code>\textsuperscript</code>来实现上标。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\newcommand&#123;\upcite&#125;[1]&#123;\textsuperscript&#123;\textsuperscript&#123;\cite&#123;#1&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="/images/image-20201119230532993.png" alt="image-20201119230532993" style="zoom:50%;" /></p>
<p>c. 更好看的大于小于号</p>
<p>d. 大图下的四幅小图都有标号</p>
<h1 id="自定义环境"><a href="#自定义环境" class="headerlink" title="自定义环境"></a>自定义环境</h1><p><a href="https://blog.csdn.net/sdu_hao/article/details/101392629" target="_blank" rel="noopener">https://blog.csdn.net/sdu_hao/article/details/101392629</a></p>
<p><img src="/images/image-20201122164147933.png" alt="image-20201122164147933"></p>
<h1 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a>自定义字体</h1><p>字体识别：<a href="https://www.likefont.com/" target="_blank" rel="noopener">https://www.likefont.com/</a></p>
<p>导入自定义字体文件(ttf)：<a href="https://blog.csdn.net/ProgramChangesWorld/article/details/51882726" target="_blank" rel="noopener">https://blog.csdn.net/ProgramChangesWorld/article/details/51882726</a></p>
<h2 id="中文字体设置"><a href="#中文字体设置" class="headerlink" title="中文字体设置"></a>中文字体设置</h2><h3 id="ctex自带字体"><a href="#ctex自带字体" class="headerlink" title="ctex自带字体"></a>ctex自带字体</h3><div class="table-container">
<table>
<thead>
<tr>
<th>字体</th>
<th>命令1</th>
<th>命令2</th>
</tr>
</thead>
<tbody>
<tr>
<td>宋体</td>
<td>\songti</td>
<td>\CJKfamily{zhsong}</td>
</tr>
<tr>
<td>黑体</td>
<td>\heiti</td>
<td>\CJKfamily{zhhei}</td>
</tr>
<tr>
<td>仿宋</td>
<td>\fangsong</td>
<td>\CJKfamily{zhfs}</td>
</tr>
<tr>
<td>楷书</td>
<td>\kaishu</td>
<td>\CJKfamily{zhkai}</td>
</tr>
<tr>
<td>隶书</td>
<td>\lishu</td>
<td>\CJKfamily{zhli}</td>
</tr>
<tr>
<td>圆体</td>
<td>\youyuan</td>
<td>\CJKfamily{zhyou}</td>
</tr>
<tr>
<td>微软雅黑</td>
<td>\yahei</td>
<td>\CJKfamily{zhyahei}</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>参考：<a href="https://www.cnblogs.com/LitBro/p/12074820.html" target="_blank" rel="noopener">Latex 对中文字体设置的一些解决</a></p>
</blockquote>
<h3 id="设置系统字体（使用xeCJK）"><a href="#设置系统字体（使用xeCJK）" class="headerlink" title="设置系统字体（使用xeCJK）"></a>设置系统字体（使用xeCJK）</h3><p>查找可用字体：<code>fc-list :lang=zh</code></p>
<p><img src="/images/image-20201123143312015.png" alt="image-20201123143312015" style="zoom: 50%;" /></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\setCJKfamilyfont&#123;kaiti&#125;&#123;KaiTi&#125;</span><br><span class="line">\newcommand&#123;\kaiti&#125;&#123;\CJKfamily&#123;kaiti&#125;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a href="https://www.cnblogs.com/LitBro/p/12074820.html" target="_blank" rel="noopener">Latex 对中文字体设置的一些解决</a></p>
</blockquote>
<h1 id="def的用法"><a href="#def的用法" class="headerlink" title="def的用法"></a>def的用法</h1><p><a href="https://blog.csdn.net/u014713475/article/details/80651662" target="_blank" rel="noopener">https://blog.csdn.net/u014713475/article/details/80651662</a></p>
<p>自定义变量：<a href="https://blog.csdn.net/robertchenguangzhi/article/details/50461514" target="_blank" rel="noopener">https://blog.csdn.net/robertchenguangzhi/article/details/50461514</a></p>
<h1 id="clearpage"><a href="#clearpage" class="headerlink" title="clearpage"></a>clearpage</h1><p>新一页</p>
<p><a href="https://blog.csdn.net/zd0303/article/details/7572992" target="_blank" rel="noopener">https://blog.csdn.net/zd0303/article/details/7572992</a></p>
<h1 id="可变参数的自定义宏"><a href="#可变参数的自定义宏" class="headerlink" title="可变参数的自定义宏"></a>可变参数的自定义宏</h1><p><a href="https://davidyat.es/2016/07/27/writing-a-latex-macro-that-takes-a-variable-number-of-arguments/" target="_blank" rel="noopener">https://davidyat.es/2016/07/27/writing-a-latex-macro-that-takes-a-variable-number-of-arguments/</a></p>
<h1 id="自定义页眉页脚"><a href="#自定义页眉页脚" class="headerlink" title="自定义页眉页脚"></a>自定义页眉页脚</h1><p><a href="http://www.ctex.org/documents/packages/layout/fancyhdr.htm" target="_blank" rel="noopener">http://www.ctex.org/documents/packages/layout/fancyhdr.htm</a></p>
<p><a href="https://blog.csdn.net/markpen/article/details/42241067" target="_blank" rel="noopener">https://blog.csdn.net/markpen/article/details/42241067</a></p>
<p><a href="https://blog.csdn.net/yq_forever/article/details/84024456" target="_blank" rel="noopener">https://blog.csdn.net/yq_forever/article/details/84024456</a></p>
<p>首页双线页眉：<a href="http://blog.sina.com.cn/s/blog_5e16f1770100me8u.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_5e16f1770100me8u.html</a></p>
<p>fancyhdr官方文档：<a href="http://mirrors.ctan.org/macros/latex/contrib/fancyhdr/fancyhdr.pdf" target="_blank" rel="noopener">http://mirrors.ctan.org/macros/latex/contrib/fancyhdr/fancyhdr.pdf</a></p>
<p><a href="http://www.ctex.org/documents/packages/layout/fancyhdr.pdf" target="_blank" rel="noopener">http://www.ctex.org/documents/packages/layout/fancyhdr.pdf</a></p>
<h1 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h1><p><a href="https://blog.csdn.net/luolang_103/article/details/81289529" target="_blank" rel="noopener">https://blog.csdn.net/luolang_103/article/details/81289529</a></p>
<p><img src="/images/image-20201123164257384.png" alt="image-20201123164257384"></p>
<h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><p>ifthen</p>
<p><a href="https://ctan.org/pkg/ifthen?lang=en" target="_blank" rel="noopener">https://ctan.org/pkg/ifthen?lang=en</a></p>
<h1 id="设置标题间距"><a href="#设置标题间距" class="headerlink" title="设置标题间距"></a>设置标题间距</h1><p><a href="https://www.jianshu.com/p/d7848f815e5f" target="_blank" rel="noopener">https://www.jianshu.com/p/d7848f815e5f</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\RequirePackage&#123;titlesec&#125;</span><br><span class="line">\titleformat</span><br><span class="line">\titlespacing</span><br></pre></td></tr></table></figure>
<h1 id="解决模板宋体无法加粗和斜体的问题"><a href="#解决模板宋体无法加粗和斜体的问题" class="headerlink" title="解决模板宋体无法加粗和斜体的问题"></a>解决模板宋体无法加粗和斜体的问题</h1><p><img src="/images/image-20201124172200389.png" alt="image-20201124172200389" style="zoom: 50%;" /></p>
<p>原模板有这么一句：</p>
<p><img src="/images/image-20201124172219861.png" alt="image-20201124172219861" style="zoom:50%;" /></p>
<p>但我们自己写的用的是ctexart的class，使用这句会提示参数冲突（clash）</p>
<p>自己写一句字体设置语句，可以解决问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%%% 解决宋体无法加粗斜体的问题</span><br><span class="line">\setCJKfamilyfont&#123;zhsong&#125;[AutoFakeBold&#x3D;true,AutoFakeSlant&#x3D;true]&#123;SimSun&#125;</span><br><span class="line">\renewcommand*&#123;\songti&#125;&#123;\CJKfamily&#123;zhsong&#125;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/songyuc/article/details/80271607" target="_blank" rel="noopener">https://blog.csdn.net/songyuc/article/details/80271607</a></p>
</blockquote>
<h1 id="表格边框加粗"><a href="#表格边框加粗" class="headerlink" title="表格边框加粗"></a>表格边框加粗</h1><p><a href="https://blog.csdn.net/loveaborn/article/details/9151505" target="_blank" rel="noopener">https://blog.csdn.net/loveaborn/article/details/9151505</a></p>
<p>booktabs</p>
<h1 id="插入并列多图"><a href="#插入并列多图" class="headerlink" title="插入并列多图"></a>插入并列多图</h1><p><a href="https://blog.csdn.net/a6822342/article/details/80533135" target="_blank" rel="noopener">https://blog.csdn.net/a6822342/article/details/80533135</a></p>
<p>要用subfigure，不要用subcaption</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\begin&#123;figure*&#125;</span><br><span class="line">	\centering</span><br><span class="line">	\subfigure[JSEG，250]&#123;</span><br><span class="line">		\centering</span><br><span class="line">		\includegraphics[width&#x3D;0.3\textwidth]&#123;figures&#x2F;JSEG-250.png&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	\quad</span><br><span class="line">	\subfigure[JSEG，500]&#123;</span><br><span class="line">		\centering</span><br><span class="line">		\includegraphics[width&#x3D;0.3\textwidth]&#123;figures&#x2F;JSEG-500.png&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	\quad  % ↓这个空行很重要</span><br><span class="line"></span><br><span class="line">	\subfigure[光谱纹理+分水岭，250]&#123;</span><br><span class="line">		\centering</span><br><span class="line">		\includegraphics[width&#x3D;0.3\textwidth]&#123;figures&#x2F;benwen-250.png&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	\quad</span><br><span class="line">	\subfigure[光谱纹理+分水岭，500]&#123;</span><br><span class="line">		\centering</span><br><span class="line">		\includegraphics[width&#x3D;0.3\textwidth]&#123;figures&#x2F;benwen-500.png&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	\bicaption&#123;方法与目标区数量&#125;&#123;Method and Target Area Number&#125;</span><br><span class="line">	\label&#123;fig:compare-jseg&#125;</span><br><span class="line">\end&#123;figure*&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20201124220614580.png" alt="image-20201124220614580" style="zoom:50%;" /></p>
<h1 id="参考文献之间的间距"><a href="#参考文献之间的间距" class="headerlink" title="参考文献之间的间距"></a>参考文献之间的间距</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\setlength&#123;\bibsep&#125;&#123;0.0pt&#125; % 参考文献之间的间距</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://www.texfaq.org/FAQ-compactbib" target="_blank" rel="noopener">http://www.texfaq.org/FAQ-compactbib</a></p>
</blockquote>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX学习笔记（1） 在Windows下配置环境</title>
    <url>/2021/03/05/LaTeX%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89-%E5%9C%A8Windows%E4%B8%8B%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>Latex入门：<a href="https://blog.csdn.net/u014803202/article/details/50410748" target="_blank" rel="noopener">https://blog.csdn.net/u014803202/article/details/50410748</a></p>
<h1 id="选用哪个排版编译器？TeX-Live还是MiKTeX？"><a href="#选用哪个排版编译器？TeX-Live还是MiKTeX？" class="headerlink" title="选用哪个排版编译器？TeX Live还是MiKTeX？"></a>选用哪个排版编译器？TeX Live还是MiKTeX？</h1><ul>
<li>MiKTeX的标准版安装程序“只安装基本的东西”，其他任何需要的东西都可以动态安装；TeX Live的标准安装就是“完全安装”（大约4.5个G）</li>
<li>MiKTeX比TeX Live有稍微灵活一些的许可方式：有一小部分LaTeX包是MiKTeX提供的，而TeX Live没有（如<code>thesis</code>）</li>
<li>TeX Live最初是在Unix上开发的，因此适用于Linux、Mac以及Windows（或其他系统）；MiKTeX基于Windows系统开发，因此更适用于Windows用户</li>
<li>……</li>
</ul>
<blockquote>
<p>参考资料</p>
<ul>
<li>（原文）<a href="https://www.texdev.net/2016/12/18/tex-on-windows-tex-live-versus-miktex-revisited/" target="_blank" rel="noopener">https://www.texdev.net/2016/12/18/tex-on-windows-tex-live-versus-miktex-revisited/</a></li>
<li>（中译）<a href="https://www.cnblogs.com/liuliang1999/p/12656706.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuliang1999/p/12656706.html</a></li>
</ul>
</blockquote>
<h1 id="MiKTeX与VSCode的配合"><a href="#MiKTeX与VSCode的配合" class="headerlink" title="MiKTeX与VSCode的配合"></a>MiKTeX与VSCode的配合</h1><blockquote>
<p>参考资料：<a href="https://blog.csdn.net/weixin_43356770/article/details/104035291" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43356770/article/details/104035291</a></p>
</blockquote>
<h2 id="安装MiKTeX"><a href="#安装MiKTeX" class="headerlink" title="安装MiKTeX"></a>安装MiKTeX</h2><p>在<a href="https://miktex.org/" target="_blank" rel="noopener">官网</a>下载安装包，下载后双击安装（<em>安装路径不要有空格或中文等其他字符</em>），安装完成后，检查环境变量<code>path</code>，是否包含了安装路径下的<code>\miktex\bin\x64</code>路径。</p>
<h2 id="在VS-Code中安装和配置LaTeX-Workshop插件"><a href="#在VS-Code中安装和配置LaTeX-Workshop插件" class="headerlink" title="在VS Code中安装和配置LaTeX Workshop插件"></a>在VS Code中安装和配置LaTeX Workshop插件</h2><p>a. 打开VS Code，在扩展商店搜索<code>latex</code>，找到LaTeX Workshop，安装该插件。</p>
<p><img src="/images/image-20201119163802311.png" alt="image-20201119163802311" style="zoom:50%;" /></p>
<p>b. 安装完成后，把以下设置拷贝至<code>settings.json</code>文件中，即可完成设置。（建议写到全局的设置中）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"latex-workshop.latex.autoBuild.run"</span>: <span class="string">"never"</span>,</span><br><span class="line">    <span class="attr">"latex-workshop.latex.recipes"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"xelatex"</span>,</span><br><span class="line">            <span class="attr">"tools"</span>: [</span><br><span class="line">                <span class="string">"xelatex"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"latexmk"</span>,</span><br><span class="line">            <span class="attr">"tools"</span>: [</span><br><span class="line">                <span class="string">"latexmk"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"xelatex -&gt; bibtex -&gt; xelatex*2"</span>,</span><br><span class="line">            <span class="attr">"tools"</span>: [</span><br><span class="line">                <span class="string">"xelatex"</span>,</span><br><span class="line">                <span class="string">"bibtex"</span>,</span><br><span class="line">                <span class="string">"xelatex"</span>,</span><br><span class="line">                <span class="string">"xelatex"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"latex-workshop.latex.tools"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"xelatex"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"miktex-xelatex"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"-synctex=1"</span>,</span><br><span class="line">                <span class="string">"-interaction=nonstopmode"</span>,</span><br><span class="line">                <span class="string">"-file-line-error"</span>,</span><br><span class="line">                <span class="string">"%DOC%"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"latexmk"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"miktex-latexmk"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"-synctex=1"</span>,</span><br><span class="line">                <span class="string">"-interaction=nonstopmode"</span>,</span><br><span class="line">                <span class="string">"-file-line-error"</span>,</span><br><span class="line">                <span class="string">"-pdf"</span>,</span><br><span class="line">                <span class="string">"%DOC%"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"pdflatex"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"miktex-pdflatex"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"-synctex=1"</span>,</span><br><span class="line">                <span class="string">"-interaction=nonstopmode"</span>,</span><br><span class="line">                <span class="string">"-file-line-error"</span>,</span><br><span class="line">                <span class="string">"%DOC%"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"bibtex"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"miktex-bibtex"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"%DOCFILE%"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//清除辅助文件</span></span><br><span class="line">    <span class="attr">"latex-workshop.latex.autoClean.run"</span>: <span class="string">"onBuilt"</span>,</span><br><span class="line">    <span class="attr">"latex-workshop.latex.clean.fileTypes"</span>: [</span><br><span class="line">        <span class="string">"*.aux"</span>,</span><br><span class="line">        <span class="string">"*.bbl"</span>,</span><br><span class="line">        <span class="string">"*.blg"</span>,</span><br><span class="line">        <span class="string">"*.gz"</span>,</span><br><span class="line">        <span class="string">"*.idx"</span>,</span><br><span class="line">        <span class="string">"*.ind"</span>,</span><br><span class="line">        <span class="string">"*.lof"</span>,</span><br><span class="line">        <span class="string">"*.lot"</span>,</span><br><span class="line">        <span class="string">"*.out"</span>,</span><br><span class="line">        <span class="string">"*.toc"</span>,</span><br><span class="line">        <span class="string">"*.acn"</span>,</span><br><span class="line">        <span class="string">"*.acr"</span>,</span><br><span class="line">        <span class="string">"*.alg"</span>,</span><br><span class="line">        <span class="string">"*.glg"</span>,</span><br><span class="line">        <span class="string">"*.glo"</span>,</span><br><span class="line">        <span class="string">"*.gls"</span>,</span><br><span class="line">        <span class="string">"*.ist"</span>,</span><br><span class="line">        <span class="string">"*.fls"</span>,</span><br><span class="line">        <span class="string">"*.log"</span>,</span><br><span class="line">        <span class="string">"*.fdb_latexmk"</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"latex-workshop.view.pdf.viewer"</span>: <span class="string">"tab"</span>, <span class="comment">//用内置pdf阅读器查看</span></span><br><span class="line">    <span class="attr">"latex-workshop.showContextMenu"</span>: <span class="literal">true</span>, <span class="comment">//右键菜单</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>使用中文写作用xelatex编译，在<code>latex-workshop.latex.recipes</code>中把xelatex放在首位；如果使用英文写作就把latexmk放在首位；</li>
<li>将tools中的<code>%DOC%</code>替换成<code>%DOCFILE%</code>就可以支持中文路径下的文件了；</li>
<li>为部分<code>.tex</code>文档指定编译器，在文档首部加入以下代码：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%!TEX program &#x3D; pdflatex</span><br></pre></td></tr></table></figure>
<h2 id="写作测试"><a href="#写作测试" class="headerlink" title="写作测试"></a>写作测试</h2><p>a. 创建一个文件夹，添加文件<code>main.tex</code>，写入如下测试内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\documentclass&#123;ctexart&#125;</span><br><span class="line">\title&#123;测 试&#125;</span><br><span class="line">\author&#123;林 杉&#125;</span><br><span class="line">\date&#123;\today&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">    \maketitle</span><br><span class="line">    Hello World!</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>
<p>b. 按下快捷键<code>Ctrl</code>+<code>Alt</code>+<code>B</code>，即可执行编译。编译过程中，可能弹出类似如下的对话框，这是MiKTeX安装依赖项的确认框，点击<code>Install</code>即可为MiKTeX安装依赖。</p>
<p><img src="/images/image-20201119184604076.png" alt="image-20201119184604076" style="zoom:50%;" /></p>
<p>c. 按下快捷键<code>Ctrl</code>+<code>Alt</code>+<code>V</code>，可以在侧边栏查看编译后生成的PDF。</p>
<p><img src="/images/image-20201119213457680.png" alt="image-20201119213457680" style="zoom:50%;" /></p>
<h2 id="自动格式化"><a href="#自动格式化" class="headerlink" title="自动格式化"></a>自动格式化</h2><p>a. 如果VS Code配置了自动格式化，那么在保存<code>.tex</code>文件时会报错，提示找不到<code>perl.exe</code>，这是因为自动格式化时用到了<code>latexindent</code>，这个脚本是用perl书写的。</p>
<p>b. 前往<a href="https://www.perl.org/get.html" target="_blank" rel="noopener">www.perl.org/get.html</a>下载perl，<code>Strawberry Perl</code>或<code>ActiveState Perl</code>都可以（因为<code>ActiveState Perl</code>在我的电脑上安装失败——或许是因为网络——因此我选择了<code>Strawberry Perl</code>）。</p>
<p>c. 安装完成后，按下<code>Shift</code>+<code>Alt</code>+<code>F</code>执行自动格式化，出现了新的错误（如下图所示），perl提示缺少相应的模块。</p>
<p><img src="/images/image-20201119214516636.png" alt="image-20201119214516636"></p>
<p><img src="/images/image-20201119214541882.png" alt="image-20201119214541882"></p>
<p>d. 在perl中安装模块需要用到模块管理工具<code>cpan</code>，该工具在安装perl时会自动安装。执行如下的命令即可完成对应模块的安装。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cpan <span class="literal">-i</span> Log::Log4perl</span><br><span class="line">cpan <span class="literal">-i</span> Log::Dispatch::File</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a href="https://tex.stackexchange.com/questions/445521/latexindent-cant-locate-log-log4perl-pm-in-inc-you-may-need-to-install-the-l" target="_blank" rel="noopener">latexindent: Can’t locate Log/Log4perl.pm in @INC (you may need to install the Log::Log4perl module)</a></p>
</blockquote>
<p>e. 如果安装速度过慢，可以使用国内镜像，镜像地址可以在<a href="https://www.cpan.org/SITES.html" target="_blank" rel="noopener">全球镜像列表</a>找到。添加镜像的方法如下所示，例如，使用中科大的镜像：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cpan</span><br><span class="line">o conf urllist http://mirrors.ustc.edu.cn/CPAN/</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/Aggressive_snail/article/details/53396432" target="_blank" rel="noopener">获取以及修改cpan镜像地址_Aggressive_snail的专栏-CSDN博客</a></p>
</blockquote>
<h1 id="使用bibtex添加文献引用"><a href="#使用bibtex添加文献引用" class="headerlink" title="使用bibtex添加文献引用"></a>使用bibtex添加文献引用</h1><blockquote>
<p>参考：<a href="https://blog.csdn.net/caiandyong/article/details/70258670" target="_blank" rel="noopener">Latex引用参考文献-BibTex的使用_蔡先生的专栏-CSDN博客</a></p>
</blockquote>
<p>a. 引用参考文献并实现自动标号，需要用到<code>bibtex</code>，该工具需要配合<code>pdflatex</code>或<code>xelatex</code>使用，使用顺序为：<code>xelatex -&gt; bibtex -&gt; xelatex*2</code>。</p>
<p>b. 将settings.json中<code>latex-workshop.latex.recipes</code>的顺序改为如下所示，按下<code>Ctrl</code>+<code>Alt</code>+<code>B</code>后将按照第一个工具链执行默认的编译命令。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"latex-workshop.latex.recipes": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"xelatex -&gt; bibtex -&gt; xelatex*2"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">            <span class="string">"xelatex"</span>,</span><br><span class="line">            <span class="string">"bibtex"</span>,</span><br><span class="line">            <span class="string">"xelatex"</span>,</span><br><span class="line">            <span class="string">"xelatex"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"xelatex"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">            <span class="string">"xelatex"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"latexmk"</span>,</span><br><span class="line">        <span class="attr">"tools"</span>: [</span><br><span class="line">            <span class="string">"latexmk"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>c. 在根目录下创建<code>ref.bib</code>文件，用于统一存放参考文献，将如下内容拷贝进去。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">@inbook&#123;Wille1982,</span><br><span class="line">  author    = &#123;Wille, Rudolf&#125;,</span><br><span class="line">  editor    = &#123;Rival, Ivan&#125;,</span><br><span class="line">  title     = &#123;Restructuring Lattice Theory: An Approach Based on Hierarchies of Concepts&#125;,</span><br><span class="line">  booktitle = &#123;Ordered Sets: Proceedings of the NATO Advanced Study Institute held at Banff, Canada, August 28 to September 12, 1981&#125;,</span><br><span class="line">  year      = &#123;1982&#125;,</span><br><span class="line">  publisher = &#123;Springer Netherlands&#125;,</span><br><span class="line">  address   = &#123;Dordrecht&#125;,</span><br><span class="line">  pages     = &#123;445--470&#125;,</span><br><span class="line">  isbn      = &#123;978-94-009-7798-3&#125;,</span><br><span class="line">  doi       = &#123;10.1007/978-94-009-7798-3_15&#125;,</span><br><span class="line">  url       = &#123;http://dx.doi.org/10.1007/978-94-009-7798-3_15&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>d. 打开需要引用文献的<code>.tex</code>，在<strong>需要展示参考文献的地方</strong>写入<code>\bibliographystyle</code>和<code>\bibliography</code>，需要引用的地方使用<code>\cite</code>，代码及显示效果如下所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\documentclass&#123;ctexart&#125;</span><br><span class="line">\title&#123;测 试&#125;</span><br><span class="line">\author&#123;林 杉&#125;</span><br><span class="line">\date&#123;\today&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\maketitle</span><br><span class="line"></span><br><span class="line">Hello World!\cite&#123;Wille1982&#125;</span><br><span class="line"></span><br><span class="line">% 参考文献</span><br><span class="line">\bibliographystyle&#123;plain&#125;</span><br><span class="line">\bibliography&#123;ref&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20201119224145853.png" alt="image-20201119224145853" style="zoom:50%;" /></p>
<p>其中，<code>\bibliography</code>用来指定存放参考文献的文件路径（ref.bib），<code>\bibliographystyle</code>用来指定显示的样式，现成的可选样式有如下几种。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Style</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>plain</td>
<td>按字母的顺序排列，比较次序为作者、年度和标题</td>
</tr>
<tr>
<td>unsrt</td>
<td>样式同plain，只是按照引用的先后排序</td>
</tr>
<tr>
<td>alpha</td>
<td>用作者名首字母+年份后两位作标号，以字母顺序排序</td>
</tr>
<tr>
<td>abbrv</td>
<td>类似plain，将月份全拼改为缩写，更显紧凑</td>
</tr>
<tr>
<td>ieeetr</td>
<td>国际电气电子工程师协会期刊样式</td>
</tr>
<tr>
<td>acm</td>
<td>美国计算机学会期刊样式</td>
</tr>
<tr>
<td>siam</td>
<td>美国工业和应用数学学会期刊样式</td>
</tr>
<tr>
<td>apalike</td>
<td>美国心理学学会期刊样式</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>Powershell常用命令使用手册</title>
    <url>/2021/03/05/Powershell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="1-rm命令"><a href="#1-rm命令" class="headerlink" title="1. rm命令"></a>1. rm命令</h1><p><code>Remove-Item</code>，主要用于删除文件或文件夹，基本用法：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rm example.exe  <span class="comment"># 删除example.exe文件</span></span><br></pre></td></tr></table></figure>
<ul>
<li>删除所有文件：<code>rm *</code></li>
<li>删除满足通配符条件的部分文件：<code>rm * -include *.doc</code>或<code>rm *.doc</code></li>
<li>删除满足<strong>多个通配符</strong>条件的文件：<code>rm * -include *.doc,*.xls</code>或<code>rm *doc,*.xls</code>（通配符用逗号隔开）</li>
<li>删除不满足条件的文件：<code>rm * -exclude *.doc,*.xls</code></li>
<li>删除文件夹：<code>rm -recurse tmp</code>或<code>rm -r tmp</code>（递归参数<code>-r</code>，否则文件夹非空时需要手动确认）</li>
</ul>
<blockquote>
<p><a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/remove-item?view=powershell-7.1" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/remove-item?view=powershell-7.1</a></p>
</blockquote>
<h1 id="2-cp命令"><a href="#2-cp命令" class="headerlink" title="2. cp命令"></a>2. cp命令</h1><p><code>Copy-item</code>，主要用于复制文件或文件夹：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cp * C:/tmp  <span class="comment"># 将当前目录下所有文件复制到C:\tmp文件夹中</span></span><br></pre></td></tr></table></figure>
<p>若目标文件夹不存在，则会将其作为文件处理，导致出错，因此在复制到文件夹时，应该保证文件夹存在。</p>
<ul>
<li>将一个文件复制为另一个文件：<code>cp C:/tmp/aaa.exe C:/tmp_1/bbb.exe</code></li>
<li>将一个文件复制到文件夹下：<code>cp aaa.exe C:/tmp</code>，<code>cp aaa.exe ../tmp</code></li>
<li>对文件进行筛选复制：<code>cp * ../tmp -include *.exe</code>或<code>cp *.exe ../tmp</code></li>
<li>排除某些文件复制：<code>cp * ../tmp -exclude *.exe,*.xls,*.doc</code></li>
</ul>
<blockquote>
<p><a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/copy-item?view=powershell-7.1" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/copy-item?view=powershell-7.1</a></p>
</blockquote>
<h1 id="3-操作满足条件的文件"><a href="#3-操作满足条件的文件" class="headerlink" title="3. 操作满足条件的文件"></a>3. 操作满足条件的文件</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-Childitem</span>  <span class="comment"># 查看所有文件，同 ls</span></span><br><span class="line"><span class="built_in">Get-Childitem</span> | Where Length <span class="operator">-eq</span> <span class="number">140</span>  <span class="comment"># 查找长度等于140字节的文件</span></span><br><span class="line"><span class="built_in">Get-Childitem</span> | <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.Length <span class="operator">-eq</span> <span class="number">140</span>&#125;</span><br><span class="line"><span class="built_in">Get-Childitem</span> | <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.Name <span class="operator">-Match</span> <span class="string">"^*321^*"</span> <span class="operator">-and</span> <span class="variable">$_</span>.Length <span class="operator">-eq</span> <span class="number">140</span>&#125;  <span class="comment"># 多条件用-and连接</span></span><br><span class="line"><span class="built_in">Get-Childitem</span> | <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.Length <span class="operator">-eq</span> <span class="number">140</span>&#125; | <span class="built_in">ForEach-Object</span> &#123;<span class="built_in">Remove-Item</span> <span class="variable">$_</span>.Name&#125;  <span class="comment"># 删除长度等于140字节的文件</span></span><br></pre></td></tr></table></figure>
<p><code>-eq</code> 等于</p>
<p><code>-Match</code> 加正则表达式，全字匹配</p>
<p><code>-gt, -ge</code> 大于，大于等于</p>
<p><code>-lt, -le</code> 小于，小于等于</p>
<blockquote>
<p><a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/where-object?view=powershell-7.1" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/where-object?view=powershell-7.1</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows装机必备软件索引 2021年2月26日</title>
    <url>/2021/03/05/Windows%E8%A3%85%E6%9C%BA%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<table border="1px" style="text-align: center;">
    <tr style="font-size:bold;">
        <th>软件名称</th>
        <th>功能</th>
        <th>类型</th>
        <th>链接</th>
    </tr>
    <tr>
        <td>火狐Firefox浏览器</td>
        <td>浏览器</td>
        <td>基础办公软件</td>
        <td><a target="_blank" href="https://www.mozilla.org/zh-CN/firefox/all/#product-desktop-release">https://www.mozilla.org/zh-CN/firefox/all/#product-desktop-release</a>
        </td>
    </tr>
    <tr>
        <td>Everything</td>
        <td>文件搜索</td>
        <td>基础办公软件</td>
        <td><a target="_blank" href="https://www.voidtools.com/zh-cn/">https://www.voidtools.com/zh-cn/</a></td>
    </tr>
    <tr>
        <td>Adobe Reader</td>
        <td>PDF阅读器 </td>
        <td>基础办公软件</td>
        <td><a target="_blank" href="https://get.adobe.com/cn/reader/enterprise/">https://get.adobe.com/cn/reader/enterprise/</a></td>
    </tr>
    <tr>
        <td>Typora</td>
        <td>文档书写工具 </td>
        <td>基础办公软件</td>
        <td>
            <a target="_blank" href="https://typora.io/#windows">https://typora.io/#windows</a>
            <br> Typora主题: <a target="_blank" href="https://theme.typora.io">https://theme.typora.io</a>
        </td>
    </tr>
    <tr>
        <td>VS Code</td>
        <td>文档书写工具/代码编辑器</td>
        <td>基础办公软件/开发</td>
        <td><a target="_blank" href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></td>
    </tr>
    <tr>
        <td>向日葵</td>
        <td>远程办公</td>
        <td>基础办公软件</td>
        <td><a target="_blank" href="https://sunlogin.oray.com/download/">https://sunlogin.oray.com/download/</a></td>
    </tr>
    <tr>
        <td>微信</td>
        <td>交流通讯</td>
        <td>基础办公软件</td>
        <td><a target="_blank" href="https://windows.weixin.qq.com/?lang=zh_CN">https://windows.weixin.qq.com/?lang=zh_CN</a></td>
    </tr>
    <tr>
        <td>QQ/TIM</td>
        <td>交流通讯</td>
        <td>基础办公软件</td>
        <td><a target="_blank" href="https://tim.qq.com/download.html">https://tim.qq.com/download.html</a></td>
    </tr>
    <tr>
        <td>腾讯会议</td>
        <td>交流通讯</td>
        <td>基础办公软件</td>
        <td><a target="_blank" href="https://meeting.tencent.com/download-center.html">https://meeting.tencent.com/download-center.html</a>
        </td>
    </tr>
    <tr>
        <td>Visual Studio(主要用于C++开发)</td>
        <td>IDE</td>
        <td>开发专用</td>
        <td><a target="_blank" href="https://visualstudio.microsoft.com/zh-hans/">https://visualstudio.microsoft.com/zh-hans/</a></td>
    </tr>
    <tr>
        <td>Qt</td>
        <td>IDE</td>
        <td>开发专用</td>
        <td>
            官方下载地址: <a target="_blank" href="https://download.qt.io/archive/qt/">https://download.qt.io/archive/qt/</a>
            <br> 清华: <a target="_blank" href="https://mirrors.tuna.tsinghua.edu.cn/qt/archive/qt/">https://mirrors.tuna.tsinghua.edu.cn/qt/archive/qt/</a>
            <br> 北理: <a target="_blank" href="https://mirrors.bit.edu.cn/qtproject/archive/qt/">https://mirrors.bit.edu.cn/qtproject/archive/qt/</a>
            <br> Geekpie（上海科技大学）: <a target="_blank" href="https://mirrors-wan.geekpie.club/qtproject/archive/qt/">https://mirrors-wan.geekpie.club/qtproject/archive/qt/</a>
            <br> 中科大: <a target="_blank" href="http://mirrors.ustc.edu.cn/qtproject/archive/qt/">http://mirrors.ustc.edu.cn/qtproject/archive/qt/</a>
        </td>
    </tr>
    <tr>
        <td>Git</td>
        <td>代码管理工具</td>
        <td>开发专用</td>
        <td><a target="_blank" href="https://git-scm.com/">https://git-scm.com/</a></td>
    </tr>
    <tr>
        <td>Node.js</td>
        <td>高并发服务器/服务端JavaScript</td>
        <td>开发专用</td>
        <td><a target="_blank" href="https://nodejs.org/en/">https://nodejs.org/en/</a></td>
    </tr>
    <tr>
        <td>Hexo</td>
        <td>博客工具</td>
        <td>开发专用</td>
        <td>
            <a target="_blank" href="https://hexo.io/">https://hexo.io/</a>
            <br>
            <code>npm install hexo-cli -g</code>
        </td>
    </tr>
    <tr>
        <td>Snipaste</td>
        <td>截图软件</td>
        <td>开发专用</td>
        <td><a target="_blank" href="https://zh.snipaste.com/">https://zh.snipaste.com/</a></td>
    </tr>
    <tr>
        <td>LICEcap</td>
        <td>录屏软件</td>
        <td>开发专用</td>
        <td><a target="_blank" href="https://www.cockos.com/licecap/">https://www.cockos.com/licecap/</a></td>
    </tr>
    <tr>
        <td>Shadowsocks</td>
        <td>SSH</td>
        <td>开发专用</td>
        <td><a target="_blank" href="https://github.com/shadowsocks/shadowsocks-windows">https://github.com/shadowsocks/shadowsocks-windows</a>
        </td>
    </tr>
</table>]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>获取网易云音乐歌单</title>
    <url>/2021/03/05/%E8%8E%B7%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%AD%8C%E5%8D%95/</url>
    <content><![CDATA[<h1 id="0-内容概述"><a href="#0-内容概述" class="headerlink" title="0. 内容概述"></a>0. 内容概述</h1><p>获取一个用户的所有歌单（包括创建的歌单和收藏的歌单），将歌单的信息（包括封面/名称/歌曲文件）下载到本地。</p>
<ul>
<li>可以选择下载一个用户的所有歌单所有歌曲</li>
<li>也可以下载一个歌单内的所有歌曲</li>
</ul>
<p>难点：解析网易云音乐获取歌单和音乐mp3文件时发送的POST请求，模拟其加密方式，发送自己想要的请求。</p>
<p>工具：</p>
<ol>
<li>Firefox浏览器</li>
<li>Python 3.8.2<ul>
<li>requests <a href="https://pypi.org/project/requests/" target="_blank" rel="noopener">https://pypi.org/project/requests/</a></li>
<li>BeautifulSoup4 <a href="https://pypi.org/project/beautifulsoup4/" target="_blank" rel="noopener">https://pypi.org/project/beautifulsoup4/</a></li>
<li>PyCrypto <a href="https://pypi.org/project/pycrypto/" target="_blank" rel="noopener">https://pypi.org/project/pycrypto/</a></li>
<li>…</li>
</ul>
</li>
</ol>
<h1 id="1-网络请求分析"><a href="#1-网络请求分析" class="headerlink" title="1. 网络请求分析"></a>1. 网络请求分析</h1><h2 id="1-1-找到请求地址"><a href="#1-1-找到请求地址" class="headerlink" title="1.1 找到请求地址"></a>1.1 找到请求地址</h2><p>登录网易云音乐网页版之后，进入“我的音乐”，打开开发者工具转到网络，清除掉所有消息后，点击一个自建的歌单，可以看到出现了几个请求，如下图所示。</p>
<p><img src="/images/image-20210210143234671.png" alt="image-20210210143234671"></p>
<p>因为GET请求只获取到了两个图片信息，因此推断歌曲信息包含在了POST请求中。</p>
<p>在新标签页打开其中后缀为detail的POST请求：</p>
<p><code>https://music.163.com/weapi/v6/playlist/detail?csrf_token=e7cd35dfd29adb489a4d5b8c3b3ef8fa</code></p>
<p>发现歌单信息包含在了该请求的返回结果中，包括歌曲的ID，专辑信息等</p>
<p><img src="/images/image-20210210143819911.png" alt="image-20210210143819911"></p>
<p>因此只需要模拟这个请求，就可以获取到歌单的内容。</p>
<h2 id="1-2-POST请求参数分析"><a href="#1-2-POST请求参数分析" class="headerlink" title="1.2 POST请求参数分析"></a>1.2 POST请求参数分析</h2><h3 id="1-2-1-请求内容简略"><a href="#1-2-1-请求内容简略" class="headerlink" title="1.2.1 请求内容简略"></a>1.2.1 请求内容简略</h3><p>在浏览器中查看POST请求参数，发现两道密文：</p>
<p><img src="/images/image-20210210144408449.png" alt="image-20210210144408449" style="zoom:50%;"></p>
<p>将发送该请求的js文件下载下来，很明显是经过webpack打包过的，搜索<code>encSecKey</code>，找到如下代码：</p>
<p><img src="/images/image-20210210145308133.png" alt="image-20210210145308133"></p>
<p>将包含这两个参数的完整函数提取出来，得到如下格式化结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">encryptFetch = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> t = <span class="number">1</span> &lt; <span class="built_in">arguments</span>.length &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> !== <span class="built_in">arguments</span>[<span class="number">1</span>] ? <span class="built_in">arguments</span>[<span class="number">1</span>] : {}, n = <span class="number">2</span> &lt; <span class="built_in">arguments</span>.length &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> !== <span class="built_in">arguments</span>[<span class="number">2</span>] ? <span class="built_in">arguments</span>[<span class="number">2</span>] : initFetch, o = e, r = {}, a = _extends$<span class="number">1</span>({}, defaultOptions, t), i = o.split(<span class="string">"?"</span>);</span><br><span class="line">    <span class="keyword">void</span> <span class="number">0</span> === a.headers &amp;&amp; (a.headers = {});</span><br><span class="line">    <span class="keyword">var</span> s = a.headers, c = a.encrypt, l = a.paramstr, u = a.noEnc, d = a.serializedParam, f = a.whiteHost;</span><br><span class="line">    <span class="keyword">delete</span> a.encrypt, <span class="keyword">delete</span> a.paramstr, <span class="keyword">delete</span> a.noEnc, <span class="keyword">delete</span> a.serializedParam;</span><br><span class="line">    <span class="keyword">var</span> p = c;</span><br><span class="line">    <span class="keyword">void</span> <span class="number">0</span> === t.encrypt &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> !== u &amp;&amp; (p = !u), l &amp;&amp; (a.data = obj2str(a.data));</span><br><span class="line">    <span class="keyword">var</span> _ = s[CT_TYPE] !== CT_FILE, h = !<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (f) {</span><br><span class="line">        <span class="keyword">var</span> m = [];</span><br><span class="line">        <span class="string">"string"</span> == <span class="keyword">typeof</span> f ? m = [f] : isArray(f) &amp;&amp; (m = m.concat(f)), h = m.some(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>{ <span class="keyword">return</span> <span class="number">-1</span> &lt; o.indexOf(e) })</span><br><span class="line">    } <span class="keyword">var</span> y = h || rMatchUrl.test(o);</span><br><span class="line">    <span class="keyword">if</span> (p &amp;&amp; _ &amp;&amp; y) {</span><br><span class="line">        logReq(o, a), s[CT_TYPE] = FORM_TYPE, <span class="number">2</span> === i.length &amp;&amp; (r = query2obj(i[<span class="number">1</span>])), o = i[<span class="number">0</span>], KeyArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>{</span><br><span class="line">            <span class="keyword">if</span> (a[e]) {</span><br><span class="line">                <span class="keyword">var</span> t = <span class="string">"string"</span> == <span class="keyword">typeof</span> a[e] ? query2obj(a[e]) : a[e];</span><br><span class="line">                r = _extends$<span class="number">1</span>({}, r, t)</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="keyword">var</span> g = getCookie(<span class="string">"__csrf"</span>);</span><br><span class="line">        g &amp;&amp; (r.csrf_token = g), o = o.replace(<span class="regexp">/\/api\//</span>, <span class="string">"/weapi/"</span>) + (g ? <span class="string">"?"</span> + obj2query({ <span class="attr">csrf_token</span>: r.csrf_token }) : <span class="string">""</span>), a.method = <span class="string">"post"</span>, <span class="keyword">delete</span> a.query, <span class="keyword">delete</span> a.data;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/****** 关键代码 ******/</span></span><br><span class="line">        <span class="keyword">var</span> v = encrypt.asrsea(<span class="built_in">JSON</span>.stringify(r), enk.emj2code([<span class="string">"流泪"</span>, <span class="string">"强"</span>]), enk.BASE_CODE, enk.emj2code([<span class="string">"爱心"</span>, <span class="string">"女孩"</span>, <span class="string">"惊恐"</span>, <span class="string">"大笑"</span>]));</span><br><span class="line">        <span class="keyword">return</span> a.body = obj2query({ <span class="attr">params</span>: v.encText, <span class="attr">encSecKey</span>: v.encSecKey }), n(o, a)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">void</span> <span class="number">0</span> === s[CT_TYPE] &amp;&amp; (a.headers[CT_TYPE] = FORM_TYPE), d) {</span><br><span class="line">        <span class="keyword">var</span> b = <span class="string">""</span>, w = a.data;</span><br><span class="line">        isObject(w) ? b = obj2query(w) : <span class="string">"string"</span> == <span class="keyword">typeof</span> w &amp;&amp; (b = w), <span class="keyword">delete</span> a.data;</span><br><span class="line">        <span class="keyword">var</span> S = a.method;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"string"</span> == <span class="keyword">typeof</span> S &amp;&amp; (S = S.toLowerCase()), <span class="string">"post"</span> === S) a.body = b;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"get"</span> === S) {</span><br><span class="line">            <span class="keyword">var</span> C = <span class="number">-1</span> !== o.indexOf(<span class="string">"?"</span>) ? <span class="string">"&amp;"</span> : <span class="string">"?"</span>;</span><br><span class="line">            o += <span class="string">""</span> + C + b</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> n(o, a)</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>这段代码用到了大量的匿名变量，但是很显然，加密<code>params</code>和<code>encSecKey</code>参数的代码由<code>encrypt.asrsea</code>函数完成，因此接下来解析该函数的输入参数和构成，按照数据流的方式进行。</p>
<h3 id="1-2-2-加密函数和加密算法分析"><a href="#1-2-2-加密函数和加密算法分析" class="headerlink" title="1.2.2 加密函数和加密算法分析"></a>1.2.2 加密函数和加密算法分析</h3><p>第一个参数：<code>JSON.stringify(r)</code></p>
<p><img src="/images/image-20210210154252941.png" alt="image-20210210154252941"></p>
<p>函数<code>encryptFetch</code>意思是为请求加密，那么推测，其唯一参数<code>e</code>为网络请求的地址，在函数的第一行写到：<code>o=e, i=o.split("?")</code>，猜测是对请求地址中的参数进行提取；</p>
<p>在14行处，<code>2===i.length &amp;&amp; (r = query2obj(i[1]))</code>很显然了，如果该请求存在参数，那么用<code>?</code>分离出来正是位于第二位，使用<code>query2obj</code>将其转换成一个JS对象；</p>
<p>在20行，在<code>cookie</code>中获取了一个跨域保护参数<code>__csrf</code>，并将其加入到JS对象<code>r</code>中；</p>
<p>在21行，对网络请求的地址进行了修改，在<code>__csrf</code>不为空的情况下，将其作为参数写入到请求地址<code>o</code>中去，这个<code>o</code>在加密时并没有用到</p>
<p>综上所述，<code>JSON.stringify(r)</code>是请求地址参数的字符串化结果，一个例子如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// encrypyFetch('https://aaa.com/?mode=123')</span></span><br><span class="line">r = {</span><br><span class="line">    mode: <span class="number">123</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">JSON</span>.stringify(r)  <span class="comment">// ""{\"mode\":123}""</span></span><br></pre></td></tr></table></figure>
<p>第二/第三/第四个参数均来自<code>enk</code>，在JS文件中搜索，找到这个变量的所有相关代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> encrypt = { <span class="attr">asrsea</span>: d$<span class="number">1</span>, <span class="attr">ecnonasr</span>: e$<span class="number">1</span> },</span><br><span class="line">    emjMap = { <span class="string">"色"</span>: <span class="string">"00e0b"</span>, <span class="string">"流感"</span>: <span class="string">"509f6"</span>, <span class="string">"这边"</span>: <span class="string">"259df"</span>, <span class="string">"弱"</span>: <span class="string">"8642d"</span>, <span class="string">"嘴唇"</span>: <span class="string">"bc356"</span>, <span class="string">"亲"</span>: <span class="string">"62901"</span>, <span class="string">"开心"</span>: <span class="string">"477df"</span>, <span class="string">"呲牙"</span>: <span class="string">"22677"</span>, <span class="string">"憨笑"</span>: <span class="string">"ec152"</span>, <span class="string">"猫"</span>: <span class="string">"b5ff6"</span>, <span class="string">"皱眉"</span>: <span class="string">"8ace6"</span>, <span class="string">"幽灵"</span>: <span class="string">"15bb7"</span>, <span class="string">"蛋糕"</span>: <span class="string">"b7251"</span>, <span class="string">"发怒"</span>: <span class="string">"52b3a"</span>, <span class="string">"大哭"</span>: <span class="string">"b17a8"</span>, <span class="string">"兔子"</span>: <span class="string">"76aea"</span>, <span class="string">"星星"</span>: <span class="string">"8a5aa"</span>, <span class="string">"钟情"</span>: <span class="string">"76d2e"</span>, <span class="string">"牵手"</span>: <span class="string">"41762"</span>, <span class="string">"公鸡"</span>: <span class="string">"9ec4e"</span>, <span class="string">"爱意"</span>: <span class="string">"e341f"</span>, <span class="string">"禁止"</span>: <span class="string">"56135"</span>, <span class="string">"狗"</span>: <span class="string">"fccf6"</span>, <span class="string">"亲亲"</span>: <span class="string">"95280"</span>, <span class="string">"叉"</span>: <span class="string">"104e0"</span>, <span class="string">"礼物"</span>: <span class="string">"312ec"</span>, <span class="string">"晕"</span>: <span class="string">"bda92"</span>, <span class="string">"呆"</span>: <span class="string">"557c9"</span>, <span class="string">"生病"</span>: <span class="string">"38701"</span>, <span class="string">"钻石"</span>: <span class="string">"14af6"</span>, <span class="string">"拜"</span>: <span class="string">"c9d05"</span>, <span class="string">"怒"</span>: <span class="string">"c4f7f"</span>, <span class="string">"示爱"</span>: <span class="string">"0c368"</span>, <span class="string">"汗"</span>: <span class="string">"5b7a4"</span>, <span class="string">"小鸡"</span>: <span class="string">"6bee2"</span>, <span class="string">"痛苦"</span>: <span class="string">"55932"</span>, <span class="string">"撇嘴"</span>: <span class="string">"575cc"</span>, <span class="string">"惶恐"</span>: <span class="string">"e10b4"</span>, <span class="string">"口罩"</span>: <span class="string">"24d81"</span>, <span class="string">"吐舌"</span>: <span class="string">"3cfe4"</span>, <span class="string">"心碎"</span>: <span class="string">"875d3"</span>, <span class="string">"生气"</span>: <span class="string">"e8204"</span>, <span class="string">"可爱"</span>: <span class="string">"7b97d"</span>, <span class="string">"鬼脸"</span>: <span class="string">"def52"</span>, <span class="string">"跳舞"</span>: <span class="string">"741d5"</span>, <span class="string">"男孩"</span>: <span class="string">"46b8e"</span>, <span class="string">"奸笑"</span>: <span class="string">"289dc"</span>, <span class="string">"猪"</span>: <span class="string">"6935b"</span>, <span class="string">"圈"</span>: <span class="string">"3ece0"</span>, <span class="string">"便便"</span>: <span class="string">"462db"</span>, <span class="string">"外星"</span>: <span class="string">"0a22b"</span>, <span class="string">"圣诞"</span>: <span class="string">"8e7"</span>, <span class="string">"流泪"</span>: <span class="string">"01000"</span>, <span class="string">"强"</span>: <span class="string">"1"</span>, <span class="string">"爱心"</span>: <span class="string">"0CoJU"</span>, <span class="string">"女孩"</span>: <span class="string">"m6Qyw"</span>, <span class="string">"惊恐"</span>: <span class="string">"8W8ju"</span>, <span class="string">"大笑"</span>: <span class="string">"d"</span> },</span><br><span class="line">    md = [<span class="string">"色"</span>, <span class="string">"流感"</span>, <span class="string">"这边"</span>, <span class="string">"弱"</span>, <span class="string">"嘴唇"</span>, <span class="string">"亲"</span>, <span class="string">"开心"</span>, <span class="string">"呲牙"</span>, <span class="string">"憨笑"</span>, <span class="string">"猫"</span>, <span class="string">"皱眉"</span>, <span class="string">"幽灵"</span>, <span class="string">"蛋糕"</span>, <span class="string">"发怒"</span>, <span class="string">"大哭"</span>, <span class="string">"兔子"</span>, <span class="string">"星星"</span>, <span class="string">"钟情"</span>, <span class="string">"牵手"</span>, <span class="string">"公鸡"</span>, <span class="string">"爱意"</span>, <span class="string">"禁止"</span>, <span class="string">"狗"</span>, <span class="string">"亲亲"</span>, <span class="string">"叉"</span>, <span class="string">"礼物"</span>, <span class="string">"晕"</span>, <span class="string">"呆"</span>, <span class="string">"生病"</span>, <span class="string">"钻石"</span>, <span class="string">"拜"</span>, <span class="string">"怒"</span>, <span class="string">"示爱"</span>, <span class="string">"汗"</span>, <span class="string">"小鸡"</span>, <span class="string">"痛苦"</span>, <span class="string">"撇嘴"</span>, <span class="string">"惶恐"</span>, <span class="string">"口罩"</span>, <span class="string">"吐舌"</span>, <span class="string">"心碎"</span>, <span class="string">"生气"</span>, <span class="string">"可爱"</span>, <span class="string">"鬼脸"</span>, <span class="string">"跳舞"</span>, <span class="string">"男孩"</span>, <span class="string">"奸笑"</span>, <span class="string">"猪"</span>, <span class="string">"圈"</span>, <span class="string">"便便"</span>, <span class="string">"外星"</span>, <span class="string">"圣诞"</span>],</span><br><span class="line">    BASE_CODE = emj2code(md);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emj2code</span>(<span class="params">e</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> e.map(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>{ <span class="keyword">return</span> emjMap[e] }).join(<span class="string">""</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> enk = { <span class="attr">emj2code</span>: emj2code, <span class="attr">BASE_CODE</span>: BASE_CODE }</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 以下是三个参数的执行结果 */</span></span><br><span class="line"><span class="built_in">console</span>.log(enk.emj2code([<span class="string">"流泪"</span>, <span class="string">"强"</span>]))  <span class="comment">// 010001</span></span><br><span class="line"><span class="built_in">console</span>.log(enk.BASE_CODE)  <span class="comment">// 00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7</span></span><br><span class="line"><span class="built_in">console</span>.log(enk.emj2code([<span class="string">"爱心"</span>, <span class="string">"女孩"</span>, <span class="string">"惊恐"</span>, <span class="string">"大笑"</span>]))  <span class="comment">// 0CoJUm6Qyw8W8jud</span></span><br></pre></td></tr></table></figure>
<p>参数在整个js文件中搜索<code>asrsea</code>，并将其相关的函数提取出来，得到如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> encrypt = { <span class="attr">asrsea</span>: d$<span class="number">1</span>, <span class="attr">ecnonasr</span>: e$<span class="number">1</span> }</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d$1</span>(<span class="params">e, t, n, o</span>) </span>{</span><br><span class="line">    <span class="comment">// t = 010001</span></span><br><span class="line">    <span class="comment">// n = enk.BASE_CODE</span></span><br><span class="line">    <span class="comment">// o = 0CoJUm6Qyw8W8jud</span></span><br><span class="line">    <span class="keyword">var</span> r = {}, a = a$<span class="number">1</span>(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> r.encText = b(e, o), r.encText = b(r.encText, a), r.encSecKey = c$<span class="number">1</span>(a, t, n), r</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a$1</span>(<span class="params">e</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">void</span> <span class="number">0</span>, n = <span class="keyword">void</span> <span class="number">0</span>, o = <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span>, r = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; e; t += <span class="number">1</span>)</span><br><span class="line">        n = <span class="built_in">Math</span>.random() * o.length, n = <span class="built_in">Math</span>.floor(n), r += o.charAt(n);</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">e, t</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> n = aes.enc.Utf8.parse(t), o = aes.enc.Utf8.parse(<span class="string">"0102030405060708"</span>), r = aes.enc.Utf8.parse(e);</span><br><span class="line">    <span class="keyword">return</span> aes.AES.encrypt(r, n, { <span class="attr">iv</span>: o, <span class="attr">mode</span>: aes.mode.CBC }).toString()</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c$1</span>(<span class="params">e, t, n</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> o;</span><br><span class="line">    <span class="keyword">return</span> RSA.setMaxDigits(<span class="number">131</span>), o = <span class="keyword">new</span> RSA.RSAKeyPair(t, <span class="string">""</span>, n), RSA.encryptedString(o, e)</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>加密函数的入口是<code>d$1</code>函数，在该函数中，<code>encText</code>使用<code>b</code>函数进行了两层加密，<code>encSecKey</code>使用<code>c$1</code>函数进行了一层加密，两个参数之间的关联在于由<code>a$1</code>函数生成<code>a</code>变量，该变量就是一个由数字和字母构成的16位长度的随机字符串。</p>
<p>对<code>encText</code>的加密过程为：使用<code>enk.emj2code(["爱心", "女孩", "惊恐", "大笑"])</code>生成的字符串<code>0CoJUm6Qyw8W8jud</code>作为密钥（KEY）、<code>0102030405060708</code>作为偏移量（IV）进行加密，接着再用随机字符串<code>a</code>作为密钥，同样的偏移量进行二次加密；</p>
<blockquote>
<p>aes的加密由<a href="https://www.npmjs.com/package/crypto-js" target="_blank" rel="noopener">crypto-js</a>实现</p>
</blockquote>
<p>对<code>encSecKey</code>的加密用到了RSA方法，其加密方法如下：</p>
<script type="math/tex; mode=display">
m^e\%N=c</script><p>其中，<script type="math/tex">m</script>是信息，<script type="math/tex">e</script>是次方，对应代码中的<code>"010001"</code>的10进制数65537，<script type="math/tex">N</script>是模大小，对应代码的<code>enk.BASE_CODE</code>，字符串长度258位，转为10进制为309位，<script type="math/tex">c</script>是加密后的密文。</p>
<p>总结一下加密过程：首先生成一个16位的随机字符串<code>a</code>与常量字符串<code>0CoJUm6Qyw8W8jud</code>一起，作为加密和解密POST参数的密钥，用到了对称的的AES算法，密文放在<code>params</code>参数中；参数<code>encSecKey</code>存放的则是通过RSA算法加密后的字符串<code>a</code>。</p>
<h3 id="1-2-3-POST请求内容分析"><a href="#1-2-3-POST请求内容分析" class="headerlink" title="1.2.3 POST请求内容分析"></a>1.2.3 POST请求内容分析</h3><p>要分析请求内容，一般是通过在浏览器相关代码处打断点，查看变量实现的，或者极端一点，直接破解RSA算法加密的密文，反解出参数内容，然后破解成功第二天直接到网易报道上班。</p>
<p>获取歌单内容的请求链接为</p>
<p><a href="https://music.163.com/weapi/v6/playlist/detail?csrf_token=e7cd35dfd29adb489a4d5b8c3b3ef8fa" target="_blank" rel="noopener">https://music.163.com/weapi/v6/playlist/detail?csrf_token=e7cd35dfd29adb489a4d5b8c3b3ef8fa</a></p>
<p>发起者是名为<code>musicfrontencryptvalidator.min.js</code>的文件，在这个文件中找到<code>encSecKey</code>，并打上断点，再点击另一个歌单，发现歌单刷新了却还是无法命中断点，一开始还以为是浏览器不支持，骂了一通Firefox并装了个Chrome，后来发现Chrome也做不到还强行装在了C盘，又骂骂咧咧地把Chrome卸了重新回来找问题。</p>
<p>终于在刷新了一遍又一遍网页之后，注意到一个获取<code>playlist</code>的POST请求：</p>
<p><a href="https://music.163.com/weapi/user/playlist?csrf_token=e7cd35dfd29adb489a4d5b8c3b3ef8fa" target="_blank" rel="noopener">https://music.163.com/weapi/user/playlist?csrf_token=e7cd35dfd29adb489a4d5b8c3b3ef8fa</a></p>
<p>发起者是名为<code>core_68ac1b3aadf40a20caba599a0ab2365d.js</code>的文件，其请求参数也是<code>params</code>和<code>encSecKey</code>！</p>
<p><img src="/images/image-20210210224850304.png" alt="image-20210210224850304" style="zoom: 50%;"></p>
<p>在这个文件中找到<code>encSecKey</code>打上断点，切换歌单，终于看到了希望看到的参数：</p>
<p><img src="/images/image-20210210225204938.png" alt="image-20210210225204938" style="zoom:50%;"></p>
<p>参数为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    csrf_token: <span class="string">"e7cd35dfd29adb489a4d5b8c3b3ef8fa"</span></span><br><span class="line">    id: <span class="string">"4914485933"</span></span><br><span class="line">    limit: <span class="string">"1000"</span></span><br><span class="line">    n: <span class="string">"1000"</span></span><br><span class="line">    offset: <span class="string">"0"</span></span><br><span class="line">    total: <span class="string">"true"</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>其中的id是歌单的id，那么好了，只需要获取到歌单的ID，就可以获取到其内容了。</p>
<h1 id="2-Python实现参数加密和数据爬取"><a href="#2-Python实现参数加密和数据爬取" class="headerlink" title="2. Python实现参数加密和数据爬取"></a>2. Python实现参数加密和数据爬取</h1><p>代码参考自<a href="https://github.com/Jack-Cherish/python-spider" target="_blank" rel="noopener">https://github.com/Jack-Cherish/python-spider</a>，用到了PyCrypto库作为AES的加密工具，使用pip安装时提示某个.h文件中存在语法错误，推测是C++的包出错导致的，参考了一个解决方案：<a href="https://blog.csdn.net/airconan/article/details/88386378" target="_blank" rel="noopener">https://blog.csdn.net/airconan/article/details/88386378</a>，打开VS2019的安装目录，找到<code>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\stdint.h</code>，将其拷贝至<code>C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdint.h</code>的同一目录下，并将这个文件中的<code>#include &lt;stdint.h&gt;</code>改为<code>#include "stdint.h"</code>，重新pip安装，即可安装成功。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> click</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> http <span class="keyword">import</span> cookiejar</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载日志</span></span><br><span class="line">t = int(time.time())</span><br><span class="line">log_file_name = <span class="string">'download-log-{:d}.log'</span>.format(t)</span><br><span class="line">logging.basicConfig(level=logging.INFO,</span><br><span class="line">                    format=<span class="string">'%(asctime)s - %(pathname)s[line:%(lineno)d] - %(levelname)s: %(message)s'</span>)</span><br><span class="line">logger = logging.getLogger(log_file_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_file_logger</span><span class="params">(filename=<span class="string">'./logs/'</span> + log_file_name)</span>:</span></span><br><span class="line">    fh = logging.FileHandler(filename=filename, mode=<span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    fh.setLevel(logging.INFO)</span><br><span class="line">    fh.setFormatter(logging.Formatter(</span><br><span class="line">        <span class="string">'%(asctime)s - %(pathname)s[line:%(lineno)d] - %(levelname)s: %(message)s'</span>))</span><br><span class="line">    logger.handlers.append(fh)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Encrypyed</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.modulus = <span class="string">'00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7'</span></span><br><span class="line">        self.nonce = <span class="string">'0CoJUm6Qyw8W8jud'</span></span><br><span class="line">        self.pub_key = <span class="string">'010001'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录加密算法, 基于https://github.com/stkevintan/nw_musicbox脚本实现</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypted_request</span><span class="params">(self, params)</span>:</span></span><br><span class="line">        text = json.dumps(params)</span><br><span class="line">        sec_key = self.create_secret_key(<span class="number">16</span>)</span><br><span class="line">        enc_text = self.aes_encrypt(self.aes_encrypt(</span><br><span class="line">            text, self.nonce), sec_key.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">        enc_sec_key = self.rsa_encrpt(sec_key, self.pub_key, self.modulus)</span><br><span class="line">        data = {<span class="string">'params'</span>: enc_text, <span class="string">'encSecKey'</span>: enc_sec_key}</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aes_encrypt</span><span class="params">(self, text, secKey)</span>:</span></span><br><span class="line">        pad = <span class="number">16</span> - len(text) % <span class="number">16</span></span><br><span class="line">        text = text + chr(pad) * pad</span><br><span class="line">        encryptor = AES.new(secKey.encode(<span class="string">'utf-8'</span>),</span><br><span class="line">                            AES.MODE_CBC, <span class="string">b'0102030405060708'</span>)</span><br><span class="line">        ciphertext = encryptor.encrypt(text.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        ciphertext = base64.b64encode(ciphertext).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rsa_encrpt</span><span class="params">(self, text, pubKey, modulus)</span>:</span></span><br><span class="line">        text = text[::<span class="number">-1</span>]</span><br><span class="line">        rs = pow(int(binascii.hexlify(text), <span class="number">16</span>),</span><br><span class="line">                 int(pubKey, <span class="number">16</span>), int(modulus, <span class="number">16</span>))</span><br><span class="line">        <span class="keyword">return</span> format(rs, <span class="string">'x'</span>).zfill(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_secret_key</span><span class="params">(self, size)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> binascii.hexlify(os.urandom(size))[:<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crawler</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    网易云爬取API</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, timeout=<span class="number">60</span>, cookie_path=<span class="string">'.'</span>)</span>:</span></span><br><span class="line">        self.headers = {</span><br><span class="line">            <span class="string">'Accept'</span>: <span class="string">'*/*'</span>,</span><br><span class="line">            <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip,deflate,sdch'</span>,</span><br><span class="line">            <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8,gl;q=0.6,zh-TW;q=0.4'</span>,</span><br><span class="line">            <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">            <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">            <span class="string">'Host'</span>: <span class="string">'music.163.com'</span>,</span><br><span class="line">            <span class="string">'Referer'</span>: <span class="string">'http://music.163.com/'</span>,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'</span>,</span><br><span class="line">            <span class="string">'Cookie'</span>: <span class="string">'MUSIC_U=d33658da9213990dd11a7440ac3225d9b6d633afc3be6807f3afb748d63b3b1033a649814e309366'</span></span><br><span class="line">        }</span><br><span class="line">        self.session = requests.Session()</span><br><span class="line">        self.session.headers.update(self.headers)</span><br><span class="line">        self.session.cookies = cookiejar.LWPCookieJar(cookie_path)</span><br><span class="line">        self.download_session = requests.Session()</span><br><span class="line">        self.timeout = timeout</span><br><span class="line">        self.ep = Encrypyed()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_request</span><span class="params">(self, url, params)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Post请求</span></span><br><span class="line"><span class="string">        :return: 字典</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        data = self.ep.encrypted_request(params)</span><br><span class="line">        resp = self.session.post(url, data=data, timeout=self.timeout)</span><br><span class="line">        result = resp.json()</span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">'code'</span>] != <span class="number">200</span>:</span><br><span class="line">            print(<span class="string">'post_request error, params={:s}'</span>.format(json.dumps(params)))</span><br><span class="line">            logger.error(</span><br><span class="line">                <span class="string">'post_request error, params={:s}'</span>.format(json.dumps(params)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_song_url</span><span class="params">(self, song_id, bit_rate=<span class="number">320000</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获得歌曲的下载地址</span></span><br><span class="line"><span class="string">        :params song_id: 音乐ID&lt;int&gt;.</span></span><br><span class="line"><span class="string">        :params bit_rate: {'MD 128k': 128000, 'HD 320k': 320000}</span></span><br><span class="line"><span class="string">        :return: 歌曲下载地址</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        url = <span class="string">'http://music.163.com/weapi/song/enhance/player/url?csrf_token='</span></span><br><span class="line">        csrf = <span class="string">''</span></span><br><span class="line">        params = {<span class="string">'ids'</span>: [song_id], <span class="string">'br'</span>: bit_rate, <span class="string">'csrf_token'</span>: csrf}</span><br><span class="line">        result = self.post_request(url, params)</span><br><span class="line">        <span class="comment"># 歌曲下载地址</span></span><br><span class="line">        song_url = result[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'url'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 歌曲不存在</span></span><br><span class="line">        <span class="keyword">if</span> song_url <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            print(<span class="string">'Song {} is not available due to copyright issue.'</span>.format(song_id))</span><br><span class="line">            logger.warning(</span><br><span class="line">                <span class="string">'Song {} is not available due to copyright issue.'</span>.format(song_id))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> song_url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_song_by_url</span><span class="params">(self, song_url, song_name, folder)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        下载歌曲到本地</span></span><br><span class="line"><span class="string">        :params song_url: 歌曲下载地址</span></span><br><span class="line"><span class="string">        :params song_name: 歌曲名字</span></span><br><span class="line"><span class="string">        :params folder: 保存路径</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(folder):</span><br><span class="line">            os.makedirs(folder)</span><br><span class="line">        fpath = os.path.join(folder, song_name + <span class="string">'.mp3'</span>)</span><br><span class="line">        <span class="keyword">if</span> sys.platform == <span class="string">'win32'</span> <span class="keyword">or</span> sys.platform == <span class="string">'cygwin'</span>:</span><br><span class="line">            valid_name = re.sub(<span class="string">r'[&lt;&gt;:"/\\|?*]'</span>, <span class="string">''</span>, song_name)</span><br><span class="line">            <span class="keyword">if</span> valid_name != song_name:</span><br><span class="line">                print(<span class="string">'{} will be saved as: {}.mp3'</span>.format(song_name, valid_name))</span><br><span class="line">                logger.warning(<span class="string">'{} will be saved as: {}.mp3'</span>.format(</span><br><span class="line">                    song_name, valid_name))</span><br><span class="line">                fpath = os.path.join(folder, valid_name + <span class="string">'.mp3'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(fpath):</span><br><span class="line">            resp = self.download_session.get(</span><br><span class="line">                song_url, timeout=self.timeout, stream=<span class="literal">True</span>)</span><br><span class="line">            length = int(resp.headers.get(<span class="string">'content-length'</span>))</span><br><span class="line">            label = <span class="string">'Downloading {} {}kb'</span>.format(song_name, int(length/<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> click.progressbar(length=length, label=label) <span class="keyword">as</span> progressbar:</span><br><span class="line">                <span class="keyword">with</span> open(fpath, <span class="string">'wb'</span>) <span class="keyword">as</span> song_file:</span><br><span class="line">                    <span class="keyword">for</span> chunk <span class="keyword">in</span> resp.iter_content(chunk_size=<span class="number">1024</span>):</span><br><span class="line">                        <span class="keyword">if</span> chunk:</span><br><span class="line">                            song_file.write(chunk)</span><br><span class="line">                            progressbar.update(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建爬虫</span></span><br><span class="line">    c = Crawler()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 获取一首歌</span></span><br><span class="line">    <span class="comment"># url = c.get_song_url('1364973839')</span></span><br><span class="line">    <span class="comment"># c.get_song_by_url(url, 'DEJA VU (EXTENDED MIX)', '.')</span></span><br><span class="line">    <span class="comment"># exit()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启文件日志</span></span><br><span class="line">    init_file_logger()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取用户的所有歌单</span></span><br><span class="line">    user_id = <span class="string">'350546638'</span></span><br><span class="line">    url = <span class="string">'https://music.163.com/weapi/user/playlist'</span></span><br><span class="line">    r = c.post_request(url, {</span><br><span class="line">        <span class="string">"uid"</span>: user_id,</span><br><span class="line">        <span class="string">"limit"</span>: <span class="string">"1001"</span>,</span><br><span class="line">        <span class="string">"offset"</span>: <span class="string">"0"</span></span><br><span class="line">    })</span><br><span class="line">    play_list = r[<span class="string">'playlist'</span>]</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> play_list:</span><br><span class="line">        <span class="keyword">if</span> str(p[<span class="string">'userId'</span>]) != user_id:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        music_list_id = str(p[<span class="string">'id'</span>])</span><br><span class="line">        music_list_name = p[<span class="string">'name'</span>]</span><br><span class="line">        url = <span class="string">'https://music.163.com/weapi/v6/playlist/detail'</span></span><br><span class="line">        params = {</span><br><span class="line">            <span class="string">"id"</span>: music_list_id,</span><br><span class="line">            <span class="string">'limit'</span>: <span class="string">"1000"</span>,</span><br><span class="line">            <span class="string">'n'</span>: <span class="string">"1000"</span>,</span><br><span class="line">            <span class="string">'offset'</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="string">'total'</span>: <span class="string">"true"</span></span><br><span class="line">        }</span><br><span class="line">        r = c.post_request(url, params)</span><br><span class="line">        <span class="comment"># with open('music_list_{:s}.json'.format(music_list_id), 'w', encoding='utf-8') as f:</span></span><br><span class="line">        <span class="comment">#     o = json.dumps(r, ensure_ascii=False)</span></span><br><span class="line">        <span class="comment">#     f.write(o)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># with open('music_list_{:s}.json'.format(music_list_id), 'r', encoding='utf-8') as f:</span></span><br><span class="line">        <span class="comment">#     r = json.load(f)</span></span><br><span class="line"></span><br><span class="line">        music_list = r[<span class="string">'playlist'</span>][<span class="string">'tracks'</span>]</span><br><span class="line">        <span class="keyword">for</span> music <span class="keyword">in</span> music_list:</span><br><span class="line">            mu_name = music[<span class="string">'name'</span>]</span><br><span class="line">            mu_id = music[<span class="string">'id'</span>]</span><br><span class="line">            print(<span class="string">'download {:s}'</span>.format(mu_name))</span><br><span class="line">            logger.info(<span class="string">'download {:s}'</span>.format(mu_name))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                url = c.get_song_url(mu_id)</span><br><span class="line">                <span class="comment"># 去掉非法字符</span></span><br><span class="line">                mu_name = mu_name.replace(<span class="string">'/'</span>, <span class="string">''</span>)</span><br><span class="line">                mu_name = mu_name.replace(<span class="string">'.'</span>, <span class="string">''</span>)</span><br><span class="line">                c.get_song_by_url(</span><br><span class="line">                    url, mu_name, <span class="string">'./{:s}-{:s}'</span>.format(music_list_name, music_list_id))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">'download_song_by_id error {:s}'</span>.format(mu_name))</span><br><span class="line">                logger.error(<span class="string">'download_song_by_id error {:s}'</span>.format(mu_name))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>日常记录2021.03.12</title>
    <url>/2021/03/12/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%952021-03-12/</url>
    <content><![CDATA[<p>总算是早起一次了，在植树节的今天，值得纪念</p>
<p>直接原因是今天有一节早八英语课，以及这学期连翘四次课心理上也过不去了哈哈哈，虽然上课很形式主义，但是偶尔去听听也还不错</p>
<p>昨天看了一篇peer review的论文，这是我第一次当审稿人，令人诧异的是，这篇文章看下来毫无重点，做了一个建筑建模的实验，引用60多篇全放在introduction中了，所说的难点一个也没有克服，用到的校验方法看起来并不那么可靠，不得不佩服他们的勇气，写得比我本科毕设还烂的文章也敢投Remote Sensing。</p>
<p>最近还是忙，除了科研的事情，还打算自己写一些小软件小系统，比如PDF阅读器，电商小程序，帮家里人写一些信息管理系统等等，也有好多新技术要学，任重而道远。</p>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>Daily</tag>
      </tags>
  </entry>
  <entry>
    <title>PyInstaller使用手记</title>
    <url>/2021/03/21/PyInstaller%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>使用<a href="https://www.pyinstaller.org/" target="_blank" rel="noopener">PyInstaller</a>在Windows系统下打包了一个带有mxnet-gpu的项目，遇到了一些依赖库和静态文件的问题，记录一下使用过程和遇到的问题及解决方法</p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>参考<a href="https://pyinstaller.readthedocs.io/en/stable/installation.html" target="_blank" rel="noopener">官方教程</a>，直接通过pip命令安装，我使用的是3.6版本的python，直接安装成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure>
<h1 id="将-py脚本打包为exe"><a href="#将-py脚本打包为exe" class="headerlink" title="将.py脚本打包为exe"></a>将.py脚本打包为exe</h1><p>输入命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyinstaller main.py</span><br></pre></td></tr></table></figure>
<p>就可以将<code>main.py</code>文件打包成一个.exe文件，位于命令执行目录的<code>./dist</code>文件夹下，同时会在当前目录中生成一个<code>./build</code>文件夹，存放构建时产生的临时文件，并且创建一个<code>./main.spec</code>文件，记录了本次打包的一些配置参数</p>
<p>如果希望进行更多样的配置，可以通过参数来控制<code>pyinstaller</code>的行为。例如通过<code>--distpath</code>设置输出路径，<code>--onefile</code>设置生成单文件等</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyinstaller main.py --distpath "./output"  # 设置生成目录</span><br><span class="line">pyinstaller main.py --onefile  # 仅生成一个exe文件</span><br></pre></td></tr></table></figure>
<p>一些常用的命令参数及帮助说明如下表所示（<a href="https://pyinstaller.readthedocs.io/en/stable/usage.html" target="_blank" rel="noopener">官网</a>）：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>参数</th>
<th>帮助说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-h, —help</td>
<td>show this help message and exit</td>
</tr>
<tr>
<td>-v, —version</td>
<td>Show program version info and exit.</td>
</tr>
<tr>
<td>—distpath DIR</td>
<td><strong>Where to put the bundled app (default: ./dist)</strong></td>
</tr>
<tr>
<td>—workpath WORKPATH</td>
<td><strong>Where to put all the temporary work files, .log, .pyz and etc. (default: ./build)</strong></td>
</tr>
<tr>
<td>-y, —noconfirm</td>
<td>Replace output directory (default: SPECPATH/dist/SPECNAME) without asking for confirmation</td>
</tr>
<tr>
<td>—upx-dir UPX_DIR</td>
<td>Path to UPX utility (default: search the execution path)</td>
</tr>
<tr>
<td>-a, —ascii</td>
<td>Do not include unicode encoding support (default: included if available)</td>
</tr>
<tr>
<td>—clean</td>
<td>Clean PyInstaller cache and remove temporary files before building.</td>
</tr>
<tr>
<td>—log-level LEVEL</td>
<td>Amount of detail in build-time console messages. LEVEL may be one of TRACE, DEBUG, INFO, WARN, ERROR, CRITICAL (default: INFO).</td>
</tr>
<tr>
<td>-D, —onedir</td>
<td><strong>Create a one-folder bundle containing an executable (default)</strong></td>
</tr>
<tr>
<td>-F, —onefile</td>
<td>Create a one-file bundled executable.</td>
</tr>
<tr>
<td>—specpath DIR</td>
<td><strong>Folder to store the generated spec file (default: current directory)</strong></td>
</tr>
<tr>
<td>-n NAME, —name NAME</td>
<td>Name to assign to the bundled app and spec file (default: first script’s basename)</td>
</tr>
<tr>
<td>—add-data <SRC;DEST or SRC:DEST></td>
<td><strong>Additional non-binary files or folders to be added to the executable. The path separator is platform specific, <code>os.pathsep</code> (which is <code>;</code> on Windows and <code>:</code> on most unix systems) is used. This option can be used multiple times.</strong></td>
</tr>
<tr>
<td>—add-binary <SRC;DEST or SRC:DEST></td>
<td><strong>Additional binary files to be added to the executable. See the <code>--add-data</code> option for more details. This option can be used multiple times.</strong></td>
</tr>
</tbody>
</table>
</div>
<h1 id="利用-spec文件导入静态资源-amp-动态链接库"><a href="#利用-spec文件导入静态资源-amp-动态链接库" class="headerlink" title="利用.spec文件导入静态资源&amp;动态链接库"></a>利用.spec文件导入静态资源&amp;动态链接库</h1><p>除了直接对.py文件打包之外，还可以直接根据.spec文件进行打包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyinstaller main.spec</span><br></pre></td></tr></table></figure>
<p>该文件在运行<code>pyinstaller main.py</code>命令时自动创建</p>
<p>存在一种情况，<code>pyinstaller</code>并不总能找到你在.py文件中<code>import</code>的包，例如，<code>mxnet</code>有CPU版本和GPU版本，GPU版本又是和CUDA对应的，如<code>mxnet-cu101</code>，在打包时其相关的dll文件并不能被找到并包含到生成的输出路径中，因此执行<code>main.exe</code>时会报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RuntimeError: Cannot find the MXNet library.</span><br><span class="line">List of candidates:</span><br><span class="line">...省略...\mxnet\libmxnet.dll</span><br><span class="line">...省略...\mxnet\..&#x2F;..&#x2F;lib&#x2F;libmxnet.dll</span><br><span class="line">...省略...\mxnet\..&#x2F;..&#x2F;build&#x2F;libmxnet.dll</span><br><span class="line">...省略...\mxnet\..&#x2F;..&#x2F;build\libmxnet.dll</span><br><span class="line">...省略...\mxnet\..&#x2F;..&#x2F;build\Release\libmxnet.dll</span><br><span class="line">...省略...\mxnet\..&#x2F;..&#x2F;windows&#x2F;x64\Release\libmxnet.dll</span><br></pre></td></tr></table></figure>
<p>此时需要手动把对应的dll文件加入到输出路径的指定文件夹下，找到所需的dll文件路径为<code>D:\Anaconda\anaconda3\envs\mxnet-gpu\Lib\site-packages\mxnet\libmxnet.dll</code>（也可以是相对路径），将其单斜杠改为双斜杠，通过<code>--add-binary</code>参数加入到输出路径下的<code>mxnet</code>文件夹中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyinstaller main.py --add-binary "D:\\Anaconda\\anaconda3\\envs\\mxnet-gpu\\Lib\\site-packages\\mxnet\\libmxnet.dll;.\\mxnet"</span><br></pre></td></tr></table></figure>
<p><code>--add-binary</code>参数可以出现多次，用于应对多个dll文件的情况，就像这样：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyinstaller main.py --add-binary "D:\\Anaconda\\anaconda3\\envs\\mxnet-gpu\\Lib\\site-packages\\mxnet\\libmxnet.dll;.\\mxnet" --add-binary "SRC;DEST" --add-binary "SRC;DEST"</span><br></pre></td></tr></table></figure>
<p>这里面<code>libmxnet.dll</code>如果写成<code>*.dll</code>，就表示文件夹下的所有<code>.dll</code>文件；分号隔开的下一项表示拷贝的目标位置，相对于输出的.exe文件所在路径而定。同理，参数<code>--add-data</code>用于引入静态文件，可以引入一个文件夹、一个文件、一个目录下的文件。</p>
<p>如果不需要引入路径下的所有dll文件，只需要其中几个，导致最终的命令参数过长且不容易保存，那么使用.spec文件进行打包会是一个好的选择。运行一次命令<code>pyinstaller main.py</code>会生成一个<code>main.spec</code>文件，在这个文件中找到<code>Analysis</code>，修改<code>binaries</code>和<code>datas</code>数组，可以手动引入dll和静态文件。数组的每一项是一个元组，作为<code>pyinstaller</code>调用函数获取文件的参数，元组的第一个参数为源目录，第二个为目标目录，相对或绝对路径均可。一个完整的.spec配置文件示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- mode: python ; coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">block_cipher = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Analysis([<span class="string">'hello_pyinstaller.py'</span>],</span><br><span class="line">             pathex=[<span class="string">'D:\\codes\\Python\\hello_pyinstaller'</span>],</span><br><span class="line">             binaries=[</span><br><span class="line">                 (<span class="string">'D:\\Anaconda\\anaconda3\\envs\\mxnet-gpu\\Lib\\site-packages\\mxnet\\*.dll'</span>, <span class="string">'.\\mxnet'</span>),</span><br><span class="line">                 (<span class="string">'D:\\NVIDIA\\NVIDA GPU Computing Toolkit\\CUDA\\v10.1\\bin\\cublas64_10.dll'</span>, <span class="string">'.\\mxnet'</span>),</span><br><span class="line">                 (<span class="string">'D:\\NVIDIA\\NVIDA GPU Computing Toolkit\\CUDA\\v10.1\\bin\\cublasLt64_10.dll'</span>, <span class="string">'.\\mxnet'</span>),</span><br><span class="line">                 (<span class="string">'D:\\NVIDIA\\NVIDA GPU Computing Toolkit\\CUDA\\v10.1\\bin\\cufft64_10.dll'</span>, <span class="string">'.\\mxnet'</span>),</span><br><span class="line">                 (<span class="string">'D:\\NVIDIA\\NVIDA GPU Computing Toolkit\\CUDA\\v10.1\\bin\\curand64_10.dll'</span>, <span class="string">'.\\mxnet'</span>),</span><br><span class="line">                 (<span class="string">'D:\\NVIDIA\\NVIDA GPU Computing Toolkit\\CUDA\\v10.1\\bin\\cusolver64_10.dll'</span>, <span class="string">'.\\mxnet'</span>),</span><br><span class="line">                 (<span class="string">'D:\\NVIDIA\\NVIDA GPU Computing Toolkit\\CUDA\\v10.1\\bin\\nvrtc64_101_0.dll'</span>, <span class="string">'.\\mxnet'</span>),</span><br><span class="line">             ],</span><br><span class="line">             datas=[</span><br><span class="line">                 (<span class="string">'.\\models'</span>, <span class="string">'.\\models'</span>),</span><br><span class="line">                 (<span class="string">'.\\model_list.json'</span>, <span class="string">'.'</span>)</span><br><span class="line">             ],</span><br><span class="line">             hiddenimports=[],</span><br><span class="line">             hookspath=[],</span><br><span class="line">             runtime_hooks=[],</span><br><span class="line">             excludes=[],</span><br><span class="line">             win_no_prefer_redirects=<span class="literal">False</span>,</span><br><span class="line">             win_private_assemblies=<span class="literal">False</span>,</span><br><span class="line">             cipher=block_cipher,</span><br><span class="line">             noarchive=<span class="literal">False</span>)</span><br><span class="line">pyz = PYZ(a.pure, a.zipped_data,</span><br><span class="line">             cipher=block_cipher)</span><br><span class="line">exe = EXE(pyz,</span><br><span class="line">          a.scripts,</span><br><span class="line">          [],</span><br><span class="line">          exclude_binaries=<span class="literal">True</span>,</span><br><span class="line">          name=<span class="string">'object_detection'</span>,</span><br><span class="line">          debug=<span class="literal">False</span>,</span><br><span class="line">          bootloader_ignore_signals=<span class="literal">False</span>,</span><br><span class="line">          strip=<span class="literal">False</span>,</span><br><span class="line">          upx=<span class="literal">True</span>,</span><br><span class="line">          console=<span class="literal">True</span> )</span><br><span class="line">coll = COLLECT(exe,</span><br><span class="line">               a.binaries,</span><br><span class="line">               a.zipfiles,</span><br><span class="line">               a.datas,</span><br><span class="line">               strip=<span class="literal">False</span>,</span><br><span class="line">               upx=<span class="literal">True</span>,</span><br><span class="line">               upx_exclude=[],</span><br><span class="line">               name=<span class="string">'object_detection'</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更多.spec文件的用法请前往官网：<a href="https://pyinstaller.readthedocs.io/en/stable/spec-files.html" target="_blank" rel="noopener">Using Spec Files — PyInstaller 4.2 documentation</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>从0开始：在VS中使用QT开发图像浏览软件</title>
    <url>/2021/04/08/%E4%BB%8E0%E5%BC%80%E5%A7%8B-%E5%9C%A8VS%E4%B8%AD%E4%BD%BF%E7%94%A8QT%E5%BC%80%E5%8F%91%E5%9B%BE%E5%83%8F%E6%B5%8F%E8%A7%88%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<p><img src="/images/KvImage-v1.0.gif" alt="KvImage-v1.0"></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在这之前我们预装好了VS2019，这部分主要介绍qt的安装、VS插件的安装和编写Hello World程序。</p>
<p>下载地址推荐以下几个：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>来源</th>
<th>地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>官方</td>
<td><a href="https://download.qt.io/archive/" target="_blank" rel="noopener">https://download.qt.io/archive/</a></td>
</tr>
<tr>
<td>清华</td>
<td><a href="https://mirrors.tuna.tsinghua.edu.cn/qt/archive/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/qt/archive/</a></td>
</tr>
<tr>
<td>北理</td>
<td><a href="https://mirrors.bit.edu.cn/qtproject/archive/" target="_blank" rel="noopener">https://mirrors.bit.edu.cn/qtproject/archive/</a></td>
</tr>
<tr>
<td>Geekpie（上海科技大学）</td>
<td><a href="https://mirrors-wan.geekpie.club/qtproject/archive/" target="_blank" rel="noopener">https://mirrors-wan.geekpie.club/qtproject/archive/</a></td>
</tr>
<tr>
<td>中科大</td>
<td><a href="http://mirrors.ustc.edu.cn/qtproject/archive/" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/qtproject/archive/</a></td>
</tr>
</tbody>
</table>
</div>
<h2 id="Qt的安装"><a href="#Qt的安装" class="headerlink" title="Qt的安装"></a>Qt的安装</h2><p>之前下了个<a href="https://mirrors.tuna.tsinghua.edu.cn/qt/archive/qt/5.9/5.9.0/qt-opensource-windows-x86-5.9.0.exe" target="_blank" rel="noopener">qt-opensource-windows-x86-5.9.0.exe</a>，只装了MinGW5.3.0_32版本，在VS2019中无法添加使用，再加上想要试试最新的版本Qt5.12，因此决定把原先Qt和Qt Creator的删掉，重新装一个支持MSVC和MinGW版本的。</p>
<p>在<a href="https://mirrors.tuna.tsinghua.edu.cn/qt/archive/qt/5.12/5.12.9/" target="_blank" rel="noopener">清华镜像/qt/archive/qt/5.12/5.12.9</a>下载<a href="https://mirrors.tuna.tsinghua.edu.cn/qt/archive/qt/5.12/5.12.9/qt-opensource-windows-x86-5.12.9.exe" target="_blank" rel="noopener">qt-opensource-windows-x86-5.12.9.exe</a>，下载后运行程序，一直点击下一步即可完成安装。需要注意的几点：1. 需要有个Qt的账号并验证登录才能继续安装；2. 安装目录可以自定义，可修改至非系统盘；3. 在组件选择中，需要注意区分，在上方的<code>Qt 5.12.9</code>中有一个MinGW 7.3.0，下方的<code>Developer and Designer Tools</code>中也有一个，它们的区别在于，上方的是Qt通过MinGW 7.3.0编译的发行版（dll, lib, include），而下方的是在Qt Creator中要使用的<strong>应用程序编译和构建工具</strong>。</p>
<p><img src="/images/image-20210404175740602.png" alt="image-20210404175740602" style="zoom:45%;" /></p>
<p>安装完成后，记住安装目录，进入下一步：在VS2019中引入Qt。</p>
<hr>
<p>（下面是一些版本声明和个人看法）</p>
<p>由于Qt公司的某些原因，5.15及之后版本的Qt不再支持离线安装包（官方声明如下）</p>
<blockquote>
<p>Due to The Qt Company offering changes, open source offline installers are not available any more since Qt 5.15. Read more about offering changes in the <a href="https://www.qt.io/blog/qt-offering-changes-2020" target="_blank" rel="noopener">https://www.qt.io/blog/qt-offering-changes-2020</a> blog.</p>
<p>If you need offline installers, please consider our new Qt for Small Business offering: <a href="https://www.qt.io/blog/available-now-qt-for-small-businesses" target="_blank" rel="noopener">https://www.qt.io/blog/available-now-qt-for-small-businesses</a></p>
<hr>
<p>from <a href="https://mirrors.tuna.tsinghua.edu.cn/qt/archive/qt/5.15/5.15.0/OFFLINE_README.txt" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/qt/archive/qt/5.15/5.15.0/OFFLINE_README.txt</a></p>
</blockquote>
<p>这里推荐下载离线安装包，可以避免在线安装的代理问题，可以通过国内镜像下载，速度快，稳定性好。</p>
<p>Qt版本的选择有点讲究，之前安装的5.9是一个长期支持版本（LTS），下一个是5.12，接着是5.15。5.9版本于2020年5月停止维护，其中5.9.9算是一个比较稳定的版本，可以使用；5.12是最后一个支持离线安装包的LTS版本的Qt，但是其三年的维护时限将于2021年12月结束，如果需要更新，就不得不使用在线安装的功能；5.15只能通过在线安装的方式获取，但其支持周期或许会更长，也被视为Qt6的过渡版本。不过总的来说，<strong>如果只是为了入门学习Qt的基本特性，或者在实际应用中对软件的需求不发生根本性改变，那么固定使用一个版本会是一个好的选择，5.9.9和5.12.9都是不错的版本。</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Qt版本</th>
<th>持续支持时间</th>
<th>依据</th>
</tr>
</thead>
<tbody>
<tr>
<td>5.9</td>
<td>2017年5月-2020年5月</td>
<td><a href="https://www.qt.io/blog/support-of-qt-5.9-lts-ends-in-may-2020" target="_blank" rel="noopener">https://www.qt.io/blog/support-of-qt-5.9-lts-ends-in-may-2020</a></td>
</tr>
<tr>
<td>5.12</td>
<td>2018年12月-2021年12月</td>
<td><a href="https://www.qt.io/zh-cn/blog/2018/12/17/qt-5-12-lts-released" target="_blank" rel="noopener">https://www.qt.io/zh-cn/blog/2018/12/17/qt-5-12-lts-released</a></td>
</tr>
<tr>
<td>5.15</td>
<td>2020年6月-2023年6月</td>
<td><a href="https://www.qt.io/zh-cn/blog/qt-5.15-released" target="_blank" rel="noopener">https://www.qt.io/zh-cn/blog/qt-5.15-released</a></td>
</tr>
</tbody>
</table>
</div>
<h2 id="VS插件的安装"><a href="#VS插件的安装" class="headerlink" title="VS插件的安装"></a>VS插件的安装</h2><p>VS插件（Qt VS Tools）可以在<a href="https://mirrors.tuna.tsinghua.edu.cn/qt/archive/vsaddin/" target="_blank" rel="noopener">清华镜像/qt/archive/vsaddin</a>下载获得，这边<strong>不推荐安装最新版本</strong>的，经过几次的尝试，发现最新版本的Qt VS Tools插件（2.7.x）安装成功后，添加<code>qmake.exe</code>后点击确定，再次进如配置窗口时之前的添加结果就消失了，下面是一个踩坑列表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Qt VS Tools版本</th>
<th>下载路径</th>
<th>能否成功添加qmake</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://mirrors.tuna.tsinghua.edu.cn/qt/archive/vsaddin/2.7.1/qt-vsaddin-msvc2019-2.7.1.vsix" target="_blank" rel="noopener">qt-vsaddin-msvc2019-2.7.1.vsix</a></td>
<td><a href="https://mirrors.tuna.tsinghua.edu.cn/qt/archive/vsaddin/2.7.1/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/qt/archive/vsaddin/2.7.1/</a></td>
<td>❌</td>
</tr>
<tr>
<td><a href="https://mirrors.tuna.tsinghua.edu.cn/qt/development_releases/vsaddin/2.7.0/qt-vsaddin-msvc2019-2.7.0.vsix" target="_blank" rel="noopener">qt-vsaddin-msvc2019-2.7.0.vsix</a></td>
<td><a href="https://mirrors.tuna.tsinghua.edu.cn/qt/development_releases/vsaddin/2.7.0/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/qt/development_releases/vsaddin/2.7.0/</a></td>
<td>❌</td>
</tr>
<tr>
<td><a href="https://mirrors.tuna.tsinghua.edu.cn/qt/development_releases/vsaddin/2.7.0/qt-vsaddin-msvc2019-2.7.0-rev.28.vsix" target="_blank" rel="noopener">qt-vsaddin-msvc2019-2.7.0-rev.28.vsix</a></td>
<td><a href="https://mirrors.tuna.tsinghua.edu.cn/qt/development_releases/vsaddin/2.7.0/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/qt/development_releases/vsaddin/2.7.0/</a></td>
<td>❌</td>
</tr>
<tr>
<td><a href="https://mirrors.tuna.tsinghua.edu.cn/qt/archive/vsaddin/2.4.3/qt-vsaddin-msvc2019-2.4.3.vsix" target="_blank" rel="noopener">qt-vsaddin-msvc2019-2.4.3.vsix</a></td>
<td><a href="https://mirrors.tuna.tsinghua.edu.cn/qt/archive/vsaddin/2.4.3/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/qt/archive/vsaddin/2.4.3/</a></td>
<td>⭕</td>
</tr>
</tbody>
</table>
</div>
<p>最后还是装了一个较老的版本<a href="https://mirrors.tuna.tsinghua.edu.cn/qt/archive/vsaddin/2.4.3/qt-vsaddin-msvc2019-2.4.3.vsix" target="_blank" rel="noopener">qt-vsaddin-msvc2019-2.4.3.vsix</a>。插件下载后双击运行，若电脑上已安装VS2019，则直接按照提示安装即可。安装完成后，打开VS2019，若出现如下错误，有两种解决方式：1. 使用老版本，例如将2.7.1改成2.4.3；2. 打开Visual Studio Installer，<strong>对VS2019进行更新</strong>，更新后重新运行<code>.vsix</code>文件，即可安装成功。</p>
<p><img src="/images/image-20210327164249008.png" alt="image-20210327164249008" style="zoom:50%;" /></p>
<p>安装成功后，打开VS2019，在上方找到“扩展”，可以看到多了一个“Qt VS Tools”</p>
<p><img src="/images/image-20210327222045440.png" alt="image-20210327222045440" style="zoom:50%;" /></p>
<p>在下方的Qt Options添加Qt（其他版本的插件界面有所差异）：</p>
<p><img src="/images/image-20210327222129162.png" alt="image-20210327222129162" style="zoom:50%;" /></p>
<p>注意，在VS中添加的Qt只能是MSVC编译器的。</p>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>添加VS的Qt插件之后，创建新项目时多了一些诸如Qt Console Application的项目类型，这里创建一个Qt GUI Application，一路点击下一步，自动创建工程。</p>
<p><img src="/images/image-20210404201139344.png" alt="image-20210404201139344" style="zoom: 50%;" /></p>
<p>这里给工程命名<code>KvImage</code>，这个名称用于文章后面区分文件名使用。创建工程后，找到“解决方案资源管理器”，双击打开xxx.ui文件，VS会自动打开Qt Designer用于软件布局设置。</p>
<p><img src="/images/image-20210404211148671.png" alt="image-20210404211148671" style="zoom: 33%;" /></p>
<p>在Qt Designer的左侧拖动一个Label到主界面中，在属性中将其objectName命名为<code>main_label</code>，保存。此时回到VS，按下F5调试，可以看到生成一个应用程序窗口，中间有一个写着TextLabel的控件。</p>
<p><img src="/images/image-20210404211941464.png" alt="image-20210404211941464" style="zoom:50%;" /></p>
<p>接下来我们通过代码来设置这个控件的一些属性。打开<code>KvImage.h</code>，如果语句<code>#include &quot;ui_KvImage.h&quot;</code>报错提示无法打开文件，只需要将生成模式分别调成Debug和Release后执行一下调试即可，这个文件属于构建过程中自动生成的文件，不需要担心其存在性问题。打开<code>KvImage.cpp</code>，在构造函数的<code>ui.setupUi(this);</code>语句下方添加获取控件并修改其内容的语句，如下所示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ui.centralWidget-&gt;findChild&lt;QLabel*&gt;(<span class="string">"main_label"</span>)-&gt;setText(<span class="string">"Hello World"</span>);</span><br></pre></td></tr></table></figure>
<p>添加的Label位于名为centralWidget的控件中，使用findChild获得Label后设置文字，运行程序后得到如下效果：</p>
<p><img src="/images/image-20210404223952398.png" alt="image-20210404223952398" style="zoom: 50%;" /></p>
<h3 id="问题1-没有与指定类型匹配的重载函数"><a href="#问题1-没有与指定类型匹配的重载函数" class="headerlink" title="问题1 没有与指定类型匹配的重载函数"></a>问题1 没有与指定类型匹配的重载函数</h3><p>工程创建后如果遇到如下问题：没有与指定类型匹配的重载函数<em>*</em></p>
<p><img src="/images/image-20210404201222288.png" alt="image-20210404201222288" style="zoom:50%;" /></p>
<p>可以通过手动引入include目录来消除这个报错。添加的位置：项目-属性-C/C++-常规-附加包含目录</p>
<p><img src="/images/image-20210404201641592.png" alt="image-20210404201641592" style="zoom:50%;" /></p>
<h3 id="问题2-ERROR-running-qmake"><a href="#问题2-ERROR-running-qmake" class="headerlink" title="问题2 ERROR running qmake"></a>问题2 ERROR running qmake</h3><p>点击生成或调试运行时出现的问题，由于没有指定变量QMAKE_MSC_VER。</p>
<p><img src="/images/image-20210404201734798.png" alt="image-20210404201734798" style="zoom:50%;" /></p>
<p>这个问题有个比较拙劣的解决方式：打开<code>msvc-version.conf</code>，位于安装目录下，<code>D:\Qt\Qt5.12.9\5.12.9\msvc2017\mkspecs\common\msvc-version.conf</code>，打开后找到VS2019对应的版本号，然后在文件的第一行手动写上。这样的好处在于直接解决问题，坏处就在于把VS的版本写死了，在其他的IDE中使用该版本的Qt，需要重新修改。</p>
<p><img src="/images/image-20210404202311477.png" alt="image-20210404202311477" style="zoom:50%;" /></p>
<p>修改完成后，回到VS，点击调试或运行，即可成功生成应用。</p>
<h3 id="彻底解决问题1与问题2"><a href="#彻底解决问题1与问题2" class="headerlink" title="彻底解决问题1与问题2"></a>彻底解决问题1与问题2</h3><p>很显然，以上两个问题的解决方式都是为了解决燃眉之急，治标不治本。那么问题来了，安装好Qt和VS插件之后，为什么会出现这样的问题？</p>
<p>试验发现，通过设定变量<code>QMAKE_MSC_VER</code>之后，重新创建工程不会出现任何问题，问题1与问题2在修改了<code>msvc-version.conf</code>中的变量之后得到了解决。将注意力转移到这个变量上，为什么这个变量的设置会出现问题？</p>
<p>这个回答给了一个解决的思路：<a href="https://stackoverflow.com/questions/53665166/qmake-msc-ver-isnt-set" target="_blank" rel="noopener">https://stackoverflow.com/questions/53665166/qmake-msc-ver-isnt-set</a></p>
<blockquote>
<p>Try removing any .qmake.stash files in your projects. This fixed this  same issue for me when building QT from source after previously building with a different target.</p>
</blockquote>
<p>在工程中并没有找到任何.qmake.stash文件，全局搜索后，发现<strong>在用户文件夹下有一个.qmake.stash</strong>，会不会是它影响了VS的行为？</p>
<p>首先将<code>msvc-version.conf</code>中添加的第一行<code>QMAKE_MSC_VER=1919</code>去掉，接着将用户文件夹下的.qmake.stash删除。重新打开VS2019创建工程，发现从创建到生成到运行，没有出现任何问题！破案了，就是这个文件导致的VS2019行为异常。因此，<strong>只需要将用户文件夹下的<code>.qmake.stash</code>删除，就可以解决问题1与问题2，不需要更改任何配置文件。</strong></p>
<h1 id="添加基础功能示例：打开一幅图像"><a href="#添加基础功能示例：打开一幅图像" class="headerlink" title="添加基础功能示例：打开一幅图像"></a>添加基础功能示例：打开一幅图像</h1><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>在Qt Designer中，双击菜单栏，添加一个菜单，命名为“开始”，然后在下面添加一个选项，注意添加的时候只能用英文命名，例如“open_image”，添加后，再到属性列表中修改其text属性为中文“打开图像”。</p>
<p><img src="/images/image-20210405180352839.png" alt="image-20210405180352839" style="zoom:50%;" /></p>
<p>或者直接在动作窗口新建动作，接着再把动作拖到软件的菜单栏中。</p>
<p><img src="/images/image-20210405180434022.png" alt="image-20210405180434022" style="zoom:50%;" /></p>
<p>接下来添加该动作的点击（triggered）响应事件。在类KvImage的声明中，添加私有成员函数<code>on_action_open_image_triggered</code>，代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KvImage</span> :</span> <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">	Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	KvImage(QWidget *parent = Q_NULLPTR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">on_action_open_image_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Ui::KvImageClass ui;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>接着在<code>KvImage.cpp</code>中添加其实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::on_action_open_image_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里<code>action_open_image</code>对应动作的名称，triggered是动作的信号，<code>on_动作名_信号()</code>是默认的响应函数格式。创建的动作属于<a href="https://doc.qt.io/qt-5.12/qaction.html" target="_blank" rel="noopener">QAction类</a>，其自带的信号包括以下几种（<a href="https://doc.qt.io/qt-5.12/qaction.html#signals）：" target="_blank" rel="noopener">https://doc.qt.io/qt-5.12/qaction.html#signals）：</a></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>信号</th>
<th>类</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>changed()</code></td>
<td>QAction</td>
</tr>
<tr>
<td><code>hovered()</code></td>
<td>QAction</td>
</tr>
<tr>
<td><code>toggled()</code></td>
<td>QAction</td>
</tr>
<tr>
<td><code>triggered()</code></td>
<td>QAction</td>
</tr>
<tr>
<td><code>triggered(bool)</code></td>
<td>QAction</td>
</tr>
<tr>
<td><code>destroyed()</code></td>
<td>QObject</td>
</tr>
<tr>
<td><code>destroyed(QObject*)</code></td>
<td>QObject</td>
</tr>
</tbody>
</table>
</div>
<p>图像的显示就使用Label设置Pixmap即可。理论上来讲显示图片用Graphics View更好，但是其封装性太好，在之前的尝试中发现其可控性并不是很高。由于在本次开发中图片的显示只是最基础的一环，且在涉及到计算机图形学的编程（基于显示窗口的缩放、旋转等）时，Graphics View没有办法提供很好的交互，还是得将图片提出来计算显示窗口并操作显示窗口的内容，而这种功能基于Label就能实现，没必要用到封装性好的Graphics View。</p>
<p>由于涉及到大量对Label的操作，将其存放到类的变量中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// KvImage.h</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Ui::KvImageClass ui;</span><br><span class="line"></span><br><span class="line">	QLabel* mLabel;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// KvImage.cpp</span></span><br><span class="line">KvImage::KvImage(QWidget *parent)</span><br><span class="line">	: QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">	ui.setupUi(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">	<span class="function">QString <span class="title">mainLabelName</span><span class="params">(<span class="string">"main_label"</span>)</span></span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;mLabel = ui.centralWidget-&gt;findChild&lt;QLabel*&gt;(mainLabelName);</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;mLabel)</span><br><span class="line">	&#123;</span><br><span class="line">		qFatal(QString(<span class="string">"QLabel [%1] not found!"</span>).arg(mainLabelName).toLocal8Bit());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="打开图像文件对话框"><a href="#打开图像文件对话框" class="headerlink" title="打开图像文件对话框"></a>打开图像文件对话框</h2><p>在头文件<code>KvImage.h</code>中引入文件对话框的类：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFileDialog&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>打开对话框的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过对话框获取文件路径</span></span><br><span class="line">QString caption = QString::fromLocal8Bit(<span class="string">"选择一个文件打开"</span>);</span><br><span class="line">QString dir = <span class="string">""</span>;  <span class="comment">// 为空默认记忆上一次打开的路径</span></span><br><span class="line"><span class="function">QString <span class="title">filter</span><span class="params">(<span class="string">"Image (*.png *.jpg *.jped *.tif *.bmp"</span>)</span></span>;</span><br><span class="line">QString fileName = QFileDialog::getOpenFileName(</span><br><span class="line"><span class="keyword">this</span>, caption, dir, filter</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fileName.isEmpty())</span><br><span class="line">&#123;</span><br><span class="line">    qWarning() &lt;&lt; QString::fromLocal8Bit(<span class="string">"KvImage::on_action_open_image_triggered - 未选择图片路径"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">qInfo() &lt;&lt; QString::fromLocal8Bit(<span class="string">"打开图像 (%1)"</span>).arg(fileName);</span><br></pre></td></tr></table></figure>
<p>如果直接使用<code>QString caption(&quot;选择一个文件打开&quot;);</code>，文件对话框的标题会是乱码。</p>
<h2 id="使用OpenCV读取图像"><a href="#使用OpenCV读取图像" class="headerlink" title="使用OpenCV读取图像"></a>使用OpenCV读取图像</h2><p>OpenCV提供了许多现成的计算机视觉算法，是图像处理的基础类库之一，在图像处理软件中是必备的存在。</p>
<p>OpenCV需要经过编译，编译的过程可参考<a href="../_posts/2020-06-14-Windows下编译OpenCV-3-1-0-扩展opencv-contrib.md">另一篇博客</a>或Google搜索，编译的产物为三件套：dll，include和lib，分为debug和release版本。</p>
<p>首先在VS工程的目录下新建文件夹lib，在lib中新建debug和release，若工程目录下不存在Debug或Release，则分别创建一个，或者打开VS分别生成（Ctrl + Shift + B）一下debug版本和release版本的工程，会自动生成，此时工程的目录如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|-Debug</span><br><span class="line">|-include</span><br><span class="line">|-KvImage</span><br><span class="line">|-lib</span><br><span class="line">|-|-debug</span><br><span class="line">|-|-release</span><br><span class="line">|-Release</span><br><span class="line">|-KvImage.sln</span><br></pre></td></tr></table></figure>
<p>将include拷贝到工程目录下（debug和release没有区别），然后把所有debug版本的.lib文件拷贝到lib/debug下，release版本的拷贝到lib/release下。将debug版本的.dll文件拷贝到Debug下，release版本的拷贝到Release下：</p>
<p><img src="/images/image-20210405190551306.png" alt="image-20210405190551306" style="zoom:50%;" /></p>
<p>文件拷贝完成后，打开VS2019，项目-属性-C/C++-常规-附加包含目录，添加一项：<code>../include</code>，项目-属性-链接器-输入-附加依赖项，添加一项：<code>../lib/release/*.lib</code>，如果构建类型是debug，就添加<code>../lib/debug/*.lib</code>。</p>
<p>此时，在<code>KvImage.h</code>添加OpenCV的引入：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>接着，在打开图像文件对话框的代码之后添加：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::Mat img = cv::imread(fileName.toLocal8Bit().toStdString());</span><br><span class="line">cv::namedWindow(<span class="string">"img"</span>, <span class="number">0</span>);</span><br><span class="line">imshow(<span class="string">"img"</span>, img);</span><br><span class="line">cv::waitKey();</span><br></pre></td></tr></table></figure>
<p>此时，打开图像后，会通过OpenCV自带的图像窗口显示图像。</p>
<h2 id="OpenCV与QImage和QPixmap的相互转化"><a href="#OpenCV与QImage和QPixmap的相互转化" class="headerlink" title="OpenCV与QImage和QPixmap的相互转化"></a>OpenCV与QImage和QPixmap的相互转化</h2><blockquote>
<p><a href="https://blog.csdn.net/qq_17550379/article/details/78683153" target="_blank" rel="noopener">https://blog.csdn.net/qq_17550379/article/details/78683153</a></p>
</blockquote>
<p>为什么要用OpenCV？为了之后的图像处理操作以及图像显示操作方便，有很多现有的算法是用OpenCV编写，为了避免重构，必须探索在Qt软件中直接显示OpenCV处理结果的途径。</p>
<p>QImage和QPixmap的转换可以通过如下形式，而Mat与两者之间的转换需要额外的代码。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// QImage 转 QPixmap</span></span><br><span class="line">QImage qimg;</span><br><span class="line">QPixmap pxm = QPixmap::fromImage(qimg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// QPixmap 转 QImage</span></span><br><span class="line">QPixmap pxm;</span><br><span class="line">QImage qimg = pxm.toImage();</span><br></pre></td></tr></table></figure>
<p>在工程中创建类<code>Transform</code>专门用于处理转换（数据格式转换、类型转换、坐标转换等）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Transform.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transform</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Transform.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Transform.h"</span></span></span><br></pre></td></tr></table></figure>
<p>分别添加几个静态成员函数用于处理图像数据类型转换：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transform</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> QImage <span class="title">MatToQImage</span><span class="params">(cv::Mat &amp;img)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> QPixmap <span class="title">MatToQPixmap</span><span class="params">(cv::Mat&amp; img)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> cv::Mat <span class="title">QPixmapToMat</span><span class="params">(QPixmap&amp; pxm)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> cv::Mat <span class="title">QImageToMat</span><span class="params">(QImage&amp; qimg)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QImage <span class="title">Transform::MatToQImage</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (img.type())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 8-bit, 4 channel</span></span><br><span class="line">    <span class="keyword">case</span> CV_8UC4:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">QImage <span class="title">image</span><span class="params">(img.data,</span></span></span><br><span class="line"><span class="function"><span class="params">            img.cols, img.rows,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(img.<span class="built_in">step</span>),</span></span></span><br><span class="line"><span class="function"><span class="params">            QImage::Format_ARGB32)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">image</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8-bit, 3 channel</span></span><br><span class="line">    <span class="keyword">case</span> CV_8UC3:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">QImage <span class="title">image</span><span class="params">(img.data,</span></span></span><br><span class="line"><span class="function"><span class="params">            img.cols, img.rows,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(img.<span class="built_in">step</span>),</span></span></span><br><span class="line"><span class="function"><span class="params">            QImage::Format_RGB888)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">image</span>.rgbSwapped();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8-bit, 1 channel</span></span><br><span class="line">    <span class="keyword">case</span> CV_8UC1:</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_VERSION &gt;= QT_VERSION_CHECK(5, 5, 0)</span></span><br><span class="line">        <span class="function">QImage <span class="title">image</span><span class="params">(img.data,</span></span></span><br><span class="line"><span class="function"><span class="params">            img.cols, img.rows,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(img.<span class="built_in">step</span>),</span></span></span><br><span class="line"><span class="function"><span class="params">            QImage::Format_Grayscale8)</span></span>;  <span class="comment">//Format_Alpha8 and Format_Grayscale8 were added in Qt 5.5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        <span class="keyword">static</span> QVector&lt;QRgb&gt;  sColorTable;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// only create our color table the first time</span></span><br><span class="line">        <span class="keyword">if</span> (sColorTable.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            sColorTable.resize(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                sColorTable[i] = qRgb(i, i, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">QImage <span class="title">image</span><span class="params">(img.data,</span></span></span><br><span class="line"><span class="function"><span class="params">            img.cols, img.rows,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(img.<span class="built_in">step</span>),</span></span></span><br><span class="line"><span class="function"><span class="params">            QImage::Format_Indexed8)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">image</span>.setColorTable(sColorTable);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">image</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        qWarning() &lt;&lt; <span class="string">"Transform::MatToQImage() - cv::Mat image type not handled in switch: "</span> &lt;&lt; img.type();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> QImage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QPixmap <span class="title">Transform::MatToQPixmap</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QPixmap::fromImage(Transform::MatToQImage(img));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">cv::Mat <span class="title">Transform::QImageToMat</span><span class="params">(<span class="keyword">const</span> QImage&amp; qimg, <span class="keyword">bool</span> cloneImageData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (qimg.format())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 8-bit, 4 channel</span></span><br><span class="line">    <span class="keyword">case</span> QImage::Format_ARGB32:</span><br><span class="line">    <span class="keyword">case</span> QImage::Format_ARGB32_Premultiplied:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">cv::Mat <span class="title">mat</span><span class="params">(qimg.<span class="built_in">height</span>(), qimg.<span class="built_in">width</span>(),</span></span></span><br><span class="line"><span class="function"><span class="params">            CV_8UC4,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const_cast</span>&lt;uchar*&gt;(qimg.bits()),</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(qimg.bytesPerLine())</span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (cloneImageData ? mat.clone() : mat);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8-bit, 3 channel</span></span><br><span class="line">    <span class="keyword">case</span> QImage::Format_RGB32:</span><br><span class="line">    <span class="keyword">case</span> QImage::Format_RGB888:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!cloneImageData)</span><br><span class="line">        &#123;</span><br><span class="line">            qWarning() &lt;&lt; <span class="string">"Transform::QImageToMat() - Conversion requires cloning because we use a temporary QImage"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        QImage   swapped = qimg;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (qimg.format() == QImage::Format_RGB32)</span><br><span class="line">        &#123;</span><br><span class="line">            swapped = swapped.convertToFormat(QImage::Format_RGB888);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        swapped = swapped.rgbSwapped();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cv::Mat(swapped.<span class="built_in">height</span>(), swapped.<span class="built_in">width</span>(),</span><br><span class="line">            CV_8UC3,</span><br><span class="line">            <span class="keyword">const_cast</span>&lt;uchar*&gt;(swapped.bits()),</span><br><span class="line">            <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(swapped.bytesPerLine())</span><br><span class="line">        ).clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8-bit, 1 channel</span></span><br><span class="line">    <span class="keyword">case</span> QImage::Format_Indexed8:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">cv::Mat <span class="title">mat</span><span class="params">(qimg.<span class="built_in">height</span>(), qimg.<span class="built_in">width</span>(),</span></span></span><br><span class="line"><span class="function"><span class="params">            CV_8UC1,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const_cast</span>&lt;uchar*&gt;(qimg.bits()),</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(qimg.bytesPerLine())</span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (cloneImageData ? mat.clone() : mat);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        qWarning() &lt;&lt; <span class="string">"Transform::QImageToMat() - QImage format not handled in switch: "</span> &lt;&lt; qimg.format();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cv::Mat();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">cv::Mat <span class="title">Transform::QPixmapToMat</span><span class="params">(<span class="keyword">const</span> QPixmap&amp; pxm, <span class="keyword">bool</span> cloneImageData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Transform::QImageToMat(pxm.toImage(), cloneImageData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="在QLabel中显示图像QPixmap"><a href="#在QLabel中显示图像QPixmap" class="headerlink" title="在QLabel中显示图像QPixmap"></a>在QLabel中显示图像QPixmap</h2><h3 id="基本设置方法"><a href="#基本设置方法" class="headerlink" title="基本设置方法"></a>基本设置方法</h3><p>一句话</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::Mat img = cv::imread(fileName.toLocal8Bit().toStdString());</span><br><span class="line"><span class="keyword">this</span>-&gt;mLabel-&gt;setPixmap(Transform::MatToQPixmap(img));</span><br></pre></td></tr></table></figure>
<p>可以将图像设为全局变量和并打印属性信息：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;mImg = cv::imread(fileName.toLocal8Bit().toStdString());</span><br><span class="line">qInfo() &lt;&lt; QString::fromLocal8Bit(<span class="string">"图像尺寸：width=%1px, height=%2px"</span>)</span><br><span class="line">    .arg(<span class="keyword">this</span>-&gt;mImg.cols)</span><br><span class="line">    .arg(<span class="keyword">this</span>-&gt;mImg.rows);</span><br></pre></td></tr></table></figure>
<p>当然了，这里是用到了OpenCV读取图片并转换，考虑到后续需要大量使用OpenCV转QPixmap的操作，进行一次预演。如果只需要从一个文件读取图片数据放到QPixmap中，可以用如下方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QPixmap pxm;</span><br><span class="line">pxm.load(fileName);  <span class="comment">// 直接输入图片文件的文件名</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mLabel-&gt;setPixmap(pxm);</span><br></pre></td></tr></table></figure>
<p>通过上述语句设置，位图在QLabel中的大小保持原图不变，可能出现显示不全或边缘留白的问题，根本原因是以上操作没有改变位图大小，从而导致是以原图尺寸在QLabel中显示。为了解决这个问题，需要重载<code>Transform::MatToQPixmap()</code>函数，加入大小和位置控制的参数，有以下两种实现思路。</p>
<h3 id="指定显示区域尺寸的位图"><a href="#指定显示区域尺寸的位图" class="headerlink" title="指定显示区域尺寸的位图"></a>指定显示区域尺寸的位图</h3><p>为了保证图片在显示区域（QLabel）中合理显示，需要考虑两个尺度的问题：图像尺寸超出显示区，缩放以适合；图像尺寸小于显示区，放大以填充。这部分设计不仅能为<u>单图片显示应用</u>中提供<u>保证图片大小随窗口拖动而变化</u>的支持，还能提供一个按钮接口，当点击按钮时使图片适应窗口。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QImage <span class="title">Transform::MatToQImage</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; img, cv::Size imgSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cv::Mat src = img;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> xScale, yScale;</span><br><span class="line">    xScale = <span class="keyword">double</span>(imgSize.<span class="built_in">width</span>) / <span class="keyword">double</span>(src.cols);</span><br><span class="line">    yScale = <span class="keyword">double</span>(imgSize.<span class="built_in">height</span>) / <span class="keyword">double</span>(src.rows);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> scale = <span class="built_in">std</span>::<span class="built_in">min</span>(xScale, yScale);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> resizeHeight, resizeWidth;</span><br><span class="line">    resizeHeight = src.rows * scale;</span><br><span class="line">    resizeWidth = src.cols * scale;</span><br><span class="line">    cv::resize(src, src, cv::Size(resizeWidth, resizeHeight));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Transform::MatToQImage(src);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="★★★同时指定显示区域尺寸和图像矩形的位图"><a href="#★★★同时指定显示区域尺寸和图像矩形的位图" class="headerlink" title="★★★同时指定显示区域尺寸和图像矩形的位图"></a>★★★同时指定显示区域尺寸和图像矩形的位图</h3><p>当考虑到图像的移动和缩放时，图像相对于显示区的位置会发生改变，此时的显示场景较为复杂，图片随窗口大小变化的情形不适用。考虑在显示时加入图像相对于显示区的矩形，显示时取图像矩形和显示区矩形的交集，绘制位图。</p>
<p>基本流程是：将显示视图和图像矩形取出来，计算交集，若无交集，直接绘制黑色底图；若有交集，则计算需要出现在视图区内的图像像素。这里考虑到图像矩形和原图并不一定等大，因此需要在区域选取前进行一定的缩放：先获取图像显示部分的矩形，再将该矩形映射到原图上，取原图的像素再调整尺寸到显示部分矩形的大小。</p>
<p>最后将调整大小后的像素铺到显示区视图上，完成函数输出。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QImage <span class="title">Transform::MatToQImage</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; img, cv::Size viewSize, cv::Rect imgRect)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 视图区矩形</span></span><br><span class="line">    <span class="function">cv::Rect <span class="title">viewRect</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, viewSize.<span class="built_in">width</span>, viewSize.<span class="built_in">height</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 图像显示的矩形</span></span><br><span class="line">    cv::Rect imgViewRect = viewRect &amp; imgRect;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果图像矩形位于显示区内</span></span><br><span class="line">    <span class="keyword">if</span> (imgViewRect != cv::Rect())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 背景图</span></span><br><span class="line">        cv::Mat viewImg = cv::Mat::zeros(viewSize, img.type());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将图片上要显示的区域提取出来</span></span><br><span class="line">        <span class="comment">// 由于图像矩形和原图并不一定等大，因此需要进行区域选取处理</span></span><br><span class="line">        cv::Rect rawImgRect;</span><br><span class="line">        <span class="comment">// 获取相对于图像左上角的坐标</span></span><br><span class="line">        rawImgRect.x = (imgViewRect.x - imgRect.x) * img.cols / imgRect.<span class="built_in">width</span>;</span><br><span class="line">        rawImgRect.y = (imgViewRect.y - imgRect.y) * img.rows / imgRect.<span class="built_in">height</span>;</span><br><span class="line">        <span class="comment">// 获取实际宽高</span></span><br><span class="line">        rawImgRect.<span class="built_in">width</span> = imgViewRect.<span class="built_in">width</span> * img.cols / imgRect.<span class="built_in">width</span>;</span><br><span class="line">        rawImgRect.<span class="built_in">height</span> = imgViewRect.<span class="built_in">height</span> * img.rows / imgRect.<span class="built_in">height</span>;</span><br><span class="line"></span><br><span class="line">        cv::Mat src = img(rawImgRect).clone();</span><br><span class="line">        cv::resize(src, src, cv::Size(imgViewRect.<span class="built_in">width</span>, imgViewRect.<span class="built_in">height</span>));</span><br><span class="line">        src.copyTo(viewImg(imgViewRect));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Transform::MatToQImage(viewImg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果图像矩形不位于显示区内，直接显示黑图</span></span><br><span class="line">    <span class="function">QImage <span class="title">image</span><span class="params">(viewSize.<span class="built_in">width</span>, viewSize.<span class="built_in">height</span>, QImage::Format_RGB888)</span></span>;</span><br><span class="line">    <span class="built_in">image</span>.<span class="built_in">fill</span>(Qt::GlobalColor::black);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">image</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="showImage图像显示接口函数"><a href="#showImage图像显示接口函数" class="headerlink" title="showImage图像显示接口函数"></a>showImage图像显示接口函数</h3><p>为了方便在QLabel中显示Mat图片，这里设置了一些函数接口：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::showImage</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!img.data)</span><br><span class="line">	&#123;</span><br><span class="line">		qWarning() &lt;&lt; <span class="string">"KvImage::showImage() - Mat is Empty!"</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">time_t</span> t = cv::getTickCount();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 显示</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;mLabel-&gt;setPixmap(Transform::MatToQPixmap(img,</span><br><span class="line">		cv::Size(<span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">width</span>(), <span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">height</span>())));</span><br><span class="line"></span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"KvImage::showImage() - Cost time: "</span></span><br><span class="line">		&lt;&lt; (<span class="keyword">double</span>(cv::getTickCount() - t) / cv::getTickFrequency()) &lt;&lt; <span class="string">"s"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::showImage</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; img, cv::Rect imgRect)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!img.data)</span><br><span class="line">	&#123;</span><br><span class="line">		qWarning() &lt;&lt; <span class="string">"KvImage::showImage() - Mat is Empty!"</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">time_t</span> t = cv::getTickCount();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 显示</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;mLabel-&gt;setPixmap(Transform::MatToQPixmap(img,</span><br><span class="line">		cv::Size(<span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">width</span>(), <span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">height</span>()), imgRect));</span><br><span class="line"></span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"KvImage::showImage() - Cost time: "</span></span><br><span class="line">		&lt;&lt; (<span class="keyword">double</span>(cv::getTickCount() - t) / cv::getTickFrequency()) &lt;&lt; <span class="string">"s"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="打开图像的响应函数"><a href="#打开图像的响应函数" class="headerlink" title="打开图像的响应函数"></a>打开图像的响应函数</h2><p>通过以上几步的操作，打开图像的函数<code>on_action_open_image_triggered</code>完整代码如下所示。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::on_action_open_image_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 通过对话框获取文件路径</span></span><br><span class="line">	QString caption = QString::fromLocal8Bit(<span class="string">"选择一个文件打开"</span>);</span><br><span class="line">	QString dir = <span class="string">""</span>;  <span class="comment">// 为空默认记忆上一次打开的路径</span></span><br><span class="line">	<span class="function">QString <span class="title">filter</span><span class="params">(<span class="string">"Image (*.png *.jpg *.jpeg *.tif *.bmp)"</span>)</span></span>;</span><br><span class="line">	QString fileName = QFileDialog::getOpenFileName(</span><br><span class="line">		<span class="keyword">this</span>, caption, dir, filter</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (fileName.isEmpty())</span><br><span class="line">	&#123;</span><br><span class="line">		qWarning() &lt;&lt; QString::fromLocal8Bit(<span class="string">"KvImage::on_action_open_image_triggered - 未选择图片路径"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	qInfo() &lt;&lt; QString::fromLocal8Bit(<span class="string">"打开图像 (%1)"</span>).arg(fileName);</span><br><span class="line">	<span class="keyword">this</span>-&gt;mImg = cv::imread(fileName.toLocal8Bit().toStdString());</span><br><span class="line">	qInfo() &lt;&lt; QString::fromLocal8Bit(<span class="string">"图像尺寸：width=%1px, height=%2px"</span>)</span><br><span class="line">		.arg(<span class="keyword">this</span>-&gt;mImg.cols)</span><br><span class="line">		.arg(<span class="keyword">this</span>-&gt;mImg.rows);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 显示图像</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;showImage(<span class="keyword">this</span>-&gt;mImg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="QLabel的大小及图像自适应"><a href="#QLabel的大小及图像自适应" class="headerlink" title="QLabel的大小及图像自适应"></a>QLabel的大小及图像自适应</h2><p>很遗憾的是，QLabel不支持百分比的布局方式，在窗口发生变化时其宽高并不会变化，这就导致图像显示时相当别扭。为了解决这个问题，需要设置窗口的resize事件来动态调整label宽高，且动态调整宽高后图像重新显示。</p>
<p>在<code>KvImage</code>类中添加<code>resizeEvent</code>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">resizeEvent</span><span class="params">(QResizeEvent* evt)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::resizeEvent</span><span class="params">(QResizeEvent* evt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	QSize winSize = <span class="keyword">this</span>-&gt;<span class="built_in">size</span>(),</span><br><span class="line">		menuSize = ui.menuBar-&gt;<span class="built_in">size</span>(),</span><br><span class="line">		statusSize = ui.statusBar-&gt;<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> labelHeight = winSize.<span class="built_in">height</span>() - menuSize.<span class="built_in">height</span>() - statusSize.<span class="built_in">height</span>(),</span><br><span class="line">		labelWidth = winSize.<span class="built_in">width</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>-&gt;mLabel-&gt;setGeometry(<span class="number">0</span>, <span class="number">0</span>, labelWidth, labelHeight);</span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"KvImage::resizeEvent() - Label size is (width="</span> &lt;&lt; labelWidth</span><br><span class="line">		&lt;&lt; <span class="string">"px, height="</span> &lt;&lt; labelHeight &lt;&lt; <span class="string">"px)"</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 重新显示图片</span></span><br><span class="line">	<span class="keyword">if</span> (labelWidth &gt; <span class="number">0</span> &amp;&amp; labelHeight &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;showImage(<span class="keyword">this</span>-&gt;mImg);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="图像缩放和拖动"><a href="#图像缩放和拖动" class="headerlink" title="图像缩放和拖动"></a>图像缩放和拖动</h2><blockquote>
<p>滚动事件：<a href="https://doc.qt.io/qt-5.12/qwheelevent.html" target="_blank" rel="noopener">https://doc.qt.io/qt-5.12/qwheelevent.html</a></p>
<p>鼠标事件：<a href="https://doc.qt.io/qt-5.12/qmouseevent.html" target="_blank" rel="noopener">https://doc.qt.io/qt-5.12/qmouseevent.html</a></p>
</blockquote>
<p>需要实现三个事件响应：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在主窗口类添加</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wheelEvent</span><span class="params">(QWheelEvent* evt)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mousePressEvent</span><span class="params">(QMouseEvent* evt)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent* evt)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="图像矩形的概念"><a href="#图像矩形的概念" class="headerlink" title="图像矩形的概念"></a>图像矩形的概念</h3><p>为了实现图像的拖动、缩放等交互操作，引入图像矩形的概念。考虑在窗口中添加一个存储当前图像窗口的矩形<code>mRect</code>，用于区分QLabel的矩形和图片的矩形。在图像显示控件中，应该存在两个矩形：<strong>显示区矩形</strong>（QLabel）和<strong>图像矩形</strong>。图片矩形描述图片相对于显示区矩形的空间位置，而显示区显示的将是两个<strong>矩形相交部分的图像像素</strong>。</p>
<h3 id="加入图像矩形后的程序优化"><a href="#加入图像矩形后的程序优化" class="headerlink" title="加入图像矩形后的程序优化"></a>加入图像矩形后的程序优化</h3><p>如何在显示区显示图像矩形的内容已经在本章的前面部分论述，这部分内容主要论述了加入了图像矩形后的程序修改问题。</p>
<p>在“指定区域显示位图”的函数<code>MatToQImage(const cv::Mat&amp; img, cv::Size imgSize)</code>中，有一段计算图像调整后大小的代码：当给定一个显示区，在不改变图像比例的情况下将图像完整放入这个区域，需要计算调整尺寸后图像的宽高。将其封装成一个函数，如下所示：</p>
<p>计算图像<strong>匹配窗口尺寸</strong>后的矩形：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">cv::Rect <span class="title">Transform::calcImageRect</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; img, cv::Size imgSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 计算缩放比例</span></span><br><span class="line">    <span class="keyword">double</span> xScale, yScale;</span><br><span class="line">    xScale = <span class="keyword">double</span>(imgSize.<span class="built_in">width</span>) / <span class="keyword">double</span>(img.cols);</span><br><span class="line">    yScale = <span class="keyword">double</span>(imgSize.<span class="built_in">height</span>) / <span class="keyword">double</span>(img.rows);</span><br><span class="line">    <span class="keyword">double</span> scale = <span class="built_in">std</span>::<span class="built_in">min</span>(xScale, yScale);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算缩放后的图片矩形（居中显示)</span></span><br><span class="line">    cv::Rect imgRect;</span><br><span class="line">    imgRect.<span class="built_in">width</span> = <span class="keyword">int</span>(img.cols * scale);</span><br><span class="line">    imgRect.<span class="built_in">height</span> = <span class="keyword">int</span>(img.rows * scale);</span><br><span class="line">    imgRect.x = <span class="keyword">int</span>((imgSize.<span class="built_in">width</span> - imgRect.<span class="built_in">width</span>) / <span class="number">2</span>);</span><br><span class="line">    imgRect.y = <span class="keyword">int</span>((imgSize.<span class="built_in">height</span> - imgRect.<span class="built_in">height</span>) / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> imgRect;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改“指定区域显示位图”的函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QImage <span class="title">Transform::MatToQImage</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; img, cv::Size imgSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cv::Mat src;</span><br><span class="line">    cv::Rect imgRect = Transform::calcImageRect(img, imgSize);</span><br><span class="line">    cv::resize(img, src, cv::Size(imgRect.<span class="built_in">width</span>, imgRect.<span class="built_in">height</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> Transform::MatToQImage(src);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在打开图像时计算图像矩形，保存到全局变量并应用到显示视图上：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::on_action_open_image_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">	<span class="comment">// 计算图片矩形</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;mRect = Transform::calcImageRect(<span class="keyword">this</span>-&gt;mImg, cv::Size(<span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">width</span>(), <span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">height</span>()));</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 显示图像</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;showImage(<span class="keyword">this</span>-&gt;mImg, <span class="keyword">this</span>-&gt;mRect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>缩放事件触发时响应更改：图片矩形保持不变。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::resizeEvent</span><span class="params">(QResizeEvent* evt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">	<span class="comment">// 重新显示图片</span></span><br><span class="line">	<span class="keyword">if</span> (labelWidth &gt; <span class="number">0</span> &amp;&amp; labelHeight &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>-&gt;mImg.data)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;showImage(<span class="keyword">this</span>-&gt;mImg, <span class="keyword">this</span>-&gt;mRect);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="拖动图像"><a href="#拖动图像" class="headerlink" title="拖动图像"></a>拖动图像</h3><p>由QWidget自带的<a href="https://doc.qt.io/qt-5.12/qwidget.html#protected-functions" target="_blank" rel="noopener">事件函数</a><code>mousePressEvent</code>，<code>mouseMoveEvent</code>，<code>moudeReleaseEvent</code>来跟踪鼠标移动；设定全局变量<code>double msX, msY, meX, meY</code>来记录鼠标移动的起始位置；三个事件函数的参数均为<a href="https://doc.qt.io/qt-5.12/qmouseevent.html" target="_blank" rel="noopener">QMouseEvent</a>，通过<code>QMouseEvent::localPos()</code>（<a href="https://doc.qt.io/qt-5.12/qmouseevent.html#localPos" target="_blank" rel="noopener">参考</a>）获取双浮点型坐标；在事件函数中，通过<code>QMouseEvent::button()</code>获取按键类型（左键、右键、滚轮键等，<a href="https://doc.qt.io/qt-5.12/qt.html#MouseButton-enum" target="_blank" rel="noopener">参考</a>）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KvImage</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">// mouse start x,y; mouse end x,y</span></span><br><span class="line">	<span class="keyword">double</span> msX, msY, meX, meY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::mousePressEvent</span><span class="params">(QMouseEvent* evt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 接收事件，不往下传递</span></span><br><span class="line">	evt-&gt;accept();</span><br><span class="line">	QPointF pt = evt-&gt;localPos();</span><br><span class="line">	<span class="keyword">this</span>-&gt;msX = pt.x();</span><br><span class="line">	<span class="keyword">this</span>-&gt;msY = pt.y();</span><br><span class="line">	qDebug() &lt;&lt; QString(<span class="string">"KvImage::mousePressEvent() - (x=%1, y=%2)"</span>)</span><br><span class="line">		.arg(<span class="keyword">this</span>-&gt;msX).arg(<span class="keyword">this</span>-&gt;msY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::mouseMoveEvent</span><span class="params">(QMouseEvent* evt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 接收事件，不往下传递</span></span><br><span class="line">	evt-&gt;accept();</span><br><span class="line">	QPointF pt = evt-&gt;localPos();</span><br><span class="line">	<span class="keyword">this</span>-&gt;meX = pt.x();</span><br><span class="line">	<span class="keyword">this</span>-&gt;meY = pt.y();</span><br><span class="line">	qDebug() &lt;&lt; QString(<span class="string">"KvImage::mouseMoveEvent() - (x=%1, y=%2)"</span>)</span><br><span class="line">		.arg(<span class="keyword">this</span>-&gt;meX).arg(<span class="keyword">this</span>-&gt;meY);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mImg.data &amp;&amp; <span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">height</span>() &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">width</span>() &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cv::Rect tRect = <span class="keyword">this</span>-&gt;mRect;</span><br><span class="line">		tRect.x += (<span class="keyword">this</span>-&gt;meX - <span class="keyword">this</span>-&gt;msX);</span><br><span class="line">		tRect.y += (<span class="keyword">this</span>-&gt;meY - <span class="keyword">this</span>-&gt;msY);</span><br><span class="line">		<span class="keyword">this</span>-&gt;showImage(<span class="keyword">this</span>-&gt;mImg, tRect);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::mouseReleaseEvent</span><span class="params">(QMouseEvent* evt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 接收事件，不往下传递</span></span><br><span class="line">	evt-&gt;accept();</span><br><span class="line">	QPointF pt = evt-&gt;localPos();</span><br><span class="line">	<span class="keyword">this</span>-&gt;meX = pt.x();</span><br><span class="line">	<span class="keyword">this</span>-&gt;meY = pt.y();</span><br><span class="line">	qDebug() &lt;&lt; QString(<span class="string">"KvImage::mouseReleaseEvent() - (x=%1, y=%2)"</span>)</span><br><span class="line">		.arg(<span class="keyword">this</span>-&gt;meX).arg(<span class="keyword">this</span>-&gt;meY);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mImg.data &amp;&amp; <span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">height</span>() &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">width</span>() &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;mRect.x += (<span class="keyword">this</span>-&gt;meX - <span class="keyword">this</span>-&gt;msX);</span><br><span class="line">		<span class="keyword">this</span>-&gt;mRect.y += (<span class="keyword">this</span>-&gt;meY - <span class="keyword">this</span>-&gt;msY);</span><br><span class="line">		<span class="keyword">this</span>-&gt;showImage(<span class="keyword">this</span>-&gt;mImg, <span class="keyword">this</span>-&gt;mRect);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="缩放图像"><a href="#缩放图像" class="headerlink" title="缩放图像"></a>缩放图像</h3><blockquote>
<p><a href="https://doc.qt.io/qt-5.12/qwheelevent.html#public-functions" target="_blank" rel="noopener">https://doc.qt.io/qt-5.12/qwheelevent.html#public-functions</a></p>
</blockquote>
<p>首先得明白滚轮事件的一些输出，这边做了一个例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::wheelEvent</span><span class="params">(QWheelEvent* evt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"KvImage::wheelEvent() - "</span> &lt;&lt; evt;    <span class="comment">// KvImage::wheelEvent() -  QWheelEvent(Qt::NoScrollPhase, pixelDelta=QPoint(0,0), angleDelta=QPoint(0,120))</span></span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"angleDelta: "</span> &lt;&lt; evt-&gt;angleDelta();  <span class="comment">// angleDelta:  QPoint(0,120)</span></span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"buttons: "</span> &lt;&lt; evt-&gt;buttons();        <span class="comment">// buttons:  QFlags&lt;Qt::MouseButton&gt;(NoButton)</span></span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"globalPos: "</span> &lt;&lt; evt-&gt;globalPos();    <span class="comment">// globalPos:  QPoint(1739,635)</span></span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"globalPosF: "</span> &lt;&lt; evt-&gt;globalPosF();  <span class="comment">// globalPosF:  QPointF(1739,635)</span></span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"globalX: "</span> &lt;&lt; evt-&gt;globalX();        <span class="comment">// globalX:  1739</span></span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"globalY: "</span> &lt;&lt; evt-&gt;globalY();        <span class="comment">// globalY:  635</span></span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"inverted: "</span> &lt;&lt; evt-&gt;inverted();      <span class="comment">// inverted:  false</span></span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"phase: "</span> &lt;&lt; evt-&gt;phase();            <span class="comment">// phase:  Qt::NoScrollPhase</span></span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"pixelDelta: "</span> &lt;&lt; evt-&gt;pixelDelta();  <span class="comment">// pixelDelta:  QPoint(0,0)</span></span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"pos: "</span> &lt;&lt; evt-&gt;pos();                <span class="comment">// pos:  QPoint(271,121)</span></span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"posF: "</span> &lt;&lt; evt-&gt;posF();              <span class="comment">// posF:  QPointF(271,121)</span></span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"source: "</span> &lt;&lt; evt-&gt;source();          <span class="comment">// source:  Qt::MouseEventNotSynthesized</span></span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"x: "</span> &lt;&lt; evt-&gt;x();                    <span class="comment">// x:  271</span></span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"y: "</span> &lt;&lt; evt-&gt;y();                    <span class="comment">// y:  121</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考<a href="https://doc.qt.io/qt-5.12/qwheelevent.html#angleDelta" target="_blank" rel="noopener">QWheelEvent Class | Qt GUI 5.12.10</a>，得知其中<code>angleDelta()</code>返回的是滚轮滚动的角度，往上滚为<code>+</code>，往下滚为<code>-</code>，一般为120，除以8得到滚动的角度为15度。（做了个标记数了一圈，确实是滚动24下回到原点）。</p>
<p>另外有用的两组函数是<code>globalX(), globalY()</code>和<code>x(), y()</code>。分别表示当前鼠标点位于屏幕和软件中的x、y坐标值，起始为0。</p>
<p>滚动缩放时需要针对鼠标中心计算缩放后的矩形坐标，思想比较简单，在代码中体现，完整代码如下所示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::wheelEvent</span><span class="params">(QWheelEvent* evt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 接收事件，不往下传递</span></span><br><span class="line">	evt-&gt;accept();</span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"angleDelta: "</span> &lt;&lt; evt-&gt;angleDelta().y();  <span class="comment">// angleDelta:  QPoint(0,120)</span></span><br><span class="line">	QPointF pt = evt-&gt;posF();    <span class="comment">// 鼠标中心点</span></span><br><span class="line">	<span class="keyword">double</span> delta = <span class="number">0.1</span>;          <span class="comment">// 缩放系数</span></span><br><span class="line">	delta *= <span class="keyword">double</span>(evt-&gt;angleDelta().y()) / <span class="number">8</span> / <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// (x0-x1)/(x0-x2) = w1/w2 = 1/(1+delta)</span></span><br><span class="line">	<span class="keyword">int</span> x0 = pt.x(),</span><br><span class="line">		y0 = pt.y(),</span><br><span class="line">		x1 = <span class="keyword">this</span>-&gt;mRect.x,</span><br><span class="line">		y1 = <span class="keyword">this</span>-&gt;mRect.y;</span><br><span class="line">	<span class="keyword">this</span>-&gt;mRect.<span class="built_in">width</span> *= (<span class="number">1</span> + delta);</span><br><span class="line">	<span class="keyword">this</span>-&gt;mRect.<span class="built_in">height</span> *= (<span class="number">1</span> + delta);</span><br><span class="line">	<span class="keyword">this</span>-&gt;mRect.x = x0 + (x1 - x0) * (<span class="number">1</span> + delta);</span><br><span class="line">	<span class="keyword">this</span>-&gt;mRect.y = y0 + (y1 - y0) * (<span class="number">1</span> + delta);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>-&gt;showImage(<span class="keyword">this</span>-&gt;mImg, <span class="keyword">this</span>-&gt;mRect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="添加文件输出日志"><a href="#添加文件输出日志" class="headerlink" title="添加文件输出日志"></a>添加文件输出日志</h1><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"KvImage.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFile&gt;;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDateTime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_VERSION &gt;= QT_VERSION_CHECK(5,0,0)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">customMessageHandler</span><span class="params">(QtMsgType type, <span class="keyword">const</span> QMessageLogContext&amp; ctx, <span class="keyword">const</span> QString&amp; str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	QString txt = str;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">customMessageHandler</span><span class="params">(QtMsgType type, <span class="keyword">const</span> <span class="keyword">char</span>* msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">QString <span class="title">txt</span><span class="params">(msg)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	<span class="comment">// 打开日志文件</span></span><br><span class="line">	<span class="function">QFile <span class="title">of</span><span class="params">(<span class="string">"KvImage.log"</span>)</span></span>;</span><br><span class="line">	of.<span class="built_in">open</span>(QIODevice::WriteOnly | QIODevice::Append);</span><br><span class="line">	<span class="function">QTextStream <span class="title">ts</span><span class="params">(&amp;of)</span></span>;</span><br><span class="line">	ts.setCodec(<span class="string">"UTF-8"</span>);  <span class="comment">// 处理中文乱码</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 输出字符串</span></span><br><span class="line">	QString typeStr;</span><br><span class="line">	<span class="keyword">switch</span> (type)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> QtDebugMsg:</span><br><span class="line">		typeStr = <span class="string">"Debug"</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> QtWarningMsg:</span><br><span class="line">		typeStr = <span class="string">"Warning"</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> QtCriticalMsg: <span class="comment">// QtSystemMsg</span></span><br><span class="line">		typeStr = <span class="string">"Critical"</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> QtFatalMsg:</span><br><span class="line">		typeStr = <span class="string">"Fatal"</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> QtInfoMsg:</span><br><span class="line">		typeStr = <span class="string">"Info"</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	QString logStr = QString(<span class="string">"(%1) [%2] - %3 - %4 - in: %5:%6\n"</span>)</span><br><span class="line">		.arg(QDateTime::currentDateTime().toString(<span class="string">"yyyy-MM-dd hh:mm:ss ddd"</span>))  <span class="comment">// 时间</span></span><br><span class="line">		.arg(typeStr)  <span class="comment">// 日志类型</span></span><br><span class="line">		.arg(ctx.function)  <span class="comment">// 函数</span></span><br><span class="line">		.arg(txt)      <span class="comment">// 消息内容</span></span><br><span class="line">		.arg(ctx.file).arg(ctx.<span class="built_in">line</span>);  <span class="comment">// 文件和行数</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 输出到控制台</span></span><br><span class="line">	OutputDebugString(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">wchar_t</span>*&gt;(logStr.utf16()));</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 不输出debug到文件中</span></span><br><span class="line">	<span class="keyword">if</span> (type == QtDebugMsg)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 输出到文件</span></span><br><span class="line">	ts &lt;&lt; logStr;</span><br><span class="line">	of.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果是Fatal，显示对话框并退出</span></span><br><span class="line">	<span class="keyword">if</span> (type == QtFatalMsg)</span><br><span class="line">	&#123;</span><br><span class="line">		QMessageBox::warning(<span class="literal">nullptr</span>, <span class="string">"Warning"</span>, txt, QMessageBox::Button::Default, QMessageBox::Button::Cancel);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 控制调试信息</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_VERSION &gt;= QT_VERSION_CHECK(5,0,0)</span></span><br><span class="line">	qInstallMessageHandler(customMessageHandler);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">	qInstallMsgHandler(customMessageHandler);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">	</span><br><span class="line">	qInfo() &lt;&lt; <span class="string">"Start app"</span>;</span><br><span class="line">	KvImage w;</span><br><span class="line">	w.show();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> exitCode = a.exec();</span><br><span class="line">	qInfo() &lt;&lt; <span class="string">"Exit app with code: "</span> &lt;&lt; exitCode;</span><br><span class="line">	<span class="keyword">return</span> exitCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解决重写消息控制后无法输出到控制台的问题"><a href="#解决重写消息控制后无法输出到控制台的问题" class="headerlink" title="解决重写消息控制后无法输出到控制台的问题"></a>解决重写消息控制后无法输出到控制台的问题</h2><p>重写消息控制使用<code>qInstallMessageHandler</code>实现，函数使用方法如上一小节所示。重写的目的在于将输入结果写到日志文件中，但是会覆盖掉原先的输出到控制台的功能。为了实现既能输出到日志文件，又能输出到控制台，需要进一步操作。</p>
<h3 id="输出到控制台的函数：OutputDebugString"><a href="#输出到控制台的函数：OutputDebugString" class="headerlink" title="输出到控制台的函数：OutputDebugString"></a>输出到控制台的函数：OutputDebugString</h3><p>输出到控制台需要用到包含在头文件<code>Windows.h</code>中的函数<code>OutputDebugString()</code>，该函数的输入类型为<code>LPCWSTR</code>，即<code>const WCHAR *</code>，而<code>WCHAR</code>是<code>wchar_t</code>的类型定义，意思是宽字符（wide char），表示16位的Unicode字符（16-bit UNICODE character）。所以只需要将函数输入设置为<code>const wchar_t *</code>即可实现控制台输出。</p>
<p>该函数用法类似于<code>printf</code>，区别在于：1. 使用<code>const wchar_t *</code>而不是<code>const char *</code>；2. 不支持模板字符串。</p>
<h3 id="直接输出字符串到控制台"><a href="#直接输出字符串到控制台" class="headerlink" title="直接输出字符串到控制台"></a>直接输出字符串到控制台</h3><p>即<code>const char *</code>（静态字符串）转<code>const wchar_t *</code>，只需要在字符串之前加一个L即可实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">OutputDebugString(<span class="string">L"控制台输出"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="将const-char-输出到控制台"><a href="#将const-char-输出到控制台" class="headerlink" title="将const char *输出到控制台"></a>将const char *输出到控制台</h3><p>即<code>const char *</code>（变量）转<code>const wchar_t *</code>，<code>MultiByteToWideChar</code>包含在头文件<code>Windows.h</code>中。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* cstr = <span class="string">"你好"</span>;</span><br><span class="line"><span class="keyword">int</span> strSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (cstr[strSize] != <span class="string">'\0'</span>) strSize++;</span><br><span class="line"><span class="keyword">wchar_t</span>* wString = <span class="keyword">new</span> <span class="keyword">wchar_t</span>[strSize];</span><br><span class="line">MultiByteToWideChar(CP_ACP, <span class="number">0</span>, cstr, <span class="number">-1</span>, wString, strSize);</span><br><span class="line">OutputDebugString(wString);</span><br><span class="line"><span class="keyword">delete</span>[] wString;</span><br></pre></td></tr></table></figure>
<h3 id="将std-string输出到控制台"><a href="#将std-string输出到控制台" class="headerlink" title="将std::string输出到控制台"></a>将std::string输出到控制台</h3><p>方法类似于将<code>const char *</code>（变量）输出到控制台，<code>MultiByteToWideChar</code>包含在头文件<code>Windows.h</code>中。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> stdStr = <span class="string">"你好"</span>;</span><br><span class="line"><span class="keyword">int</span> strSize = <span class="keyword">int</span>(stdStr.length());</span><br><span class="line"><span class="keyword">wchar_t</span>* wString = <span class="keyword">new</span> <span class="keyword">wchar_t</span>[strSize];</span><br><span class="line">MultiByteToWideChar(CP_ACP, <span class="number">0</span>, stdStr.c_str(), <span class="number">-1</span>, wString, strSize);</span><br><span class="line">OutputDebugString(wString);</span><br><span class="line"><span class="keyword">delete</span>[] wString;</span><br></pre></td></tr></table></figure>
<h3 id="将QString的结果输出到控制台"><a href="#将QString的结果输出到控制台" class="headerlink" title="将QString的结果输出到控制台"></a>将QString的结果输出到控制台</h3><p>即<code>QString</code>转<code>const wchar_t *</code>，通过使用<code>reinterpret_cast</code>来实现。<code>reinterpret_cast</code>用来处理无关类型之间的转换；它会产生一个新的值，这个值会有与原始参数（expressoin）有完全相同的<strong>比特位</strong>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">OutputDebugString(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">wchar_t</span>*&gt;(logStr.utf16()));  <span class="comment">// type of logStr is QString</span></span><br></pre></td></tr></table></figure>
<h1 id="避免中文乱码"><a href="#避免中文乱码" class="headerlink" title="避免中文乱码"></a>避免中文乱码</h1><p>由于VS创建的.cpp和.h文件默认通过GBK编码，使用<code>QString(&quot;中文&quot;)</code>构造字符串时，会出现乱码。这里的引号的内容作为字符串，对应的数据类型为<code>const char *</code>，而构造函数<code>QString(const char *)</code>默认是以UTF-8的编码解析字符串常量，因此当文件的编码格式不是UTF-8时，通过<code>QString(&quot;&quot;)</code>创建字符串时，会导致中文乱码。因此，当引号中有中文字符时，创建QString字符串应该使用其自带的静态方法。</p>
<p><code>std::string</code>解析静态字符串时默认使用GBK，因此不会出现中文乱码的问题，使用其作为跳板转成<code>QString</code>也是一种手段。下面介绍<code>const char *</code>，<code>std::string</code>与<code>QString</code>之间相互转换的方法。</p>
<h2 id="const-char-转QString"><a href="#const-char-转QString" class="headerlink" title="const char *转QString"></a>const char *转QString</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QString str = QString::fromLocal8Bit(<span class="string">"中文字符串"</span>);</span><br><span class="line"></span><br><span class="line">QString str = QString::fromLocal8Bit(<span class="string">"打开图像 (%1)"</span>).arg(fileName);  <span class="comment">// 使用模板插值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> stdStr = <span class="string">"打开图像 (%1)"</span>;</span><br><span class="line">QString str = QString::fromLocal8Bit(stdStr.c_str()).arg(fileName);</span><br></pre></td></tr></table></figure>
<h2 id="QString转const-char"><a href="#QString转const-char" class="headerlink" title="QString转const char *"></a>QString转const char *</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里纯属脱裤子放屁</span></span><br><span class="line">QString qStr = QString::fromLocal8Bit(<span class="string">"你好啊"</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* c_str = qStr.toLocal8Bit();</span><br></pre></td></tr></table></figure>
<h2 id="QString转std-string"><a href="#QString转std-string" class="headerlink" title="QString转std::string"></a>QString转std::string</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QString str = QString::fromLocal8Bit(<span class="string">"中文字符串"</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> stdStr = str.toLocal8Bit().toStdString();</span><br></pre></td></tr></table></figure>
<h2 id="std-string转QString"><a href="#std-string转QString" class="headerlink" title="std::string转QString"></a>std::string转QString</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> stdStr = <span class="string">"你好"</span>;</span><br><span class="line">QString str = QString::fromStdString(stdStr);</span><br></pre></td></tr></table></figure>
<hr>
<p>至此，从0开始开发的Windows平台下使用VS的基于Qt和OpenCV的图像浏览软件开发完毕。细节非常多，关乎Qt开发、OpenCV开发和VS配置，还包括了一些数学运算思维，有的没有列出公式解释，但都包含在代码中，且进行了思路描述，用作以后的参考。</p>
<p>不过当软件开发完毕运行时，还是发现了一些值得优化的地方：</p>
<ol>
<li>卡顿。当软件界面较大时，会出现明显的卡顿现象，初步分析是由于在一整张窗口大小的位图上嵌入像素导致的。考虑使用Qt自带的嵌入像素操作，不需要生成窗口大小的位图，会产生大量无用的像素；</li>
<li>图像放大到很大时，程序崩溃。需要对图像缩放大小进行一定的约束，在缩放到某一阈值的时候，更换尺寸调整方案，停止使用OpenCV的resize方法；可以考虑在缩放到像素级别时，改成像素值渲染，显示每一个像素的正方格，附上亮度值；</li>
</ol>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>从1到2：图像浏览软件的优化与改进</title>
    <url>/2021/04/12/%E4%BB%8E1%E5%88%B02-%E5%9B%BE%E5%83%8F%E6%B5%8F%E8%A7%88%E8%BD%AF%E4%BB%B6%E7%9A%84%E4%BC%98%E5%8C%96%E4%B8%8E%E6%94%B9%E8%BF%9B/</url>
    <content><![CDATA[<p>在之前的设计中，我们直接在centralWidget中拖了一个QLabel作为显示图像的控件，所有的事件是基于主窗体的。当我们需要加入一些额外的窗体控件时，比如说底部的信息栏，侧边栏列表，就会想到要将几个部分分开来，保持其独立性。这篇文章记录了图片浏览软件优化的过程，为后续将其升级成图片处理软件做准备。包括一些控件的封装、设计、组件通信的内容。</p>
<p><img src="/images/KvImage-v2.0.gif" alt="KvImage-v2.0"></p>
<h1 id="把图片窗口封装成一个控件"><a href="#把图片窗口封装成一个控件" class="headerlink" title="把图片窗口封装成一个控件"></a>把图片窗口封装成一个控件</h1><p>首先把centralWidget中的label控件删除，接着在工程中创建一个类，命名为<code>ImageViewer</code>，基类是<code>QWidget</code>。然后将图像显示、鼠标事件、调整尺寸事件的函数以及相关的成员变量移动过来（并根据报错信息进行一定的修改），如下所示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ImageViewer.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QResizeEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWheelEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMouseEvent&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Transform.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageViewer</span> :</span></span><br><span class="line">    <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	ImageViewer(QWidget* parent = Q_NULLPTR);</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">showImage</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; img)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">showImage</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; img, cv::Rect imgRect)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">resizeEvent</span><span class="params">(QResizeEvent* evt)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">wheelEvent</span><span class="params">(QWheelEvent* evt)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">mouseDoubleClickEvent</span><span class="params">(QMouseEvent* evt)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">mousePressEvent</span><span class="params">(QMouseEvent* evt)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent* evt)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">mouseReleaseEvent</span><span class="params">(QMouseEvent* evt)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	QLabel* mLabel;</span><br><span class="line">	cv::Mat mImg;</span><br><span class="line">	cv::Rect mRect;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// mouse start x,y; mouse end x,y</span></span><br><span class="line">	<span class="keyword">double</span> msX, msY, meX, meY;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>由于之前的QLabel是通过拖动添加，直接通过<code>ui</code>变量可以获取，而改动后该变量无法直接获取，因此需要采用代码的方式添加（当然通过参数传递进来也可以，但是那样就显得很蠢）。将构造函数中的和QLabel相关的语句进行如下修改：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改前</span></span><br><span class="line"><span class="function">QString <span class="title">mainLabelName</span><span class="params">(<span class="string">"main_label"</span>)</span></span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;mLabel = ui.centralWidget-&gt;findChild&lt;QLabel*&gt;(mainLabelName);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;mLabel)</span><br><span class="line">&#123;</span><br><span class="line">    qFatal(QString(<span class="string">"QLabel [%1] not found!"</span>).arg(mainLabelName).toLocal8Bit());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改后</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mLabel = <span class="keyword">new</span> QLabel(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p>尺寸调整事件：不需要考虑到其他窗口控件，只需要占满当前控件即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改前</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageViewer::resizeEvent</span><span class="params">(QResizeEvent* evt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">	QSize winSize = <span class="keyword">this</span>-&gt;<span class="built_in">size</span>(),</span><br><span class="line">		menuSize = ui.menuBar-&gt;<span class="built_in">size</span>(),</span><br><span class="line">		statusSize = ui.statusBar-&gt;<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> labelHeight = winSize.<span class="built_in">height</span>() - menuSize.<span class="built_in">height</span>() - statusSize.<span class="built_in">height</span>(),</span><br><span class="line">		labelWidth = winSize.<span class="built_in">width</span>();</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改后</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageViewer::resizeEvent</span><span class="params">(QResizeEvent* evt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">	QSize winSize = <span class="keyword">this</span>-&gt;<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> labelHeight = winSize.<span class="built_in">height</span>(),</span><br><span class="line">		labelWidth = winSize.<span class="built_in">width</span>();</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加两个函数接口，用于打开图片：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ImageViewer.h</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">openImage</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; img)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">openImage</span><span class="params">(QString imagePath)</span></span>;</span><br><span class="line"><span class="comment">// ImageViewer.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageViewer::openImage</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!img.data)</span><br><span class="line">	&#123;</span><br><span class="line">		qWarning() &lt;&lt; <span class="string">"ImageViewer::openImage - Mat is Empty"</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>-&gt;mImg = img.clone();</span><br><span class="line">	qInfo() &lt;&lt; QString::fromLocal8Bit(<span class="string">"ImageViewer::openImage - 图像尺寸：width=%1px, height=%2px"</span>)</span><br><span class="line">		.arg(<span class="keyword">this</span>-&gt;mImg.cols)</span><br><span class="line">		.arg(<span class="keyword">this</span>-&gt;mImg.rows);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 计算图片矩形</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;mRect = Transform::calcImageRect(<span class="keyword">this</span>-&gt;mImg, cv::Size(<span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">width</span>(), <span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">height</span>()));</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 显示图像</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;showImage(<span class="keyword">this</span>-&gt;mImg, <span class="keyword">this</span>-&gt;mRect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageViewer::openImage</span><span class="params">(QString imagePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	qInfo() &lt;&lt; QString::fromLocal8Bit(<span class="string">"ImageViewer::openImage - 打开图像 (%1)"</span>).arg(imagePath);</span><br><span class="line">	<span class="keyword">this</span>-&gt;mImg = cv::imread(imagePath.toLocal8Bit().toStdString());</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;mImg.data)</span><br><span class="line">	&#123;</span><br><span class="line">		qWarning() &lt;&lt; QString(<span class="string">"ImageViewer::openImage - Read image failed! [%1]"</span>)</span><br><span class="line">			.arg(imagePath);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	qInfo() &lt;&lt; QString::fromLocal8Bit(<span class="string">"ImageViewer::openImage - 图像尺寸：width=%1px, height=%2px"</span>)</span><br><span class="line">		.arg(<span class="keyword">this</span>-&gt;mImg.cols)</span><br><span class="line">		.arg(<span class="keyword">this</span>-&gt;mImg.rows);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 计算图片矩形</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;mRect = Transform::calcImageRect(<span class="keyword">this</span>-&gt;mImg, cv::Size(<span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">width</span>(), <span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">height</span>()));</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 显示图像</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;showImage(<span class="keyword">this</span>-&gt;mImg, <span class="keyword">this</span>-&gt;mRect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="布局设计"><a href="#布局设计" class="headerlink" title="布局设计"></a>布局设计</h1><p>计划在软件主界面设置三个控件：图片窗口，侧边栏，信息栏，通过纯代码的方式添加。添加时使用<code>new</code>进行初始化，初始化时将父组件作为参数传入，即可实现添加子组件的效果。这些控件的显示、位置、大小全部通过变量控制。</p>
<h2 id="图片显示窗口控件"><a href="#图片显示窗口控件" class="headerlink" title="图片显示窗口控件"></a>图片显示窗口控件</h2><p>首先在窗体类的头文件中引入我们自建的类<code>#include &quot;ImageViewer.h&quot;</code>，接着添加成员变量<code>ImageViewer* iViewer;</code></p>
<p>初始化成员变量并添加到中心控件的布局中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// KvImage::KvImage</span></span><br><span class="line"><span class="keyword">this</span>-&gt;iViewer = <span class="keyword">new</span> ImageViewer(ui.centralWidget);    <span class="comment">// 图片显示窗口</span></span><br></pre></td></tr></table></figure>
<p>修改打开图像事件的响应函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::on_action_open_image_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 通过对话框获取文件路径</span></span><br><span class="line">	QString caption = QString::fromLocal8Bit(<span class="string">"选择一个文件打开"</span>);</span><br><span class="line">	QString dir = <span class="string">""</span>;  <span class="comment">// 为空默认记忆上一次打开的路径</span></span><br><span class="line">	<span class="function">QString <span class="title">filter</span><span class="params">(<span class="string">"Image (*.png *.jpg *.jpeg *.tif *.bmp)"</span>)</span></span>;</span><br><span class="line">	QString fileName = QFileDialog::getOpenFileName(</span><br><span class="line">		<span class="keyword">this</span>, caption, dir, filter</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (fileName.isEmpty())</span><br><span class="line">	&#123;</span><br><span class="line">		qWarning() &lt;&lt; QString::fromLocal8Bit(<span class="string">"KvImage::on_action_open_image_triggered - 未选择图片路径"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>-&gt;iViewer-&gt;openImage(fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="选择侧边栏和信息栏的控件"><a href="#选择侧边栏和信息栏的控件" class="headerlink" title="选择侧边栏和信息栏的控件"></a>选择侧边栏和信息栏的控件</h2><h3 id="侧边栏：QTreeView还是QTreeWidget"><a href="#侧边栏：QTreeView还是QTreeWidget" class="headerlink" title="侧边栏：QTreeView还是QTreeWidget?"></a>侧边栏：QTreeView还是QTreeWidget?</h3><p>参考自：<a href="https://doingself.github.io/2016/10/11/2016-10-11-QTreeVirew%E4%B8%8EQTreeWidget%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">doingself.github.io</a></p>
<p>QTreeWidget是QTreeView的子类。Qt中QTreeWidget比QTreeView更简单，但没有QTreeView那么灵活（QTreeWidget封装的和MFC的CTreeCtrl很类似，没有mvc的特点）。</p>
<p><img src="/images/image-20210411201852395.png" alt="image-20210411201852395" style="zoom:50%;" /></p>
<p>因此决定使用QTreeView，在<code>KvImage.h</code>中创建成员变量：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QTreeView* mSideBar;</span><br></pre></td></tr></table></figure>
<p>初始化：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// KvImage::KvImage</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mSideBar = <span class="keyword">new</span> QTreeView(ui.centralWidget);     <span class="comment">// 侧边栏</span></span><br></pre></td></tr></table></figure>
<h3 id="信息栏"><a href="#信息栏" class="headerlink" title="信息栏"></a>信息栏</h3><p>信息栏使用<code>QTextBrowser</code>，继承自<code>QTextEdit</code>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QTextBrowser* mInfoBar;</span><br></pre></td></tr></table></figure>
<p>初始化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// KvImage::KvImage</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mInfoBar = <span class="keyword">new</span> QTextBrowser(ui.centralWidget);  <span class="comment">// 信息栏</span></span><br></pre></td></tr></table></figure>
<h2 id="动态调整控件位置大小"><a href="#动态调整控件位置大小" class="headerlink" title="动态调整控件位置大小"></a>动态调整控件位置大小</h2><p>布局设计的思路是：侧边栏占左侧，高度与中心控件一至，信息栏占底部，宽度为中心控件减去侧边栏的宽度，其余部分为图片窗口。</p>
<p>在窗体类中添加变量用来记录各个控件的位置和大小：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否可见</span></span><br><span class="line"><span class="keyword">bool</span> sideBarVisible,</span><br><span class="line">	infoBarVisible;</span><br><span class="line"><span class="comment">// 尺寸比例</span></span><br><span class="line"><span class="keyword">int</span> sideBarWidth,</span><br><span class="line">	infoBarHeight;</span><br></pre></td></tr></table></figure>
<p>在构造函数中初始化变量：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化变量</span></span><br><span class="line"><span class="keyword">this</span>-&gt;infoBarVisible = <span class="keyword">this</span>-&gt;sideBarVisible = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;sideBarWidth = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;infoBarHeight = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>
<p>设置成员函数来控制控件尺寸：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::refreshLayout</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	qDebug() &lt;&lt; <span class="string">"KvImage::refreshLayout()"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取中心控件的宽高</span></span><br><span class="line">	QSize cSize = ui.centralWidget-&gt;<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">int</span> cw, ch;</span><br><span class="line">	cw = cSize.<span class="built_in">width</span>();</span><br><span class="line">	ch = cSize.<span class="built_in">height</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 计算各个控件的矩形</span></span><br><span class="line">	QRect imgRect,</span><br><span class="line">		sideRect,</span><br><span class="line">		infoRect;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置侧边栏</span></span><br><span class="line">	sideRect.setX(<span class="number">0</span>); sideRect.setY(<span class="number">0</span>);</span><br><span class="line">	sideRect.setWidth(<span class="keyword">this</span>-&gt;sideBarVisible ? <span class="keyword">this</span>-&gt;sideBarWidth : <span class="number">0</span>);</span><br><span class="line">	sideRect.setHeight(ch);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置底部信息栏</span></span><br><span class="line">	infoRect.setX(sideRect.<span class="built_in">width</span>());</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;infoBarVisible)</span><br><span class="line">	&#123;</span><br><span class="line">		infoRect.setY(ch - <span class="keyword">this</span>-&gt;infoBarHeight);</span><br><span class="line">		infoRect.setHeight(ch * <span class="keyword">this</span>-&gt;infoBarHeight);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		infoRect.setY(ch);</span><br><span class="line">		infoRect.setHeight(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	infoRect.setWidth(cw - sideRect.<span class="built_in">width</span>());</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置图片区域</span></span><br><span class="line">	imgRect.setX(sideRect.<span class="built_in">width</span>());</span><br><span class="line">	imgRect.setY(<span class="number">0</span>);</span><br><span class="line">	imgRect.setWidth(cw - sideRect.<span class="built_in">width</span>());</span><br><span class="line">	imgRect.setHeight(ch - infoRect.<span class="built_in">height</span>());</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 应用矩形位置</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;iViewer-&gt;setGeometry(imgRect);</span><br><span class="line">	<span class="keyword">this</span>-&gt;mInfoBar-&gt;setGeometry(infoRect);</span><br><span class="line">	<span class="keyword">this</span>-&gt;iViewer-&gt;setGeometry(imgRect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改调整尺寸事件的函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::resizeEvent</span><span class="params">(QResizeEvent* evt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;refreshLayout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在初始化各控件之后，更新布局：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">KvImage::KvImage(QWidget* parent)</span><br><span class="line">	: QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;refreshLayout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行程序，可以看到效果：</p>
<p><img src="/images/image-20210411203524015.png" alt="image-20210411203524015" style="zoom:50%;" /></p>
<h2 id="窗口大小随屏幕分辨率变化"><a href="#窗口大小随屏幕分辨率变化" class="headerlink" title="窗口大小随屏幕分辨率变化"></a>窗口大小随屏幕分辨率变化</h2><p>由于窗口控件数值一开始写死，在遇到不同分辨率屏幕时显示效果不一致。希望通过初始化窗口时屏幕的分辨率来设定窗口尺寸，例如占宽60，占高80这样，因此需要首先获取到屏幕的实际宽高，再相应地调整整个窗体的尺寸，以及各个控件的尺寸。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置窗体大小</span></span><br><span class="line">QDesktopWidget* desktopWidget = QApplication::desktop();</span><br><span class="line">QRect deskRect = desktopWidget-&gt;availableGeometry();  <span class="comment">// 可用桌面大小</span></span><br><span class="line"><span class="keyword">int</span> deskHeight, deskWidth;</span><br><span class="line">deskHeight = deskRect.<span class="built_in">height</span>();</span><br><span class="line">deskWidth = deskRect.<span class="built_in">width</span>();</span><br><span class="line"><span class="keyword">int</span> winHeight, winWidth;</span><br><span class="line">winHeight = deskHeight * <span class="number">0.8</span>;</span><br><span class="line">winWidth = deskWidth * <span class="number">0.8</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;setGeometry(deskWidth / <span class="number">2</span> - winWidth / <span class="number">2</span>, deskHeight / <span class="number">2</span> - winHeight / <span class="number">2</span>, winWidth, winHeight);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化变量</span></span><br><span class="line"><span class="keyword">this</span>-&gt;infoBarVisible = <span class="keyword">this</span>-&gt;sideBarVisible = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;sideBarWidth = winWidth * <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;infoBarHeight = winHeight * <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;sideBarWidth = <span class="keyword">this</span>-&gt;sideBarWidth &gt; <span class="number">350</span> ? <span class="number">350</span> : <span class="keyword">this</span>-&gt;sideBarWidth;</span><br><span class="line"><span class="keyword">this</span>-&gt;infoBarHeight = <span class="keyword">this</span>-&gt;infoBarHeight &gt; <span class="number">300</span> ? <span class="number">300</span> : <span class="keyword">this</span>-&gt;infoBarHeight;</span><br></pre></td></tr></table></figure>
<p>这样初始化时就可控多了，调了一个相对舒适的布局：</p>
<p><img src="/images/image-20210411225058192.png" alt="image-20210411225058192" style="zoom: 33%;" /></p>
<h1 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h1><blockquote>
<p>官方文档：<a href="https://doc.qt.io/qt-5.12/qtreeview.html" target="_blank" rel="noopener">QTreeView</a></p>
<p>使用总结：<a href="https://blog.csdn.net/dpsying/article/details/79687254" target="_blank" rel="noopener">QTreeView使用总结—序</a></p>
</blockquote>
<p>侧边栏<code>QTreeView</code>的基础设置和内容填充可以参考以下的代码（from <a href="https://blog.csdn.net/dpsying/article/details/79688791" target="_blank" rel="noopener">blog.csdn.net/dpsying</a>）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//////</span></span><br><span class="line"><span class="comment">//1，QTreeView常用设置项</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mSideBar-&gt;setEditTriggers(QTreeView::NoEditTriggers);   <span class="comment">//单元格不能编辑</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mSideBar-&gt;setSelectionBehavior(QTreeView::SelectRows);  <span class="comment">//一次选中整行</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mSideBar-&gt;setSelectionMode(QTreeView::SingleSelection); <span class="comment">//单选，配合上面的整行就是一次选单行</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mSideBar-&gt;setAlternatingRowColors(<span class="literal">true</span>);                <span class="comment">//每间隔一行颜色不一样，当有qss时该属性无效</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mSideBar-&gt;setFocusPolicy(Qt::NoFocus);                  <span class="comment">//去掉鼠标移到单元格上时的虚线框</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2，列头相关设置</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mSideBar-&gt;header()-&gt;hide();                                 <span class="comment">//隐藏列头</span></span><br><span class="line"><span class="comment">// this-&gt;mSideBar-&gt;header()-&gt;setStretchLastSection(true);            //最后一列自适应宽度</span></span><br><span class="line"><span class="comment">// this-&gt;mSideBar-&gt;header()-&gt;setDefaultAlignment(Qt::AlignCenter);   //列头文字默认居中对齐</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3，构造Model</span></span><br><span class="line">QStandardItemModel* model = <span class="keyword">new</span> QStandardItemModel(<span class="keyword">this</span>-&gt;mSideBar);</span><br><span class="line"><span class="comment">// model-&gt;setHorizontalHeaderLabels(QStringList() &lt;&lt; QStringLiteral("序号") &lt;&lt; QStringLiteral("名称"));     //设置列头</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//一级节点，加入mModel</span></span><br><span class="line">	QList&lt;QStandardItem*&gt; items1;</span><br><span class="line">	QStandardItem* item1 = <span class="keyword">new</span> QStandardItem(QString::number(i));</span><br><span class="line">	QStandardItem* item2 = <span class="keyword">new</span> QStandardItem(QStringLiteral(<span class="string">"一级节点"</span>));</span><br><span class="line">	items1.append(item1);</span><br><span class="line">	items1.append(item2);</span><br><span class="line">	model-&gt;appendRow(items1);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//二级节点,加入第1个一级节点</span></span><br><span class="line">		QList&lt;QStandardItem*&gt; items2;</span><br><span class="line">		QStandardItem* item3 = <span class="keyword">new</span> QStandardItem(QString::number(j));</span><br><span class="line">		QStandardItem* item4 = <span class="keyword">new</span> QStandardItem(QStringLiteral(<span class="string">"二级节点"</span>));</span><br><span class="line">		items2.append(item3);</span><br><span class="line">		items2.append(item4);</span><br><span class="line">		item1-&gt;appendRow(items2);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">5</span>; k++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//三级节点,加入第1个二级节点</span></span><br><span class="line">			QList&lt;QStandardItem*&gt; items3;</span><br><span class="line">			QStandardItem* item5 = <span class="keyword">new</span> QStandardItem(QString::number(k));</span><br><span class="line">			QStandardItem* item6 = <span class="keyword">new</span> QStandardItem(QStringLiteral(<span class="string">"三级节点"</span>));</span><br><span class="line">			items3.append(item5);</span><br><span class="line">			items3.append(item6);</span><br><span class="line">			item3-&gt;appendRow(items3);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4，应用model</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mSideBar-&gt;setModel(model);</span><br><span class="line"></span><br><span class="line"><span class="comment">//一些项在应用model后设置</span></span><br><span class="line"><span class="comment">//5，设第一列初始宽度；第一列固定宽度</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mSideBar-&gt;header()-&gt;resizeSection(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">this</span>-&gt;mSideBar-&gt;header()-&gt;setSectionResizeMode(<span class="number">0</span>, QHeaderView::Fixed);</span><br><span class="line"><span class="comment">//6，默认选中一级节点的第一行</span></span><br><span class="line">QModelIndex rootIndex = <span class="keyword">this</span>-&gt;mSideBar-&gt;rootIndex();</span><br><span class="line">QModelIndex selIndex = model-&gt;index(<span class="number">0</span>, <span class="number">0</span>, rootIndex);</span><br><span class="line"><span class="keyword">this</span>-&gt;mSideBar-&gt;setCurrentIndex(selIndex);</span><br></pre></td></tr></table></figure>
<p>侧边栏的内容可以看作是一个表格，也有行列的概念。</p>
<h2 id="初始化侧边栏"><a href="#初始化侧边栏" class="headerlink" title="初始化侧边栏"></a>初始化侧边栏</h2><p>侧边栏包含两个对象：视图和模型。因此需要通过两个变量来管理，由于在之前定义好了视图变量<code>mSideBar</code>，因此在这部分补充另一个变量<code>mSideBarModel</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QTreeView* mSideBar;</span><br><span class="line">QStandardItemModel* mSideBarModel;</span><br></pre></td></tr></table></figure>
<p>创建成员函数<code>initSidebar()</code>来初始化侧边栏：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::initSidebar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 侧边栏 单元格属性设置</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;mSideBar-&gt;setEditTriggers(QTreeView::NoEditTriggers);   <span class="comment">//单元格不能编辑</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;mSideBar-&gt;setSelectionBehavior(QTreeView::SelectRows);  <span class="comment">//一次选中整行</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;mSideBar-&gt;setSelectionMode(QTreeView::SingleSelection); <span class="comment">//单选，配合上面的整行就是一次选单行</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;mSideBar-&gt;setAlternatingRowColors(<span class="literal">true</span>);                <span class="comment">//每间隔一行颜色不一样，当有qss时该属性无效</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;mSideBar-&gt;setFocusPolicy(Qt::NoFocus);                  <span class="comment">//去掉鼠标移到单元格上时的虚线框</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;mSideBar-&gt;header()-&gt;hide();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 初始化侧边栏模型</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;mSideBarModel = <span class="keyword">new</span> QStandardItemModel(<span class="keyword">this</span>-&gt;mSideBar);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 应用模型</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;mSideBar-&gt;setModel(<span class="keyword">this</span>-&gt;mSideBarModel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="显示文件夹下所有图片"><a href="#显示文件夹下所有图片" class="headerlink" title="显示文件夹下所有图片"></a>显示文件夹下所有图片</h2><p>创建一个类<code>ImageDir</code>用来存放文件夹名称及图片路径，同时暴露一些函数接口用于获取图片数量、图片信息：</p>
<p>ImageDir.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDir&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStringList&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFileInfoList&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QList&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageDir</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ImageDir(QString dirPath, QStringList filters = &#123; <span class="string">"*.jpg"</span>, <span class="string">"*.png"</span>, <span class="string">"*.jpeg"</span>, <span class="string">"*.tif"</span>, <span class="string">"*.bmp"</span> &#125;);</span><br><span class="line"></span><br><span class="line">	<span class="function">QList&lt;QString&gt; <span class="title">getImageNameList</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">QList&lt;QString&gt; <span class="title">getImagePathList</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">imageNum</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">QString <span class="title">dirPath</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">QString <span class="title">dirName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	QString mDirPath;</span><br><span class="line">	QFileInfoList mImageList;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>ImageDir.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ImageDir.h"</span></span></span><br><span class="line"></span><br><span class="line">ImageDir::ImageDir(QString dirPath, QStringList filters)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;mDirPath = dirPath;</span><br><span class="line"></span><br><span class="line">	QDir* dir = <span class="keyword">new</span> QDir(dirPath);</span><br><span class="line">	<span class="keyword">this</span>-&gt;mImageList = dir-&gt;entryInfoList(filters);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QList&lt;QString&gt; <span class="title">ImageDir::getImageNameList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mDirPath.isEmpty() || <span class="keyword">this</span>-&gt;mImageList.isEmpty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> QList&lt;QString&gt;();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	QList&lt;QString&gt; nameList;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;mImageList.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		nameList &lt;&lt; <span class="keyword">this</span>-&gt;mImageList.at(i).fileName();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> nameList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QList&lt;QString&gt; <span class="title">ImageDir::getImagePathList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mDirPath.isEmpty() || <span class="keyword">this</span>-&gt;mImageList.isEmpty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> QList&lt;QString&gt;();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	QList&lt;QString&gt; pathList;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;mImageList.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		pathList &lt;&lt; <span class="keyword">this</span>-&gt;mImageList.at(i).absoluteFilePath();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> pathList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ImageDir::imageNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mDirPath.isEmpty() || <span class="keyword">this</span>-&gt;mImageList.isEmpty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>-&gt;mImageList.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QString <span class="title">ImageDir::dirPath</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>-&gt;mDirPath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QString <span class="title">ImageDir::dirName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	QStringList dirPathSplitList = <span class="keyword">this</span>-&gt;mDirPath.split(<span class="string">"/"</span>);</span><br><span class="line">	<span class="keyword">if</span> (dirPathSplitList.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> QString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> dirPathSplitList.last();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在KvImage.cpp中引入<code>ImageDir</code>类（<code>#include &quot;ImageDir.h&quot;</code>），并添加变量存放图像文件夹（<code>QList&lt;ImageDir&gt; mImgDirList;</code>）</p>
<p>在Qt Designer中添加动作<code>action_open_directory</code>，打开文件夹。在<code>KvImage</code>类中添加其响应函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::on_action_open_directory_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	QString dirPath = QFileDialog::getExistingDirectory(<span class="keyword">this</span>,</span><br><span class="line">		QString::fromLocal8Bit(<span class="string">"打开文件夹"</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (dirPath.isEmpty())</span><br><span class="line">	&#123;</span><br><span class="line">		qWarning() &lt;&lt; QString::fromLocal8Bit(<span class="string">"KvImage::on_action_open_directory_triggered() - 未选择文件夹"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;mImgDirList.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (dirPath == <span class="keyword">this</span>-&gt;mImgDirList[i].dirPath())</span><br><span class="line">		&#123;</span><br><span class="line">			qWarning() &lt;&lt; QString::fromLocal8Bit(<span class="string">"%1 已打开"</span>).arg(dirPath);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>-&gt;mImgDirList.append(ImageDir(dirPath));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加函数<code>refreshSidebar</code>，根据成员变量<code>mImgDirList</code>刷新侧边栏：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::refreshSidebar</span><span class="params">(QList&lt;ImageDir&gt;&amp; imgDirList)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;mSideBarModel)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;initSidebar();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加数据</span></span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; imgDirList.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		QStandardItem* dirItem = <span class="keyword">new</span> QStandardItem(imgDirList[i].dirName());</span><br><span class="line">		<span class="keyword">this</span>-&gt;mSideBarModel-&gt;appendRow(dirItem);</span><br><span class="line"></span><br><span class="line">		QStringList imgNameList = imgDirList[i].getImageNameList();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; imgNameList.<span class="built_in">size</span>(); j++)</span><br><span class="line">		&#123;</span><br><span class="line">			dirItem-&gt;appendRow(<span class="keyword">new</span> QStandardItem(imgNameList.at(j)));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 展开最新添加的一行</span></span><br><span class="line">	QModelIndex rootIndex = <span class="keyword">this</span>-&gt;mSideBar-&gt;rootIndex();</span><br><span class="line">	QModelIndex lastRowIndex = <span class="keyword">this</span>-&gt;mSideBarModel-&gt;index(i - <span class="number">1</span>, <span class="number">0</span>, rootIndex);</span><br><span class="line">	<span class="keyword">this</span>-&gt;mSideBar-&gt;expand(lastRowIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，通过<code>rootIndex()</code>获取到根节点的索引，再根据根节点从模型中计算出位于<code>i-1</code>行<code>0</code>列的索引，即最新打开的文件夹索引，将其自动展开。</p>
<p>最后在打开文件夹的响应函数最后添加上如下代码，即可实现打开文件夹显示其所有图像文件到侧边栏的功能了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::on_action_open_directory_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;mImgDirList.append(ImageDir(dirPath));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>-&gt;refreshSidebar(<span class="keyword">this</span>-&gt;mImgDirList);</span><br><span class="line">	<span class="keyword">this</span>-&gt;putText(QString::fromLocal8Bit(<span class="string">"打开文件夹 - %1"</span>).arg(dirPath));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20210412202558286.png" alt="image-20210412202558286" style="zoom: 67%;" /></p>
<h2 id="侧边栏的点击事件"><a href="#侧边栏的点击事件" class="headerlink" title="侧边栏的点击事件"></a>侧边栏的点击事件</h2><blockquote>
<p><a href="https://blog.csdn.net/dpsying/article/details/80072916" target="_blank" rel="noopener">QTreeView使用总结5，选中信号处理</a></p>
</blockquote>
<p>将图片文件夹加载进来，下一步希望的是点击图片列表的名称后，自动在图片窗口中显示图片。QTreeView的内容由<a href="https://doc.qt.io/qt-5.12/qitemselectionmodel.html" target="_blank" rel="noopener">QItemSelectionModel</a>管理，通过接口函数<a href="https://doc.qt.io/qt-5.12/qabstractitemview.html#selectionModel" target="_blank" rel="noopener">selectionModel()</a>可以获得这个对象的指针。该对象提供了一些<a href="https://doc.qt.io/qt-5.12/qitemselectionmodel.html#signals" target="_blank" rel="noopener">信号</a>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">currentChanged</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;current, <span class="keyword">const</span> QModelIndex &amp;previous)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">currentColumnChanged</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;current, <span class="keyword">const</span> QModelIndex &amp;previous)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">currentRowChanged</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;current, <span class="keyword">const</span> QModelIndex &amp;previous)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modelChanged</span><span class="params">(QAbstractItemModel *model)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectionChanged</span><span class="params">(<span class="keyword">const</span> QItemSelection &amp;selected, <span class="keyword">const</span> QItemSelection &amp;deselected)</span></span></span><br></pre></td></tr></table></figure>
<p>其中，<code>currentChanged</code>处理单个元素，区分行列；<code>currentColumnChanged</code>仅区分列；<code>currentRowChanged</code>仅区分行；<code>selectionChanged</code>可以处理多选的情况。在图片列表中，一个图片占一行，因此用<code>currentRowChanged</code>即可满足需求。</p>
<p>设定处理选中的槽函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onImageSelectChanged</span><span class="params">(<span class="keyword">const</span> QModelIndex&amp; curIdx, <span class="keyword">const</span> QModelIndex&amp; preIdx)</span></span>;</span><br></pre></td></tr></table></figure>
<p>绑定信号和槽：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">KvImage::KvImage(QWidget* parent) : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">	<span class="comment">// 绑定信号和槽</span></span><br><span class="line">	<span class="built_in">connect</span>(<span class="keyword">this</span>-&gt;mSideBar-&gt;selectionModel(), &amp;QItemSelectionModel::currentRowChanged, <span class="keyword">this</span>, &amp;KvImage::onImageSelectChanged);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在槽函数中，根据传回来的行信号取得图片信息，再查询图片文件夹列表获取图片的完整路径，最后调用<code>iViewer-&gt;openImage()</code>打开图像并显示。槽函数的实现如下所示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::onImageSelectChanged</span><span class="params">(<span class="keyword">const</span> QModelIndex&amp; curIdx, <span class="keyword">const</span> QModelIndex&amp; preIdx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 如果没有父节点，说明是根节点</span></span><br><span class="line">	QModelIndex parentIdx = curIdx.parent();</span><br><span class="line">	<span class="keyword">if</span> (!parentIdx.<span class="built_in">isValid</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取图片路径</span></span><br><span class="line">	QStandardItem* item = ((QStandardItemModel*)<span class="keyword">this</span>-&gt;mSideBar-&gt;model())-&gt;itemFromIndex(curIdx);</span><br><span class="line">	QString imgPath = QString(<span class="string">"%1/%2"</span>)</span><br><span class="line">		.arg(<span class="keyword">this</span>-&gt;mImgDirList[parentIdx.row()].dirPath())</span><br><span class="line">		.arg(item-&gt;<span class="built_in">text</span>());</span><br><span class="line">	</span><br><span class="line">	qDebug() &lt;&lt; QString::fromLocal8Bit(<span class="string">"KvImage::onImageSelectChanged() - 选择图像: %1"</span>)</span><br><span class="line">		.arg(imgPath);</span><br><span class="line">	<span class="keyword">this</span>-&gt;iViewer-&gt;openImage(imgPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="底部信息栏"><a href="#底部信息栏" class="headerlink" title="底部信息栏"></a>底部信息栏</h1><p>底部信息栏用的是<code>QTextBrowser</code>，其实主要调用的接口都继承于<code>QTextEdit</code>，用哪一个都行，在这里作为文字输出控件来说没太大影响。</p>
<p>在窗体的构造函数中设置信息栏允许打开外部链接：在输出HTML文本的a标签时，可以直接打开（不过暂不支持链接包含中文，考虑自己写一个类来覆盖原有事件<a href="https://doc.qt.io/qt-5.12/qtextbrowser.html#anchorClicked" target="_blank" rel="noopener">anchorClicked</a>）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;mInfoBar-&gt;setOpenExternalLinks(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>在打开图像按钮事件函数中添加输出到信息栏的功能：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::on_action_open_image_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;iViewer-&gt;openImage(fileName);</span><br><span class="line">	<span class="keyword">this</span>-&gt;mInfoBar-&gt;textCursor().insertText(</span><br><span class="line">		QString::fromLocal8Bit(<span class="string">"打开图像：%1\n"</span>).arg(fileName));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加文字通过操作<code>QTextBrowser</code>的<code>textCursor</code>来实现，<a href="https://doc.qt.io/qt-5.12/qtextcursor.html" target="_blank" rel="noopener">文档</a>。</p>
<p>甚至可以直接插入图像：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;mInfoBar-&gt;textCursor().insertImage(fileName);</span><br></pre></td></tr></table></figure>
<p>还是很不错的！</p>
<p>封装成一个函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::putText</span><span class="params">(QString txt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;mInfoBar) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	QString logStr = QString(<span class="string">"(%1) - %2\n"</span>)</span><br><span class="line">		.arg(QDateTime::currentDateTime().toString(<span class="string">"yyyy-MM-dd hh:mm:ss ddd"</span>))  <span class="comment">// 时间</span></span><br><span class="line">		.arg(txt);  <span class="comment">// 消息内容</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>-&gt;mInfoBar-&gt;textCursor().insertText(logStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>关于二维旋转的理解</title>
    <url>/2021/04/27/%E5%85%B3%E4%BA%8E%E4%BA%8C%E7%BB%B4%E6%97%8B%E8%BD%AC%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="关于二维旋转的理解"><a href="#关于二维旋转的理解" class="headerlink" title="关于二维旋转的理解"></a>关于二维旋转的理解</h1><p><img src="/images/image-20210427183223906.png" alt="image-20210427183223906" style="zoom:50%;"></p>
<p>有这样一张图，解释了二维空间旋转变换的过程，解读如下：变换后的坐标<script type="math/tex">(x',y')</script>与原坐标<script type="math/tex">(x,y)</script>之间的关系可以理解为坐标轴旋转引起的，坐标轴<script type="math/tex">xy</script>逆时针旋转<script type="math/tex">\alpha</script>角后变为<script type="math/tex">x'y'</script>，相应地，点<script type="math/tex">a(x,y)</script>在新的坐标系下的坐标为<script type="math/tex">(x',y')</script>，新旧坐标的关系如下所示：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}x\\y\end{bmatrix}=\begin{bmatrix}\cos\alpha & -\sin\alpha\\\sin\alpha & \cos\alpha\end{bmatrix}\begin{bmatrix}x'\\y'\end{bmatrix}</script><p>大致意思可以概括为：变换后的坐标经由旋转角构成的矩阵相乘后得到变换前的坐标。</p>
<p>之前只理解到这个层面，导致运算的时候非常混乱，在进一步推导其他公式的时候总是在想坐标轴变换以及变换前由变换后相乘得到，越想越乱。</p>
<p>后来进一步思考发现，可以干脆认为坐标轴就是不变的，上述描述中的从<script type="math/tex">a'</script>到<script type="math/tex">a</script>可以看作是同个坐标轴下的变换，如下图所示。</p>
<p><img src="/images/image-20210427195333580.png" alt="image-20210427195333580" style="zoom:50%;"></p>
<p>在同一个坐标轴下从<script type="math/tex">a'</script>变换到<script type="math/tex">a</script>的绕原点旋转变换可以理解为上图表示的绕坐标轴的变换，二者的计算公式一至。</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>从1到2：添加绘图、缩放、表格操作等内容</title>
    <url>/2021/05/04/%E4%BB%8E1%E5%88%B02-%E6%B7%BB%E5%8A%A0%E7%BB%98%E5%9B%BE-%E7%BC%A9%E6%94%BE-%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C%E7%AD%89%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<p><img src="/images/KvImage-v3.0.gif" alt="KvImage-v3.0"></p>
<h1 id="修改QAction"><a href="#修改QAction" class="headerlink" title="修改QAction"></a>修改QAction</h1><p>在代码中控制界面菜单的QAction内容，如替换文字、设置可选、设置样式等。</p>
<h2 id="获取action"><a href="#获取action" class="headerlink" title="获取action"></a>获取action</h2><p>通过<code>ui.[action_name]</code>获取，如：<code>ui.action_open_image</code></p>
<h2 id="获取-amp-修改文字"><a href="#获取-amp-修改文字" class="headerlink" title="获取&amp;修改文字"></a>获取&amp;修改文字</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;ui.action_open_image-&gt;<span class="built_in">text</span>();</span><br><span class="line"><span class="keyword">this</span>-&gt;ui.action_open_image-&gt;setText(QString::fromLocal8Bit(<span class="string">"哈哈哈"</span>));</span><br></pre></td></tr></table></figure>
<h2 id="设置是否可选"><a href="#设置是否可选" class="headerlink" title="设置是否可选"></a>设置是否可选</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;ui.action_open_image-&gt;setEnabled(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<h2 id="遍历一个QMenu下的所有QAction"><a href="#遍历一个QMenu下的所有QAction" class="headerlink" title="遍历一个QMenu下的所有QAction"></a>遍历一个QMenu下的所有QAction</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">foreach(QAction * action, <span class="keyword">this</span>-&gt;ui.menu_2-&gt;actions())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (action-&gt;isSeparator()) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (action == <span class="keyword">this</span>-&gt;ui.action_draw_point) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    action-&gt;setEnabled(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="鼠标滚轮事件"><a href="#鼠标滚轮事件" class="headerlink" title="鼠标滚轮事件"></a>鼠标滚轮事件</h1><h2 id="判断当前按钮"><a href="#判断当前按钮" class="headerlink" title="判断当前按钮"></a>判断当前按钮</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageViewer::wheelEvent</span><span class="params">(QWheelEvent* evt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果当前按下的按钮是鼠标左键</span></span><br><span class="line">    <span class="keyword">if</span> (evt-&gt;buttons() &amp; Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// TODO...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="缩放控制"><a href="#缩放控制" class="headerlink" title="缩放控制"></a>缩放控制</h2><p>应对两种情况：缩放过小和放大过大，进行了两个控制</p>
<ol>
<li>缩小时不允许小于某个窗口比例（例如0.5）。缩小过小时，长宽均小于比例时，按矩形与窗口对应边的比例较大的那个来。例如矩形长比窗口长为0.3，宽之比为0.5，那么以宽为主；否则反之。</li>
<li>放大时显示窗口映射到原图范围不大于某个像素值（例如100像素）。放大过大时，显示区映射到图像上矩形长宽任意一个小于限定值时，需要进行拉伸，保证大于限定值。例如，放大后显示区矩形映射到图像上宽度为90，高度为80，限定值为100，那么要求两个都大于100。调整后显示区高度应该为100，宽度为112.5，保证都大于限定值。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	QLabel* mLabel;</span><br><span class="line">	cv::Mat mImg;</span><br><span class="line">	cv::Rect mRect;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageViewer::wheelEvent</span><span class="params">(QWheelEvent* evt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 接收事件，不往下传递</span></span><br><span class="line">	evt-&gt;accept();</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mImg.data)</span><br><span class="line">	&#123;</span><br><span class="line">		qDebug() &lt;&lt; <span class="string">"angleDelta: "</span> &lt;&lt; evt-&gt;angleDelta().y();  <span class="comment">// angleDelta:  QPoint(0,120)</span></span><br><span class="line"></span><br><span class="line">		QPointF pt = evt-&gt;posF();    <span class="comment">// 鼠标中心点</span></span><br><span class="line">		<span class="keyword">double</span> delta = <span class="number">0.1</span>;          <span class="comment">// 缩放系数</span></span><br><span class="line">		delta *= <span class="keyword">double</span>(evt-&gt;angleDelta().y()) / <span class="number">8</span> / <span class="number">15</span>;  <span class="comment">// 向上滚为正，放大；向下滚为负，缩小</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> winHeight, winWidth;</span><br><span class="line">		cv::Rect nRect;</span><br><span class="line">		<span class="keyword">double</span> imgMinZoomRatio = <span class="number">0.5</span>;         <span class="comment">// 最小缩小到原来的几倍</span></span><br><span class="line">		<span class="keyword">double</span> imgMaxZoomPx = <span class="number">100</span>;            <span class="comment">// 最大放大到多少像素</span></span><br><span class="line">		<span class="keyword">double</span> x0 = pt.x(),   <span class="comment">// 鼠标窗口坐标</span></span><br><span class="line">			y0 = pt.y(),</span><br><span class="line">			x1 = <span class="keyword">double</span>(<span class="keyword">this</span>-&gt;mRect.x),  <span class="comment">// 矩形左上角</span></span><br><span class="line">			y1 = <span class="keyword">double</span>(<span class="keyword">this</span>-&gt;mRect.y);</span><br><span class="line">		winHeight = <span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">height</span>();</span><br><span class="line">		winWidth = <span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">width</span>();</span><br><span class="line">		<span class="comment">// 先计算目标区域图像矩形</span></span><br><span class="line">		nRect.<span class="built_in">width</span> = cvRound(<span class="keyword">double</span>(<span class="keyword">this</span>-&gt;mRect.<span class="built_in">width</span>) * (<span class="number">1</span> + delta));</span><br><span class="line">		nRect.<span class="built_in">height</span> = cvRound(<span class="keyword">double</span>(<span class="keyword">this</span>-&gt;mRect.<span class="built_in">height</span>) * (<span class="number">1</span> + delta));</span><br><span class="line">		nRect.x = cvRound(x0 + (x1 - x0) * (<span class="number">1</span> + delta));</span><br><span class="line">		nRect.y = cvRound(y0 + (y1 - y0) * (<span class="number">1</span> + delta));</span><br><span class="line">		<span class="comment">// 根据计算结果优化矩形</span></span><br><span class="line">		<span class="comment">// 1. 缩小过小时，长宽均小于比例时，按矩形与窗口对应边的比例较大的那个来。</span></span><br><span class="line">		<span class="comment">// 例如矩形长比窗口长为0.3，宽之比为0.5，那么以宽为主；否则反之。</span></span><br><span class="line">		<span class="keyword">double</span> imgRectWidthZoomRatio = <span class="keyword">double</span>(nRect.<span class="built_in">width</span>) / <span class="keyword">double</span>(winWidth);</span><br><span class="line">		<span class="keyword">double</span> imgRectHeightZoomRatio = <span class="keyword">double</span>(nRect.<span class="built_in">height</span>) / <span class="keyword">double</span>(winHeight);</span><br><span class="line">		<span class="keyword">if</span> (imgRectWidthZoomRatio &lt; imgMinZoomRatio &amp;&amp; imgRectHeightZoomRatio &lt; imgMinZoomRatio)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (imgRectWidthZoomRatio &gt;= imgRectHeightZoomRatio)</span><br><span class="line">			&#123;</span><br><span class="line">				delta = <span class="keyword">double</span>(winWidth) * imgMinZoomRatio / <span class="keyword">double</span>(<span class="keyword">this</span>-&gt;mRect.<span class="built_in">width</span>) - <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> delta = <span class="keyword">double</span>(winHeight) * imgMinZoomRatio / <span class="keyword">double</span>(<span class="keyword">this</span>-&gt;mRect.<span class="built_in">height</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">			nRect.<span class="built_in">width</span> = cvRound(<span class="keyword">double</span>(<span class="keyword">this</span>-&gt;mRect.<span class="built_in">width</span>) * (<span class="number">1</span> + delta));</span><br><span class="line">			nRect.<span class="built_in">height</span> = cvRound(<span class="keyword">double</span>(<span class="keyword">this</span>-&gt;mRect.<span class="built_in">height</span>) * (<span class="number">1</span> + delta));</span><br><span class="line">			nRect.x = winWidth / <span class="number">2</span> - nRect.<span class="built_in">width</span> / <span class="number">2</span>;</span><br><span class="line">			nRect.y = winHeight / <span class="number">2</span> - nRect.<span class="built_in">height</span> / <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 2. 放大过大时，显示区映射到图像上矩形长宽任意一个小于限定值时，需要进行拉伸，保证大于限定值</span></span><br><span class="line">		<span class="comment">// 例如，放大后显示区矩形映射到图像上宽度为90，高度为80，限定值为100，那么要求两个都大于100</span></span><br><span class="line">		<span class="comment">// 调整后显示区高度应该为100，宽度为112.5，保证都大于限定值</span></span><br><span class="line">		<span class="keyword">double</span> imgRectRawImageWidth = <span class="keyword">double</span>(winWidth) / <span class="keyword">double</span>(nRect.<span class="built_in">width</span>) * <span class="keyword">double</span>(<span class="keyword">this</span>-&gt;mImg.cols);</span><br><span class="line">		<span class="keyword">double</span> imgRectRawImageHeight = <span class="keyword">double</span>(winHeight) / <span class="keyword">double</span>(nRect.<span class="built_in">height</span>) * <span class="keyword">double</span>(<span class="keyword">this</span>-&gt;mImg.rows);</span><br><span class="line">		<span class="keyword">if</span> (imgRectRawImageWidth &lt; imgMaxZoomPx || imgRectRawImageHeight &lt; imgMaxZoomPx)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">double</span> zoomRatio;</span><br><span class="line">			<span class="keyword">if</span> (imgRectRawImageWidth &lt;= imgRectRawImageHeight)</span><br><span class="line">			&#123;</span><br><span class="line">				zoomRatio = imgRectRawImageWidth / imgMaxZoomPx;</span><br><span class="line">			&#125; <span class="keyword">else</span> zoomRatio = imgRectRawImageHeight / imgMaxZoomPx;</span><br><span class="line"></span><br><span class="line">			nRect.<span class="built_in">width</span> = <span class="keyword">double</span>(nRect.<span class="built_in">width</span>) * zoomRatio;</span><br><span class="line">			nRect.<span class="built_in">height</span> = <span class="keyword">double</span>(nRect.<span class="built_in">height</span>) * zoomRatio;</span><br><span class="line">			nRect.x = cvRound(x0 + (nRect.x - x0) * (zoomRatio));</span><br><span class="line">			nRect.y = cvRound(y0 + (nRect.y - y0) * (zoomRatio));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mRect == nRect) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;mRect = nRect;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="矢量绘图功能"><a href="#矢量绘图功能" class="headerlink" title="矢量绘图功能"></a>矢量绘图功能</h1><p>针对视图类<code>ImageViewer</code>添加绘图功能。绘图功能包括：画点、画线、画矩形、画旋转矩形等。自由涂鸦暂不考虑。</p>
<h2 id="存储绘图图形数据的变量"><a href="#存储绘图图形数据的变量" class="headerlink" title="存储绘图图形数据的变量"></a>存储绘图图形数据的变量</h2><p>存放在视图类中的几何图形数据主要用来显示，不设计过多的存储机制。</p>
<p>注意这里的<code>mImgStartX</code>等变量专门用来存储鼠标移动的点在图像上的坐标。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> mImgStartX, mImgStartY, mImgEndX, mImgEndY;  <span class="comment">// 用于记录起止点在图像上的坐标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> isDrawPoint,</span><br><span class="line">    isDrawLine,</span><br><span class="line">    isDrawRectangle,</span><br><span class="line">    isDrawRotateRectangle;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2d&gt; mPts;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Vec4d&gt; mLines;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Rect2d&gt; mRects;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;RotRect2D&gt; mRotRects;</span><br></pre></td></tr></table></figure>
<h2 id="类接口：启动和关闭绘图"><a href="#类接口：启动和关闭绘图" class="headerlink" title="类接口：启动和关闭绘图"></a>类接口：启动和关闭绘图</h2><p>视图类初始化后，通过这两个函数启动关闭其绘图功能。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageViewer::startDrawPoint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;isDrawing())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;isDrawPoint = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;mPts.<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageViewer::stopDrawPoint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;isDrawPoint = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;showImage(<span class="keyword">this</span>-&gt;mImg, <span class="keyword">this</span>-&gt;mRect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="静态函数：在图像上绘制图形"><a href="#静态函数：在图像上绘制图形" class="headerlink" title="静态函数：在图像上绘制图形"></a>静态函数：在图像上绘制图形</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*在img上绘制各种图形*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawPoint</span><span class="params">(cv::Mat&amp; img, <span class="keyword">const</span> cv::Point2d&amp; pt, <span class="keyword">const</span> cv::Scalar&amp; color = cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="keyword">const</span> <span class="keyword">double</span> crossLength = <span class="number">10.0</span>, <span class="keyword">const</span> <span class="keyword">double</span> lineWidth = <span class="number">1.0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawLine</span><span class="params">(cv::Mat&amp; img, <span class="keyword">const</span> cv::Vec4d&amp; <span class="built_in">line</span>, <span class="keyword">const</span> cv::Scalar&amp; color = cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="keyword">const</span> <span class="keyword">double</span> lineWidth = <span class="number">1.0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawRectangle</span><span class="params">(cv::Mat&amp; img, <span class="keyword">const</span> cv::Rect2d&amp; <span class="built_in">rect</span>, <span class="keyword">const</span> cv::Scalar&amp; color = cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="keyword">const</span> <span class="keyword">double</span> lineWidth = <span class="number">1.0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawRotateRectangle</span><span class="params">(cv::Mat&amp; img, <span class="keyword">const</span> RotRect2D&amp; rotRect, <span class="keyword">const</span> cv::Scalar&amp; color = cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="keyword">const</span> <span class="keyword">double</span> lineWidth = <span class="number">1.0</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="图形绘制后触发的事件"><a href="#图形绘制后触发的事件" class="headerlink" title="图形绘制后触发的事件"></a>图形绘制后触发的事件</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">signals:</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">drawNewPoint</span><span class="params">(<span class="keyword">const</span> cv::Point2d&amp; pt)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">drawNewLine</span><span class="params">(<span class="keyword">const</span> cv::Vec4d&amp; <span class="built_in">line</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">drawNewRectangle</span><span class="params">(<span class="keyword">const</span> cv::Rect2d&amp; <span class="built_in">rect</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">drawNewRotateRectangle</span><span class="params">(<span class="keyword">const</span> RotRect2D&amp; rotRect)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="在图像窗口显示带矢量图形的图片"><a href="#在图像窗口显示带矢量图形的图片" class="headerlink" title="在图像窗口显示带矢量图形的图片"></a>在图像窗口显示带矢量图形的图片</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*显示带有矢量图形的图片，适量坐标均为图像坐标，绘制后调用showImage()*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showImageWithPoints</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; img, <span class="keyword">const</span> cv::Rect&amp; imgRect, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2d&gt;&amp; pts, <span class="keyword">const</span> cv::Scalar&amp; pointColor = cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showImageWithLines</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; img, <span class="keyword">const</span> cv::Rect&amp; imgRect, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Vec4d&gt;&amp; lines, <span class="keyword">const</span> cv::Scalar&amp; lineColor = cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showImageWithRectangles</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; img, <span class="keyword">const</span> cv::Rect&amp; imgRect, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Rect2d&gt;&amp; rects, <span class="keyword">const</span> cv::Scalar&amp; lineColor = cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showImageWithRotateRectangles</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; img, <span class="keyword">const</span> cv::Rect&amp; imgRect, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;RotRect2D&gt;&amp; rotRects, <span class="keyword">const</span> cv::Scalar&amp; lineColor = cv::Scalar(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="绘图的关键：鼠标事件"><a href="#绘图的关键：鼠标事件" class="headerlink" title="绘图的关键：鼠标事件"></a>绘图的关键：鼠标事件</h2><p>鼠标按下后记录图像坐标（如果在图像内），移动时根据是否在绘图更新鼠标坐标，鼠标抬起时记录绘图结果。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageViewer::mousePressEvent</span><span class="params">(QMouseEvent* evt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 接收事件，不往下传递</span></span><br><span class="line">	evt-&gt;accept();</span><br><span class="line">	QPointF pt = evt-&gt;localPos();</span><br><span class="line">	<span class="keyword">this</span>-&gt;msX = <span class="keyword">this</span>-&gt;meX = pt.x();</span><br><span class="line">	<span class="keyword">this</span>-&gt;msY = <span class="keyword">this</span>-&gt;meY = pt.y();</span><br><span class="line">	qDebug() &lt;&lt; QString(<span class="string">"ImageViewer::mousePressEvent() - (x=%1, y=%2)"</span>)</span><br><span class="line">		.arg(<span class="keyword">this</span>-&gt;msX).arg(<span class="keyword">this</span>-&gt;msY);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mImg.data &amp;&amp; <span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">height</span>() &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">width</span>() &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		px p;</span><br><span class="line">		<span class="keyword">if</span> (Calc2D::getPxFromImage(p, cv::Point(<span class="keyword">this</span>-&gt;meX, <span class="keyword">this</span>-&gt;meY), <span class="keyword">this</span>-&gt;mImg, <span class="keyword">this</span>-&gt;mRect))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;mImgStartX = <span class="keyword">this</span>-&gt;mImgEndX = p.x;</span><br><span class="line">			<span class="keyword">this</span>-&gt;mImgStartY = <span class="keyword">this</span>-&gt;mImgEndY = p.y;</span><br><span class="line">			<span class="function">emit <span class="title">imageMouseMoveEvent</span><span class="params">(p)</span></span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;isDrawPoint)</span><br><span class="line">			&#123;</span><br><span class="line">				cv::Mat frame = <span class="keyword">this</span>-&gt;mImg.clone();</span><br><span class="line">				<span class="keyword">this</span>-&gt;drawPoint(frame, cv::Point2d(p.x, p.y));</span><br><span class="line">				<span class="keyword">this</span>-&gt;showImageWithPoints(frame, <span class="keyword">this</span>-&gt;mRect, <span class="keyword">this</span>-&gt;mPts);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;isDrawLine)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;isDrawRectangle)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;isDrawRotateRectangle)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ImageViewer::mouseMoveEvent(QMouseEvent* evt)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 接收事件，不往下传递</span></span><br><span class="line">	evt-&gt;accept();</span><br><span class="line"></span><br><span class="line">	QPointF pt = evt-&gt;localPos();</span><br><span class="line">	<span class="keyword">this</span>-&gt;meX = pt.x();</span><br><span class="line">	<span class="keyword">this</span>-&gt;meY = pt.y();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mImg.data &amp;&amp; <span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">height</span>() &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">width</span>() &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 如果在绘图时取不到像素点，则退出；一般情况下取不到像素点可能是在移动图像</span></span><br><span class="line">		px p;</span><br><span class="line">		<span class="keyword">if</span> (!Calc2D::getPxFromImage(p, cv::Point(<span class="keyword">this</span>-&gt;meX, <span class="keyword">this</span>-&gt;meY), <span class="keyword">this</span>-&gt;mImg, <span class="keyword">this</span>-&gt;mRect)</span><br><span class="line">            &amp;&amp; <span class="keyword">this</span>-&gt;isDrawing())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">this</span>-&gt;mImgEndX = p.x;</span><br><span class="line">		<span class="keyword">this</span>-&gt;mImgEndY = p.y;</span><br><span class="line">		<span class="function">emit <span class="title">imageMouseMoveEvent</span><span class="params">(p)</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 绘图时窗口不变，因此不需要考虑图像矩形位置变化</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;isDrawPoint)</span><br><span class="line">		&#123;</span><br><span class="line">			cv::Mat frame = <span class="keyword">this</span>-&gt;mImg.clone();</span><br><span class="line">			<span class="keyword">this</span>-&gt;drawPoint(frame, cv::Point2d(<span class="keyword">this</span>-&gt;mImgEndX, <span class="keyword">this</span>-&gt;mImgEndY));</span><br><span class="line">			<span class="keyword">this</span>-&gt;showImageWithPoints(frame, <span class="keyword">this</span>-&gt;mRect, <span class="keyword">this</span>-&gt;mPts);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;isDrawLine)</span><br><span class="line">		&#123;</span><br><span class="line">			cv::Mat frame = <span class="keyword">this</span>-&gt;mImg.clone();</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">abs</span>(<span class="keyword">this</span>-&gt;mImgStartX - <span class="keyword">this</span>-&gt;mImgEndX) &gt; <span class="number">1e-5</span> || <span class="built_in">abs</span>(<span class="keyword">this</span>-&gt;mImgStartY - <span class="keyword">this</span>-&gt;mImgEndY) &gt; <span class="number">1e-5</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">this</span>-&gt;drawLine(frame, cv::Vec4d(<span class="keyword">this</span>-&gt;mImgStartX, <span class="keyword">this</span>-&gt;mImgStartY, <span class="keyword">this</span>-&gt;mImgEndX, <span class="keyword">this</span>-&gt;mImgEndY));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>-&gt;showImageWithLines(frame, <span class="keyword">this</span>-&gt;mRect, <span class="keyword">this</span>-&gt;mLines);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;isDrawRectangle)</span><br><span class="line">		&#123;</span><br><span class="line">			cv::Mat frame = <span class="keyword">this</span>-&gt;mImg.clone();</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">abs</span>(<span class="keyword">this</span>-&gt;mImgStartX - <span class="keyword">this</span>-&gt;mImgEndX) &gt; <span class="number">1e-5</span> || <span class="built_in">abs</span>(<span class="keyword">this</span>-&gt;mImgStartY - <span class="keyword">this</span>-&gt;mImgEndY) &gt; <span class="number">1e-5</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">double</span> x1, y1, x2, y2;</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mImgStartX &lt;= <span class="keyword">this</span>-&gt;mImgEndX)</span><br><span class="line">				&#123;</span><br><span class="line">					x1 = <span class="keyword">this</span>-&gt;mImgStartX;</span><br><span class="line">					x2 = <span class="keyword">this</span>-&gt;mImgEndX;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					x1 = <span class="keyword">this</span>-&gt;mImgEndX;</span><br><span class="line">					x2 = <span class="keyword">this</span>-&gt;mImgStartX;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mImgStartY &lt;= <span class="keyword">this</span>-&gt;mImgEndY)</span><br><span class="line">				&#123;</span><br><span class="line">					y1 = <span class="keyword">this</span>-&gt;mImgStartY;</span><br><span class="line">					y2 = <span class="keyword">this</span>-&gt;mImgEndY;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					y1 = <span class="keyword">this</span>-&gt;mImgEndY;</span><br><span class="line">					y2 = <span class="keyword">this</span>-&gt;mImgStartY;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">this</span>-&gt;drawRectangle(frame, cv::Rect2d(x1, y1, x2 - x1, y2 - y1));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>-&gt;showImageWithRectangles(frame, <span class="keyword">this</span>-&gt;mRect, <span class="keyword">this</span>-&gt;mRects);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;isDrawRotateRectangle)</span><br><span class="line">		&#123;</span><br><span class="line">			cv::Mat frame = <span class="keyword">this</span>-&gt;mImg.clone();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">abs</span>(<span class="keyword">this</span>-&gt;mImgStartX - <span class="keyword">this</span>-&gt;mImgEndX) &gt; <span class="number">1e-5</span> || <span class="built_in">abs</span>(<span class="keyword">this</span>-&gt;mImgStartY - <span class="keyword">this</span>-&gt;mImgEndY) &gt; <span class="number">1e-5</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="function">RotRect2D <span class="title">rotRect</span><span class="params">(cv::Vec4d(<span class="keyword">this</span>-&gt;mImgStartX, <span class="keyword">this</span>-&gt;mImgStartY, <span class="keyword">this</span>-&gt;mImgEndX, <span class="keyword">this</span>-&gt;mImgEndY))</span></span>;</span><br><span class="line">				<span class="keyword">this</span>-&gt;drawRotateRectangle(frame, rotRect);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>-&gt;showImageWithRotateRectangles(frame, <span class="keyword">this</span>-&gt;mRect, <span class="keyword">this</span>-&gt;mRotRects);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			cv::Rect tRect = <span class="keyword">this</span>-&gt;mRect;</span><br><span class="line">			tRect.x += (<span class="keyword">this</span>-&gt;meX - <span class="keyword">this</span>-&gt;msX);</span><br><span class="line">			tRect.y += (<span class="keyword">this</span>-&gt;meY - <span class="keyword">this</span>-&gt;msY);</span><br><span class="line">			<span class="keyword">this</span>-&gt;showImage(<span class="keyword">this</span>-&gt;mImg, tRect);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ImageViewer::mouseReleaseEvent</span><span class="params">(QMouseEvent* evt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 接收事件，不往下传递</span></span><br><span class="line">	evt-&gt;accept();</span><br><span class="line">	QPointF pt = evt-&gt;localPos();</span><br><span class="line">	<span class="keyword">this</span>-&gt;meX = pt.x();</span><br><span class="line">	<span class="keyword">this</span>-&gt;meY = pt.y();</span><br><span class="line">	qDebug() &lt;&lt; QString(<span class="string">"ImageViewer::mouseReleaseEvent() - (x=%1, y=%2)"</span>)</span><br><span class="line">		.arg(<span class="keyword">this</span>-&gt;meX).arg(<span class="keyword">this</span>-&gt;meY);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mImg.data &amp;&amp; <span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">height</span>() &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>-&gt;mLabel-&gt;<span class="built_in">width</span>() &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		px p;</span><br><span class="line">		<span class="keyword">if</span> (!Calc2D::getPxFromImage(p, cv::Point(<span class="keyword">this</span>-&gt;meX, <span class="keyword">this</span>-&gt;meY), <span class="keyword">this</span>-&gt;mImg, <span class="keyword">this</span>-&gt;mRect))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">this</span>-&gt;mImgEndX = p.x;</span><br><span class="line">		<span class="keyword">this</span>-&gt;mImgEndY = p.y;</span><br><span class="line">		<span class="function">emit <span class="title">imageMouseMoveEvent</span><span class="params">(p)</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;isDrawPoint)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="function">cv::Point2d <span class="title">nPt</span><span class="params">(<span class="keyword">this</span>-&gt;mImgEndX, <span class="keyword">this</span>-&gt;mImgEndY)</span></span>;</span><br><span class="line">			<span class="keyword">this</span>-&gt;mPts.push_back(nPt);</span><br><span class="line">			<span class="function">emit <span class="title">drawNewPoint</span><span class="params">(nPt)</span></span>;</span><br><span class="line">			<span class="keyword">this</span>-&gt;showImageWithPoints(<span class="keyword">this</span>-&gt;mImg, <span class="keyword">this</span>-&gt;mRect, <span class="keyword">this</span>-&gt;mPts);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;isDrawLine)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">abs</span>(<span class="keyword">this</span>-&gt;mImgStartX - <span class="keyword">this</span>-&gt;mImgEndX) &gt; <span class="number">1e-5</span> || <span class="built_in">abs</span>(<span class="keyword">this</span>-&gt;mImgStartY - <span class="keyword">this</span>-&gt;mImgEndY) &gt; <span class="number">1e-5</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				cv::Vec4d nLine(<span class="keyword">this</span>-&gt;mImgStartX, <span class="keyword">this</span>-&gt;mImgStartY, <span class="keyword">this</span>-&gt;mImgEndX, <span class="keyword">this</span>-&gt;mImgEndY);</span><br><span class="line">				<span class="function">emit <span class="title">drawNewLine</span><span class="params">(nLine)</span></span>;</span><br><span class="line">				<span class="keyword">this</span>-&gt;mLines.push_back(nLine);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>-&gt;showImageWithLines(<span class="keyword">this</span>-&gt;mImg, <span class="keyword">this</span>-&gt;mRect, <span class="keyword">this</span>-&gt;mLines);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;isDrawRectangle)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">abs</span>(<span class="keyword">this</span>-&gt;mImgStartX - <span class="keyword">this</span>-&gt;mImgEndX) &gt; <span class="number">1e-5</span> || <span class="built_in">abs</span>(<span class="keyword">this</span>-&gt;mImgStartY - <span class="keyword">this</span>-&gt;mImgEndY) &gt; <span class="number">1e-5</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">double</span> x1, y1, x2, y2;</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mImgStartX &lt;= <span class="keyword">this</span>-&gt;mImgEndX)</span><br><span class="line">				&#123;</span><br><span class="line">					x1 = <span class="keyword">this</span>-&gt;mImgStartX;</span><br><span class="line">					x2 = <span class="keyword">this</span>-&gt;mImgEndX;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					x1 = <span class="keyword">this</span>-&gt;mImgEndX;</span><br><span class="line">					x2 = <span class="keyword">this</span>-&gt;mImgStartX;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mImgStartY &lt;= <span class="keyword">this</span>-&gt;mImgEndY)</span><br><span class="line">				&#123;</span><br><span class="line">					y1 = <span class="keyword">this</span>-&gt;mImgStartY;</span><br><span class="line">					y2 = <span class="keyword">this</span>-&gt;mImgEndY;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					y1 = <span class="keyword">this</span>-&gt;mImgEndY;</span><br><span class="line">					y2 = <span class="keyword">this</span>-&gt;mImgStartY;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="function">cv::Rect2d <span class="title">nRect</span><span class="params">(x1, y1, x2 - x1, y2 - y1)</span></span>;</span><br><span class="line">				<span class="function">emit <span class="title">drawNewRectangle</span><span class="params">(nRect)</span></span>;</span><br><span class="line">				<span class="keyword">this</span>-&gt;mRects.push_back(nRect);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">this</span>-&gt;showImageWithRectangles(<span class="keyword">this</span>-&gt;mImg, <span class="keyword">this</span>-&gt;mRect, <span class="keyword">this</span>-&gt;mRects);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;isDrawRotateRectangle)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">abs</span>(<span class="keyword">this</span>-&gt;mImgStartX - <span class="keyword">this</span>-&gt;mImgEndX) &gt; <span class="number">1e-5</span> || <span class="built_in">abs</span>(<span class="keyword">this</span>-&gt;mImgStartY - <span class="keyword">this</span>-&gt;mImgEndY) &gt; <span class="number">1e-5</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				RotRect2D nRotRect(cv::Vec4d(<span class="keyword">this</span>-&gt;mImgStartX, <span class="keyword">this</span>-&gt;mImgStartY, <span class="keyword">this</span>-&gt;mImgEndX, <span class="keyword">this</span>-&gt;mImgEndY));</span><br><span class="line">				<span class="function">emit <span class="title">drawNewRotateRectangle</span><span class="params">(nRotRect)</span></span>;</span><br><span class="line">				<span class="keyword">this</span>-&gt;mRotRects.push_back(nRotRect);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>-&gt;showImageWithRotateRectangles(<span class="keyword">this</span>-&gt;mImg, <span class="keyword">this</span>-&gt;mRect, <span class="keyword">this</span>-&gt;mRotRects);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;msX != <span class="keyword">this</span>-&gt;meX || <span class="keyword">this</span>-&gt;msY != <span class="keyword">this</span>-&gt;meY)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">this</span>-&gt;mRect.x += (<span class="keyword">this</span>-&gt;meX - <span class="keyword">this</span>-&gt;msX);</span><br><span class="line">				<span class="keyword">this</span>-&gt;mRect.y += (<span class="keyword">this</span>-&gt;meY - <span class="keyword">this</span>-&gt;msY);</span><br><span class="line">				<span class="keyword">this</span>-&gt;showImage(<span class="keyword">this</span>-&gt;mImg, <span class="keyword">this</span>-&gt;mRect);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="在父组件响应事件"><a href="#在父组件响应事件" class="headerlink" title="在父组件响应事件"></a>在父组件响应事件</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onDrawNewPoint</span><span class="params">(<span class="keyword">const</span> cv::Point2d&amp; pt)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onDrawNewLine</span><span class="params">(<span class="keyword">const</span> cv::Vec4d&amp; <span class="built_in">line</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onDrawNewRectangle</span><span class="params">(<span class="keyword">const</span> cv::Rect2d&amp; <span class="built_in">rect</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onDrawNewRotateRectangle</span><span class="params">(<span class="keyword">const</span> RotRect2D&amp; rotRect)</span></span>;</span><br></pre></td></tr></table></figure>
<p>绑定事件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">connect</span>(<span class="keyword">this</span>-&gt;iViewer, SIGNAL(drawNewPoint(<span class="keyword">const</span> cv::Point2d&amp;)), <span class="keyword">this</span>, SLOT(onDrawNewPoint(<span class="keyword">const</span> cv::Point2d&amp;)));</span><br><span class="line"><span class="built_in">connect</span>(<span class="keyword">this</span>-&gt;iViewer, SIGNAL(drawNewLine(<span class="keyword">const</span> cv::Vec4d &amp;)), <span class="keyword">this</span>, SLOT(onDrawNewLine(<span class="keyword">const</span> cv::Vec4d&amp;)));</span><br><span class="line"><span class="built_in">connect</span>(<span class="keyword">this</span>-&gt;iViewer, SIGNAL(drawNewRectangle(<span class="keyword">const</span> cv::Rect2d &amp;)), <span class="keyword">this</span>, SLOT(onDrawNewRectangle(<span class="keyword">const</span> cv::Rect2d &amp;)));</span><br><span class="line"><span class="built_in">connect</span>(<span class="keyword">this</span>-&gt;iViewer, SIGNAL(drawNewRotateRectangle(<span class="keyword">const</span> RotRect2D &amp;)), <span class="keyword">this</span>, SLOT(onDrawNewRotateRectangle(<span class="keyword">const</span> RotRect2D &amp;)));</span><br></pre></td></tr></table></figure>
<p>事件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::onDrawNewPoint</span><span class="params">(<span class="keyword">const</span> cv::Point2d&amp; pt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;putText(QString(<span class="string">"Add Point: x=%1, y=%2"</span>).arg(pt.x).arg(pt.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::onDrawNewLine</span><span class="params">(<span class="keyword">const</span> cv::Vec4d&amp; <span class="built_in">line</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;putText(QString(<span class="string">"Add Line: (x1, y1)=(%1, %2), (x2, y2)=(%3, %4)"</span>)</span><br><span class="line">		.arg(<span class="built_in">line</span>[<span class="number">0</span>]).arg(<span class="built_in">line</span>[<span class="number">1</span>])</span><br><span class="line">		.arg(<span class="built_in">line</span>[<span class="number">2</span>]).arg(<span class="built_in">line</span>[<span class="number">3</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::onDrawNewRectangle</span><span class="params">(<span class="keyword">const</span> cv::Rect2d&amp; <span class="built_in">rect</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;putText(QString(<span class="string">"Add Rectangle: x=%1, y=%2, width=%3, height=%4"</span>)</span><br><span class="line">		.arg(<span class="built_in">rect</span>.x).arg(<span class="built_in">rect</span>.y)</span><br><span class="line">		.arg(<span class="built_in">rect</span>.<span class="built_in">width</span>).arg(<span class="built_in">rect</span>.<span class="built_in">height</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KvImage::onDrawNewRotateRectangle</span><span class="params">(<span class="keyword">const</span> RotRect2D&amp; rotRect)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;putText(QString(<span class="string">"Add Rotate Rectangle: (x1, y1)=(%1, %2), (x2, y2)=(%3, %4), (x3, y3)=(%5, %6), (x4, y4)=(%7, %8)"</span>)</span><br><span class="line">		.arg(rotRect.pt1().x).arg(rotRect.pt1().y)</span><br><span class="line">		.arg(rotRect.pt2().x).arg(rotRect.pt2().y)</span><br><span class="line">		.arg(rotRect.pt3().x).arg(rotRect.pt3().y)</span><br><span class="line">		.arg(rotRect.pt4().x).arg(rotRect.pt4().y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="删除矢量"><a href="#删除矢量" class="headerlink" title="删除矢量"></a>删除矢量</h2><p>声明</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deletePoint</span><span class="params">(<span class="keyword">const</span> cv::Point2d&amp; pt)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteLine</span><span class="params">(<span class="keyword">const</span> cv::Vec4d&amp; <span class="built_in">line</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteRectangle</span><span class="params">(<span class="keyword">const</span> cv::Rect2d&amp; <span class="built_in">rect</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteRotateRectangle</span><span class="params">(<span class="keyword">const</span> RotRect2D&amp; rotRect)</span></span>;</span><br></pre></td></tr></table></figure>
<p>实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ImageViewer::deletePoint</span><span class="params">(<span class="keyword">const</span> cv::Point2d&amp; pt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Point2d&gt;::iterator pos = <span class="built_in">std</span>::<span class="built_in">find</span>(<span class="keyword">this</span>-&gt;mPts.<span class="built_in">begin</span>(), <span class="keyword">this</span>-&gt;mPts.<span class="built_in">end</span>(), pt);</span><br><span class="line">	<span class="keyword">if</span> (pos == <span class="keyword">this</span>-&gt;mPts.<span class="built_in">end</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">this</span>-&gt;mPts.erase(pos);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//// 其余类似</span></span><br></pre></td></tr></table></figure>
<h1 id="QTextBrowser滚动到底部"><a href="#QTextBrowser滚动到底部" class="headerlink" title="QTextBrowser滚动到底部"></a>QTextBrowser滚动到底部</h1><p>继承自<a href="https://doc.qt.io/qt-5.12/qtextedit.html#moveCursor" target="_blank" rel="noopener">QTextEdit::moveCursor(QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode = QTextCursor::MoveAnchor)</a></p>
<p>移动操作参考<a href="https://doc.qt.io/qt-5.12/qtextcursor.html#MoveOperation-enum" target="_blank" rel="noopener">QTextCursor::MoveOperation-enum</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;mInfoBar-&gt;moveCursor(QTextCursor::End);  <span class="comment">// 滚动到底部</span></span><br></pre></td></tr></table></figure>
<h1 id="矢量窗口"><a href="#矢量窗口" class="headerlink" title="矢量窗口"></a>矢量窗口</h1><p>用来显示矢量（点线面），并具有选择查看和导出保存的功能。</p>
<h2 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h2><p>VectorWindow.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VectorWindow</span> :</span></span><br><span class="line">    <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    VectorWindow(QWidget* parent = Q_NULLPTR);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>VectorWindow.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"VectorWindow.h"</span></span></span><br><span class="line"></span><br><span class="line">VectorWindow::VectorWindow(QWidget* parent) : QWidget(parent)</span><br><span class="line">&#123; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="设置窗体类"><a href="#设置窗体类" class="headerlink" title="设置窗体类"></a>设置窗体类</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">////////// 初始化窗口</span></span><br><span class="line"><span class="comment">// 设置窗体大小和位置</span></span><br><span class="line">QDesktopWidget* desktopWidget = QApplication::desktop();</span><br><span class="line">QRect deskRect = desktopWidget-&gt;availableGeometry();  <span class="comment">// 可用桌面大小</span></span><br><span class="line"><span class="keyword">int</span> deskHeight, deskWidth;</span><br><span class="line">deskHeight = deskRect.<span class="built_in">height</span>();</span><br><span class="line">deskWidth = deskRect.<span class="built_in">width</span>();</span><br><span class="line"><span class="keyword">int</span> winHeight, winWidth;</span><br><span class="line">winHeight = deskHeight * <span class="number">0.5</span>;</span><br><span class="line">winWidth = deskWidth * <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">int</span> marginRight;</span><br><span class="line">marginRight = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;setGeometry(deskWidth - winWidth - marginRight, deskHeight / <span class="number">2</span> - winHeight / <span class="number">2</span>, winWidth, winHeight);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 窗体标题</span></span><br><span class="line"><span class="keyword">this</span>-&gt;setWindowTitle(QString::fromLocal8Bit(<span class="string">"矢量窗口"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 窗口最前</span></span><br><span class="line"><span class="keyword">this</span>-&gt;setWindowFlags(<span class="keyword">this</span>-&gt;windowFlags() | Qt::WindowStaysOnTopHint);</span><br><span class="line"><span class="comment">// this-&gt;setWindowFlags(this-&gt;windowFlags() &amp;~ Qt::WindowStaysOnTopHint);  // 取消窗口最前</span></span><br></pre></td></tr></table></figure>
<h2 id="使用按钮控件控制窗体最前"><a href="#使用按钮控件控制窗体最前" class="headerlink" title="使用按钮控件控制窗体最前"></a>使用按钮控件控制窗体最前</h2><p>当当前窗口为隐藏状态时，直接设置其是否顶置；若当前状态为显示，设置顶置方式后窗口会自动隐藏，因此需要额外调用一次<code>show()</code>函数。</p>
<p>创建插槽：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">VectorWindow::onToggleTopHint</span><span class="params">(<span class="keyword">bool</span> checked)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (checked)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 窗口最前</span></span><br><span class="line">		<span class="keyword">if</span> (!isHidden())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;setWindowFlags(<span class="keyword">this</span>-&gt;windowFlags() | Qt::WindowStaysOnTopHint);</span><br><span class="line">			<span class="keyword">this</span>-&gt;show();</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">this</span>-&gt;setWindowFlags(<span class="keyword">this</span>-&gt;windowFlags() | Qt::WindowStaysOnTopHint);</span><br><span class="line"></span><br><span class="line">		qDebug() &lt;&lt; QString::fromLocal8Bit(<span class="string">"设置窗口最前"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;  <span class="comment">// 取消窗口最前</span></span><br><span class="line">		<span class="keyword">if</span> (!isHidden())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;setWindowFlags(<span class="keyword">this</span>-&gt;windowFlags() &amp; ~Qt::WindowStaysOnTopHint);</span><br><span class="line">			<span class="keyword">this</span>-&gt;show();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">this</span>-&gt;setWindowFlags(<span class="keyword">this</span>-&gt;windowFlags() &amp; ~Qt::WindowStaysOnTopHint);</span><br><span class="line"></span><br><span class="line">		qDebug() &lt;&lt; QString::fromLocal8Bit(<span class="string">"取消窗口最前"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建<a href="https://doc.qt.io/qt-5.12/qradiobutton.html" target="_blank" rel="noopener">QRadioButton</a>按钮并绑定事件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否顶置按钮</span></span><br><span class="line">QRadioButton* winTopBtn = <span class="keyword">new</span> QRadioButton(<span class="keyword">this</span>);</span><br><span class="line">winTopBtn-&gt;setText(QString::fromLocal8Bit(<span class="string">"顶置窗口"</span>));</span><br><span class="line">QObject::<span class="built_in">connect</span>(winTopBtn, SIGNAL(clicked(<span class="keyword">bool</span>)), <span class="keyword">this</span>, SLOT(onToggleTopHint(<span class="keyword">bool</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;mLayout-&gt;addWidget(winTopBtn, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>);  <span class="comment">// 行，列，行宽，列宽</span></span><br><span class="line"><span class="keyword">if</span> (!winTopBtn-&gt;isChecked()) winTopBtn-&gt;<span class="built_in">click</span>();</span><br></pre></td></tr></table></figure>
<h2 id="使用表格"><a href="#使用表格" class="headerlink" title="使用表格"></a>使用表格</h2><blockquote>
<p><a href="https://blog.csdn.net/xgbing/article/details/7774737" target="_blank" rel="noopener">Qt入门－表格类QTableWidget</a></p>
</blockquote>
<p>QTableWidget继承自QTableView，功能较为齐全。下面是一个使用示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">////////////// 设置表格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置表格行列</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mTable-&gt;setRowCount(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">this</span>-&gt;mTable-&gt;setColumnCount(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置表格行标题</span></span><br><span class="line">QStringList headerLabels;</span><br><span class="line">headerLabels &lt;&lt; <span class="string">"C1"</span> &lt;&lt; <span class="string">"C2"</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;mTable-&gt;setHorizontalHeaderLabels(headerLabels);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置表格行标题的对齐方式</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mTable-&gt;horizontalHeader()-&gt;setDefaultAlignment(Qt::AlignCenter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置行表题</span></span><br><span class="line">QStringList rowLabels;</span><br><span class="line">rowLabels &lt;&lt; <span class="string">"Line1"</span> &lt;&lt; <span class="string">"Line2"</span> &lt;&lt; <span class="string">"Line3"</span> &lt;&lt; <span class="string">"Line4"</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;mTable-&gt;setVerticalHeaderLabels(rowLabels);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动调整最后一列的宽度使它和表格的右边界对齐</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mTable-&gt;horizontalHeader()-&gt;setStretchLastSection(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 设置表格宽高调整尺寸策略</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mTable-&gt;horizontalHeader()-&gt;setSectionResizeMode(QHeaderView::ResizeMode::Stretch);</span><br><span class="line"><span class="keyword">this</span>-&gt;mTable-&gt;verticalHeader()-&gt;setSectionResizeMode(QHeaderView::ResizeMode::ResizeToContents);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置表格的选择方式</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mTable-&gt;setSelectionBehavior(QAbstractItemView::SelectionBehavior::SelectRows);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置编辑方式</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mTable-&gt;setEditTriggers(QAbstractItemView::EditTrigger::NoEditTriggers);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置表格的内容</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; <span class="number">4</span>; ++row)</span><br><span class="line">&#123;</span><br><span class="line">    QTableWidgetItem* item0, * item1;</span><br><span class="line">    item0 = <span class="keyword">new</span> QTableWidgetItem;</span><br><span class="line">    item1 = <span class="keyword">new</span> QTableWidgetItem;</span><br><span class="line"></span><br><span class="line">    QString txt = QString(<span class="string">"%1"</span>).arg(row + <span class="number">1</span>);</span><br><span class="line">    item0-&gt;setText(txt);</span><br><span class="line">    <span class="keyword">this</span>-&gt;mTable-&gt;setItem(row, <span class="number">0</span>, item0);</span><br><span class="line"></span><br><span class="line">    txt = QString(<span class="string">"%1"</span>).arg((row + <span class="number">1</span>) * <span class="number">2</span>);</span><br><span class="line">    item1-&gt;setText(txt);</span><br><span class="line">    <span class="keyword">this</span>-&gt;mTable-&gt;setItem(row, <span class="number">1</span>, item1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加一行</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mTable-&gt;setRowCount(<span class="number">5</span>);</span><br><span class="line">QTableWidgetItem* vHeader5 = <span class="keyword">new</span> QTableWidgetItem(<span class="string">"Line5"</span>);</span><br><span class="line"><span class="keyword">this</span>-&gt;mTable-&gt;setVerticalHeaderItem(<span class="number">4</span>, vHeader5);</span><br><span class="line"></span><br><span class="line">QTableWidgetItem* item5_0, * item5_1;</span><br><span class="line">item5_0 = <span class="keyword">new</span> QTableWidgetItem;</span><br><span class="line">item5_1 = <span class="keyword">new</span> QTableWidgetItem;</span><br><span class="line">item5_0-&gt;setText(QString(<span class="string">"%1"</span>).arg(<span class="number">5</span>));</span><br><span class="line">item5_1-&gt;setText(QString(<span class="string">"%1"</span>).arg(<span class="number">5</span> * <span class="number">2</span>));</span><br><span class="line"><span class="keyword">this</span>-&gt;mTable-&gt;setItem(<span class="number">4</span>, <span class="number">0</span>, item5_0);</span><br><span class="line"><span class="keyword">this</span>-&gt;mTable-&gt;setItem(<span class="number">4</span>, <span class="number">1</span>, item5_1);</span><br></pre></td></tr></table></figure>
<h2 id="表格初始化"><a href="#表格初始化" class="headerlink" title="表格初始化"></a>表格初始化</h2><p>设置了一些显示参数，如标题字体样式、对齐方式、宽高策略、是否可选中项目等。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">VectorWindow::initTable</span><span class="params">(QTableWidget* table)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (table == Q_NULLPTR)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mTable != Q_NULLPTR)</span><br><span class="line">		&#123;</span><br><span class="line">			table = <span class="keyword">this</span>-&gt;mTable;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			qWarning() &lt;&lt; QString::fromLocal8Bit(<span class="string">"表格初始化失败"</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置 表格 及 行标题 的对齐方式</span></span><br><span class="line">	table-&gt;horizontalHeader()-&gt;setDefaultAlignment(Qt::AlignCenter);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 设置加粗</span></span><br><span class="line">	QFont headerFont = table-&gt;horizontalHeader()-&gt;font();</span><br><span class="line">	headerFont.setBold(<span class="literal">true</span>);</span><br><span class="line">	table-&gt;horizontalHeader()-&gt;setFont(headerFont);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 自动调整最后一列的宽度使它和表格的右边界对齐</span></span><br><span class="line">	table-&gt;horizontalHeader()-&gt;setStretchLastSection(<span class="literal">true</span>);</span><br><span class="line">	<span class="comment">// 设置表格宽高调整尺寸策略</span></span><br><span class="line">	table-&gt;horizontalHeader()-&gt;setSectionResizeMode(QHeaderView::ResizeMode::Stretch);</span><br><span class="line">	table-&gt;verticalHeader()-&gt;setSectionResizeMode(QHeaderView::ResizeMode::ResizeToContents);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置表格的选择方式</span></span><br><span class="line">	table-&gt;setSelectionBehavior(QAbstractItemView::SelectionBehavior::SelectRows);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置编辑方式</span></span><br><span class="line">	table-&gt;setEditTriggers(QAbstractItemView::EditTrigger::NoEditTriggers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="表格内容操作：不同数据显示的初始化，填充，清空，滚动"><a href="#表格内容操作：不同数据显示的初始化，填充，清空，滚动" class="headerlink" title="表格内容操作：不同数据显示的初始化，填充，清空，滚动"></a>表格内容操作：不同数据显示的初始化，填充，清空，滚动</h2><p>填充数据前应该对表格进行初始化，不同的数据类型具有不同的表头信息</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">VectorWindow::initShowPoints</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;clearTable();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>-&gt;mTable-&gt;setColumnCount(<span class="number">3</span>);  <span class="comment">// id,x,y</span></span><br><span class="line">	QStringList rowHeaderList;</span><br><span class="line">	rowHeaderList &lt;&lt; <span class="string">"ID"</span> &lt;&lt; <span class="string">"x"</span> &lt;&lt; <span class="string">"y"</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;mTable-&gt;setHorizontalHeaderLabels(rowHeaderList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//// ...</span></span><br></pre></td></tr></table></figure>
<p>填充一行数据：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">VectorWindow::appendPoint</span><span class="params">(<span class="keyword">const</span> cv::Point2d&amp; pt)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mTable == Q_NULLPTR)</span><br><span class="line">	&#123;</span><br><span class="line">		qWarning() &lt;&lt; QString::fromLocal8Bit(<span class="string">"VectorWindow::appendPoint() - 表格未初始化"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> rowCount, colCount;</span><br><span class="line">	rowCount = <span class="keyword">this</span>-&gt;mTable-&gt;rowCount();</span><br><span class="line">	colCount = <span class="keyword">this</span>-&gt;mTable-&gt;columnCount();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (colCount != <span class="number">3</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		qWarning() &lt;&lt; QString::fromLocal8Bit(<span class="string">"VectorWindow::appendPoint() - 列数不一致，当前为(%1)，应为(%2)"</span>)</span><br><span class="line">			.arg(colCount).arg(<span class="number">3</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>-&gt;mTable-&gt;setRowCount(rowCount + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	QTableWidgetItem* idItem = <span class="keyword">new</span> QTableWidgetItem(QString::number(rowCount));</span><br><span class="line">	QTableWidgetItem* xItem = <span class="keyword">new</span> QTableWidgetItem(QString::number(pt.x));</span><br><span class="line">	QTableWidgetItem* yItem = <span class="keyword">new</span> QTableWidgetItem(QString::number(pt.y));</span><br><span class="line"></span><br><span class="line">	idItem-&gt;setTextAlignment(Qt::AlignCenter);</span><br><span class="line">	xItem-&gt;setTextAlignment(Qt::AlignCenter);</span><br><span class="line">	yItem-&gt;setTextAlignment(Qt::AlignCenter);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>-&gt;mTable-&gt;setItem(rowCount, <span class="number">0</span>, idItem);</span><br><span class="line">	<span class="keyword">this</span>-&gt;mTable-&gt;setItem(rowCount, <span class="number">1</span>, xItem);</span><br><span class="line">	<span class="keyword">this</span>-&gt;mTable-&gt;setItem(rowCount, <span class="number">2</span>, yItem);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// ...</span></span><br></pre></td></tr></table></figure>
<p>填充列表数据直接循环调用填充单个的即可。</p>
<p>控制表格滚动到底部，一般在插入数据后调用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 滚动到底部</span></span><br><span class="line"><span class="keyword">this</span>-&gt;mTable-&gt;scrollToBottom();</span><br></pre></td></tr></table></figure>
<p>清空表格不仅要清空内容，还要把行列设置为0从而清空表头</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">VectorWindow::clearTable</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mTable == Q_NULLPTR)</span><br><span class="line">	&#123;</span><br><span class="line">		qWarning() &lt;&lt; QString::fromLocal8Bit(<span class="string">"VectorWindow::clearTable() - 表格未初始化"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 清空表格</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;mTable-&gt;clearContents();</span><br><span class="line">	<span class="keyword">this</span>-&gt;mTable-&gt;setRowCount(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">this</span>-&gt;mTable-&gt;setColumnCount(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="表格事件"><a href="#表格事件" class="headerlink" title="表格事件"></a>表格事件</h2><p>当希望点击表格中的矢量定位到矢量在图上的位置时，需要用到表格事件<a href="https://doc.qt.io/qt-5.12/qtablewidget.html#signals" target="_blank" rel="noopener">QTableWidget::signals</a>，这边用到了双击事件<code>cellDoubleClicked(int row, int col)</code>。</p>
<p>创建槽函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onItemDoubleClicked</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">VectorWindow::onItemDoubleClicked</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	qDebug() &lt;&lt; row &lt;&lt; <span class="string">", "</span> &lt;&lt; col;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>绑定信号</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line">QObject::<span class="built_in">connect</span>(<span class="keyword">this</span>-&gt;mTable, SIGNAL(cellDoubleClicked(<span class="keyword">int</span>, <span class="keyword">int</span>)), <span class="keyword">this</span>, SLOT(onItemDoubleClicked(<span class="keyword">int</span>, <span class="keyword">int</span>)));</span><br></pre></td></tr></table></figure>
<h2 id="表格内的操作按钮"><a href="#表格内的操作按钮" class="headerlink" title="表格内的操作按钮"></a>表格内的操作按钮</h2><blockquote>
<p><a href="https://blog.csdn.net/GiveMeFive_Y/article/details/89535830" target="_blank" rel="noopener">QT表格列添加多个按钮</a></p>
</blockquote>
<p>当希望删除矢量时，可以借助每个矢量后面的操作按钮完成。</p>
<h3 id="创建按钮"><a href="#创建按钮" class="headerlink" title="创建按钮"></a>创建按钮</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QWidget* <span class="title">VectorWindow::createRowCtrlBtnWidget</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	QWidget* w = <span class="keyword">new</span> QWidget();</span><br><span class="line"></span><br><span class="line">	QPushButton* viewBtn = <span class="keyword">new</span> QPushButton(QString::fromLocal8Bit(<span class="string">"查看"</span>));</span><br><span class="line">	QPushButton* delBtn = <span class="keyword">new</span> QPushButton(QString::fromLocal8Bit(<span class="string">"删除"</span>));</span><br><span class="line">	QHBoxLayout* layout = <span class="keyword">new</span> QHBoxLayout(); <span class="comment">//添加水平布局控件</span></span><br><span class="line">	QWidget* widget = <span class="keyword">new</span> QWidget(); <span class="comment">//添加部件</span></span><br><span class="line"></span><br><span class="line">	viewBtn-&gt;setStyleSheet(<span class="string">"QPushButton&#123;margin:0;padding:0;color:blue;border:none;background-color:rgba(0,0,0,0);&#125;\</span></span><br><span class="line"><span class="string">		QPushButton:hover&#123;font-weight:bold;text-decoration:underline;&#125;"</span>);</span><br><span class="line">	viewBtn-&gt;<span class="built_in">setCursor</span>(Qt::PointingHandCursor);</span><br><span class="line"></span><br><span class="line">	delBtn-&gt;setStyleSheet(<span class="string">"QPushButton&#123;margin:0;padding:0;color:blue;border:none;background-color:rgba(0,0,0,0);&#125;\</span></span><br><span class="line"><span class="string">		QPushButton:hover&#123;font-weight:bold;text-decoration:underline;&#125;"</span>);</span><br><span class="line">	delBtn-&gt;<span class="built_in">setCursor</span>(Qt::PointingHandCursor);</span><br><span class="line"></span><br><span class="line">	QObject::<span class="built_in">connect</span>(viewBtn, SIGNAL(clicked()), <span class="keyword">this</span>, SLOT(onViewRow()));</span><br><span class="line">	QObject::<span class="built_in">connect</span>(delBtn, SIGNAL(clicked()), <span class="keyword">this</span>, SLOT(onRemoveRow()));</span><br><span class="line"></span><br><span class="line">	layout-&gt;addWidget(viewBtn);</span><br><span class="line">	layout-&gt;addWidget(delBtn);</span><br><span class="line">	layout-&gt;setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	layout-&gt;setAlignment(Qt::AlignCenter);</span><br><span class="line">	w-&gt;setLayout(layout);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加到表格中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QWidget* btnWidget = <span class="keyword">this</span>-&gt;createRowCtrlBtnWidget();</span><br><span class="line"><span class="keyword">this</span>-&gt;mTable-&gt;setCellWidget(rowCount, <span class="number">3</span>, btnWidget);</span><br></pre></td></tr></table></figure>
<h3 id="获取行号：使用sender-函数"><a href="#获取行号：使用sender-函数" class="headerlink" title="获取行号：使用sender()函数"></a>获取行号：使用sender()函数</h3><blockquote>
<p><a href="https://blog.csdn.net/u013394556/article/details/39965667" target="_blank" rel="noopener">Qt中QObject::sender()的用法</a></p>
</blockquote>
<p>当某一个<code>Object</code>emit一个signal的时候，它就是一个sender。系统会记录下当前是谁emit出这个signal的，所以你在对应的slot里就可以通过<code>sender()</code>得到当前是谁invoke了你的slot。</p>
<p>在如下例子中，<code>onEditRow()</code>函数作为表格项按钮的响应函数，其<code>sender</code>就是按钮本身，而按钮的父组件是添加到表格中的widget，其<code>pos()</code>函数的返回值是其在表格中左上角的位置坐标。因此通过表格的<code>indexAt()</code>函数可以反算出行号。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">VectorWindow::onEditRow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	QWidget* w = qobject_cast&lt;QWidget*&gt;(sender()-&gt;parent());</span><br><span class="line">	<span class="keyword">if</span> (w)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> row = <span class="keyword">this</span>-&gt;mTable-&gt;indexAt(w-&gt;pos()).row();</span><br><span class="line">		qDebug() &lt;&lt; row;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还有一种思路是将行号作为属性（property）存放到每一行的操作按钮控件中，但是由于表格的删除操作，实际的行号可能随时发生变化，那么创建一个表格行时生成的操作按钮里记录的行号就过时了，因此不适合作为属性传入，这里采用实时计算的方式较为合适。作为属性传入的见下一节，在右键点击菜单中，菜单的生成是实时的，此时的行号具有时效性。</p>
<h2 id="右键点击操作"><a href="#右键点击操作" class="headerlink" title="右键点击操作"></a>右键点击操作</h2><blockquote>
<p><a href="https://blog.csdn.net/TanChengkai/article/details/52104924" target="_blank" rel="noopener">QT实现鼠标右键快捷菜单(QTableWidget)</a></p>
</blockquote>
<p>右键点击一个项目进行删除或者复制到剪贴板。</p>
<p>QTableWidget的点击事件关联的都是鼠标左键，只有<code>customContextMenuRequested(QPoint)</code>信号是QWidget中唯一的右键菜单点击的信号，且该信号的触发条件是QWidget的上下文菜单策略（ContextMenuPolicy）设置为<code>Qt::CustomContextMenu</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;mTable-&gt;setContextMenuPolicy(Qt::CustomContextMenu);</span><br></pre></td></tr></table></figure>
<p>响应事件:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">VectorWindow::onTableRightClicked</span><span class="params">(<span class="keyword">const</span> QPoint pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	qDebug() &lt;&lt; pos;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;mVecType == Kv::VectorType::None)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	QModelIndex idx = <span class="keyword">this</span>-&gt;mTable-&gt;indexAt(pos);</span><br><span class="line">	qDebug() &lt;&lt; idx;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (idx.row() &lt; <span class="number">0</span> || idx.column() &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	QMenu* menu = <span class="keyword">new</span> QMenu(<span class="keyword">this</span>-&gt;mTable);</span><br><span class="line">	QAction* actView = <span class="keyword">new</span> QAction(QString::fromLocal8Bit(<span class="string">"查看"</span>), <span class="keyword">this</span>-&gt;mTable);</span><br><span class="line">	QAction* actDel = <span class="keyword">new</span> QAction(QString::fromLocal8Bit(<span class="string">"删除"</span>), <span class="keyword">this</span>-&gt;mTable);</span><br><span class="line">	actView-&gt;setProperty(<span class="string">"row"</span>, QVariant(idx.row()));</span><br><span class="line">	actDel-&gt;setProperty(<span class="string">"row"</span>, QVariant(idx.row()));</span><br><span class="line">	QObject::<span class="built_in">connect</span>(actView, SIGNAL(triggered()), <span class="keyword">this</span>, SLOT(onViewRow()));</span><br><span class="line">	QObject::<span class="built_in">connect</span>(actDel, SIGNAL(triggered()), <span class="keyword">this</span>, SLOT(onRemoveRow()));</span><br><span class="line"></span><br><span class="line">	menu-&gt;addAction(actView);</span><br><span class="line">	menu-&gt;addAction(actDel);</span><br><span class="line">	menu-&gt;<span class="built_in">move</span>(<span class="built_in">cursor</span>().pos());</span><br><span class="line">	menu-&gt;show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>右键菜单中添加的动作与表格内按钮的动作可能用到相同的响应函数，例如矢量的查看和删除。在表格按钮中，行号的获取是通过表单控件的位置计算出来的，由于表格行数随时可能发生变化，因此通过实时计算的方式可以保证行号的正确；而在右键菜单中，其生成和消失是根据当前鼠标位置决定的，并不会和每一行数据进行绑定，因此通过属性设置行号即可完成功能。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>C++调试信息输出类</title>
    <url>/2021/05/23/C-%E8%B0%83%E8%AF%95%E4%BF%A1%E6%81%AF%E8%BE%93%E5%87%BA%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><p>示例代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">debug() &lt;&lt; <span class="string">"测试"</span> &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="string">"321"</span> &lt;&lt; <span class="number">123</span> &lt;&lt; <span class="number">123.1</span> &lt;&lt; <span class="number">123.2f</span>;</span><br><span class="line">debug() &lt;&lt; <span class="string">"测试"</span> &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="string">"123"</span>;</span><br><span class="line">debug() &lt;&lt; <span class="string">"测试"</span> &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="string">"123"</span>;</span><br><span class="line"></span><br><span class="line">debug(<span class="string">"123"</span>) &lt;&lt; <span class="number">123</span>;</span><br><span class="line">debug(<span class="number">1</span>);</span><br><span class="line">debug(<span class="number">1.1</span>);</span><br><span class="line">debug(<span class="number">1.1f</span>);</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">测试 , 321 123 123.1 123.2</span><br><span class="line">测试 , 123</span><br><span class="line">测试 , 123</span><br><span class="line">123 123</span><br><span class="line">1</span><br><span class="line">1.1</span><br><span class="line">1.1</span><br></pre></td></tr></table></figure>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ol>
<li>使用<code>&lt;&lt;</code>运算符进行层级输出，也可以通过参数输出；</li>
<li>嵌套输出的每一项之间用空格隔开；</li>
<li>一行输出多个内容后自动换行；</li>
<li>基于<code>std::cout</code>，支持类型完整；</li>
</ol>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:26444)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 调试信息输出类</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">debug</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="title">debug</span><span class="params">(T t)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;prtEndl = <span class="literal">true</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="title">debug</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;prtEndl = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">	<span class="keyword">inline</span> debug&amp; <span class="keyword">operator</span>&lt;&lt;(T t)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;prtEndl)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;prtEndl = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; t;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">inline</span> ~debug()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (prtEndl)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="comment">// 是否输出换行</span></span><br><span class="line">	<span class="keyword">bool</span> prtEndl;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js命令行输出不同颜色</title>
    <url>/2021/05/25/Node-js%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%93%E5%87%BA%E4%B8%8D%E5%90%8C%E9%A2%9C%E8%89%B2/</url>
    <content><![CDATA[<p>fontStyle.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fontStyle = &#123;</span><br><span class="line">    <span class="comment">// 亮色</span></span><br><span class="line">    bright: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[1m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 灰色</span></span><br><span class="line">    grey: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[2m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 斜体</span></span><br><span class="line">    italic: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[3m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 下划线</span></span><br><span class="line">    underline: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[4m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 反向</span></span><br><span class="line">    reverse: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[7m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 隐藏</span></span><br><span class="line">    hidden: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[8m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 黑色</span></span><br><span class="line">    black: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[30m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 红色</span></span><br><span class="line">    red: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[31m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 绿色</span></span><br><span class="line">    green: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[32m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 黄色</span></span><br><span class="line">    yellow: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[33m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 蓝色</span></span><br><span class="line">    blue: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[34m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 品红</span></span><br><span class="line">    magenta: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[35m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 青色</span></span><br><span class="line">    cyan: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[36m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 白色</span></span><br><span class="line">    white: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[37m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 背景色为黑色</span></span><br><span class="line">    blackBG: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[40m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 背景色为红色</span></span><br><span class="line">    redBG: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[41m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 背景色为绿色</span></span><br><span class="line">    greenBG: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[42m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 背景色为黄色</span></span><br><span class="line">    yellowBG: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[43m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 背景色为蓝色</span></span><br><span class="line">    blueBG: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[44m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 背景色为品红</span></span><br><span class="line">    magentaBG: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[45m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 背景色为青色</span></span><br><span class="line">    cyanBG: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[46m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 背景色为白色</span></span><br><span class="line">    whiteBG: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[47m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;,</span><br><span class="line">    <span class="comment">// 自定义样式序号</span></span><br><span class="line">    custom: <span class="function">(<span class="params">code = <span class="built_in">Number</span>, str</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">`\x1B[<span class="subst">$&#123;code&#125;</span>m<span class="subst">$&#123;str&#125;</span>\x1B[0m`</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = fontStyle;</span><br></pre></td></tr></table></figure>
<p>做了个简单的测试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">150</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;i&#125;</span>: <span class="subst">$&#123;fontStyle.custom(i, <span class="string">"123"</span>)&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现了一些比较有意思的颜色，比如90的灰色，1的加粗，7的反色：</p>
<p><img src="/images/image-20210525092231953.png" alt="image-20210525092231953"></p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】char*, const char*和std::string相互转换</title>
    <url>/2021/06/04/%E8%BD%AC%E8%BD%BD-char-const-char-%E5%92%8Cstd-string%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<blockquote>
<p>转载自：<a href="https://blog.csdn.net/perfumekristy/article/details/7027678" target="_blank" rel="noopener">https://blog.csdn.net/perfumekristy/article/details/7027678</a></p>
</blockquote>
<p><strong>1. <code>const char*</code>和<code>string</code>转换</strong></p>
<p>(1) <code>const char*</code>转换为<code>string</code>：直接赋值即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* tmp = <span class="string">"whursgis"</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s = tmp;</span><br></pre></td></tr></table></figure>
<p>(2) <code>string</code>转换为<code>const char*</code>：利用<code>c_str()</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s = <span class="string">"whursgis"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* tmp = s.c_str();</span><br></pre></td></tr></table></figure>
<p><strong>2. <code>char*</code>和<code>const char*</code>之间的转换</strong></p>
<p>(1) <code>const char*</code>转化为<code>char*</code>：利用<code>const_cast&lt;char*&gt;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* tmp = <span class="string">"whursgis"</span>;</span><br><span class="line"><span class="keyword">char</span>* p = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(tmp);</span><br></pre></td></tr></table></figure>
<p>(2) <code>char*</code>转化为<code>const char*</code>：直接赋值即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span>* p = <span class="string">"whursgis"</span>.</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* tmp = p;</span><br></pre></td></tr></table></figure>
<p><strong>3. <code>char*</code>和<code>string</code>之间的转换</strong></p>
<p>有了1和2的基础，<code>char*</code>和<code>string</code>转化就很简单了。</p>
<p>(1) <code>char*</code>转化为<code>string</code>：直接赋值即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span>* p = <span class="string">"whursgis"</span>.</span><br><span class="line"><span class="built_in">string</span> str = p;</span><br></pre></td></tr></table></figure>
<p>(2) <code>string</code>转化为<code>char*</code>，走两步，先是<code>string</code>-&gt;<code>const char*</code>，然后是<code>const char*</code>-&gt;<code>char*</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="string">"whursgis"</span>;</span><br><span class="line"><span class="keyword">char</span>* p = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(str.c_str()):</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>版权声明：本文为CSDN博主「perfumekristy」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/perfumekristy/article/details/7027678" target="_blank" rel="noopener">https://blog.csdn.net/perfumekristy/article/details/7027678</a></p>
</blockquote>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Node-RSA, Crypto.js和Crypto++服务端与客户端协同加密</title>
    <url>/2021/06/20/Cryptopp-%E5%92%8CCrypto-js%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8D%8F%E5%90%8C%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><p>客户端：C++</p>
<p>服务端：Node.js</p>
<p>需要在客户端与服务端进行加密通讯，首先考虑使用RSA算法进行加密，该算法要求数据长度不能超过密钥长度，因此通常用来加密一些较短的数据，考虑使用AES对数据进行加密，使用RSA对AES密钥进行加密，以此充分利用算法的特性，实现加密过程。</p>
<h1 id="Node-RSA的安装与使用"><a href="#Node-RSA的安装与使用" class="headerlink" title="Node-RSA的安装与使用"></a>Node-RSA的安装与使用</h1><blockquote>
<p><a href="https://www.npmjs.com/package/node-rsa" target="_blank" rel="noopener">https://www.npmjs.com/package/node-rsa</a></p>
</blockquote>
<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i node-rsa -S</span><br></pre></td></tr></table></figure>
<h2 id="生成公钥私钥-pem文件"><a href="#生成公钥私钥-pem文件" class="headerlink" title="生成公钥私钥.pem文件"></a>生成公钥私钥.pem文件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> NodeRSA = <span class="built_in">require</span>(<span class="string">'node-rsa'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 生成RSA对</span></span><br><span class="line">    <span class="keyword">const</span> key = <span class="keyword">new</span> NodeRSA(&#123; <span class="attr">b</span>: <span class="number">2048</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出为pem文件</span></span><br><span class="line">    <span class="keyword">const</span> outDir = path.join(__dirname, <span class="string">'rsa'</span>);</span><br><span class="line">    <span class="keyword">if</span> (!fs.existsSync(outDir)) &#123;</span><br><span class="line">        fs.mkdirSync(outDir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fs.writeFileSync(path.join(outDir, <span class="string">'pub.pem'</span>), key.exportKey(<span class="string">'pkcs8-public-pem'</span>));</span><br><span class="line">    fs.writeFileSync(path.join(outDir, <span class="string">'pri.pem'</span>), key.exportKey(<span class="string">'pkcs8-private-pem'</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码首先生成了一个长度为<code>2048</code>位的密钥，接着在指定文件夹下分别输出公钥和私钥文件，输出的格式为<code>pkcs8</code>，pem表示加密格式为base64。</p>
<h2 id="读取-pem文件，RSA加密解密"><a href="#读取-pem文件，RSA加密解密" class="headerlink" title="读取.pem文件，RSA加密解密"></a>读取.pem文件，RSA加密解密</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> NodeRSA = <span class="built_in">require</span>(<span class="string">'node-rsa'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> keyDir = path.join(__dirname, <span class="string">'rsa'</span>);</span><br><span class="line">    <span class="keyword">const</span> pubKey = <span class="keyword">new</span> NodeRSA(fs.readFileSync(path.join(keyDir, <span class="string">'pub.pem'</span>)), <span class="string">'pkcs8-public-pem'</span>, &#123; <span class="attr">encryptionScheme</span>: <span class="string">'pkcs1'</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> priKey = <span class="keyword">new</span> NodeRSA(fs.readFileSync(path.join(keyDir, <span class="string">'pri.pem'</span>)), <span class="string">'pkcs8-private-pem'</span>, &#123; <span class="attr">encryptionScheme</span>: <span class="string">'pkcs1'</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> msg = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        text: <span class="string">'Hello World'</span>,</span><br><span class="line">        time: <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> encMsg = pubKey.encrypt(msg, <span class="string">'base64'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(encMsg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> decMsg = priKey.decrypt(encMsg, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(decMsg);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Crypto-js的安装与使用"><a href="#Crypto-js的安装与使用" class="headerlink" title="Crypto.js的安装与使用"></a>Crypto.js的安装与使用</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i crypto-js -S</span><br></pre></td></tr></table></figure>
<h2 id="生成随机的密钥"><a href="#生成随机的密钥" class="headerlink" title="生成随机的密钥"></a>生成随机的密钥</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成随机的16进制密钥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>len 密钥长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span>密钥字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> randomKey = <span class="function">(<span class="params">len</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        str += <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">16</span>).toString(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AES加密与解密"><a href="#AES加密与解密" class="headerlink" title="AES加密与解密"></a>AES加密与解密</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> msg = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        text: <span class="string">'Hello World!'</span>,</span><br><span class="line">        time: <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> key = randomKey(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'key: %s'</span>, key);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> enc = CryptoJS.AES.encrypt(msg, key).toString();</span><br><span class="line">    <span class="built_in">console</span>.log(enc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dec = CryptoJS.AES.decrypt(enc, key).toString(CryptoJS.enc.Utf8);</span><br><span class="line">    <span class="built_in">console</span>.log(dec);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Crypto-的编译与使用"><a href="#Crypto-的编译与使用" class="headerlink" title="Crypto++的编译与使用"></a>Crypto++的编译与使用</h1><p>Crypto++是基于C++实现的一个加密算法库，我们用它来实现AES和RSA加密解密流程。</p>
<h2 id="基本编译过程"><a href="#基本编译过程" class="headerlink" title="基本编译过程"></a>基本编译过程</h2><blockquote>
<p><a href="https://www.cryptopp.com/index.html#download" target="_blank" rel="noopener">下载地址：Cryptopp.com</a></p>
<p>编译器：VS2019</p>
</blockquote>
<p>下载后解压，解压后先把所有的<code>.h</code>和<code>.cpp</code>文件拷贝到一个目录下，放在<code>include/cryptopp</code>下。</p>
<p>使用VS打开目录下的<code>cryptest.sln</code>文件，里面包含了4个项目，其中我们需要用到的有两个：<code>cryptdll</code>和<code>cryptlib</code>，分别对应动态库（lib+dll）和静态库（lib）。在“生成-批生成”中分别选择对应项目的32位和64位的Debug和Release版本，总共四个，全都勾上，点击【生成】，全程大约花费3-5min，时间和CPU性能有关系。</p>
<p><img src="/images/image-20210602214757182.png" alt="image-20210602214757182" style="zoom:50%;" /></p>
<p>生成的结果保存在<code>.sln</code>文件同一目录下的<code>Win32</code>和<code>x64</code>文件夹下，需要把里面我们需要用到的东西取出放到特定的文件夹下。创建两个文件夹shared和static，在每个文件夹下创建四个目录，分别对应32位和64位下的Debug和Release库文件，对应的拷贝关系如下所示：</p>
<ul>
<li>Win32/Output/Debug/* -&gt; <code>static/debug-v142</code></li>
<li>Win32/Output/Release/* -&gt; <code>static/release-v142</code></li>
<li>x64/Output/Debug/* -&gt; <code>static/debug-x64-v142</code></li>
<li>x64/Output/Release/* -&gt; <code>static/release-x64-v142</code></li>
<li>Win32/DLL_Output/Debug/* -&gt; <code>shared/debug-v142</code></li>
<li>Win32/DLL_Output/Release/* -&gt; <code>shared/release-v142</code></li>
<li>x64/DLL_Output/Debug/* -&gt; <code>shared/debug-x64-v142</code></li>
<li>x64/DLL_Output/Release/* -&gt; <code>shared/release-x64-v142</code></li>
</ul>
<p>使用shared和static区分动态库和静态库，shared存放的一般包括.dll和.lib文件，static存放的只有一个.lib文件。拷贝的内容为对应文件夹下的.dll和.lib文件，其他的文件如.pdb, .ilk, .exp可选复制。这边的v142标识了编译器的版本，对应MSVC2019。</p>
<h2 id="创建C-程序引入Crypto-进行测试"><a href="#创建C-程序引入Crypto-进行测试" class="headerlink" title="创建C++程序引入Crypto++进行测试"></a>创建C++程序引入Crypto++进行测试</h2><p>在VS2019中新建工程，在工程中引入Crypto++。在“项目-属性-C/C++-附加包含目录”输入include目录的绝对路径：</p>
<p><img src="/images/image-20210602222126273.png" alt="image-20210602222126273" style="zoom:50%;" /></p>
<p>接着根据配置（Debug/Release）和平台（x64/Win32），在“链接器-输入-附加依赖项”引入对应文件夹中的.lib文件，这里引入的是静态库文件（static），这也是这个库的作者推荐的使用方式，不需要额外添加.dll文件到.exe文件目录下或环境变量中，生成成功后可以直接运行。</p>
<p><img src="/images/image-20210603200243168.png" alt="image-20210603200243168" style="zoom:50%;" /></p>
<p>由于Crypto++的工程文件默认生成MT的运行库，因此还需要额外修改“C/C++-代码生成-运行库”，Debug版本选择<code>/MTD</code>，Release版本选择<code>/MT</code>。（如果不想修改这个设置，见后续小节）</p>
<p><img src="/images/image-20210602223220980.png" alt="image-20210602223220980" style="zoom:50%;" /></p>
<p>两个地方引入完成后，创建一个.cpp，在里面写入如下代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cryptopp/aes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> CryptoPP::<span class="keyword">byte</span> <span class="keyword">byte</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CryptoPP::AESEncryption aesEncryptor;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">byte</span> aesKey[CryptoPP::AES::DEFAULT_KEYLENGTH];</span><br><span class="line">	<span class="keyword">byte</span> inBlock[CryptoPP::AES::BLOCKSIZE] = <span class="string">"123456789"</span>;</span><br><span class="line">	<span class="keyword">byte</span> outBlock[CryptoPP::AES::BLOCKSIZE];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">byte</span> xorBlock[CryptoPP::AES::BLOCKSIZE];</span><br><span class="line">	<span class="built_in">memset</span>(xorBlock, <span class="number">0</span>, CryptoPP::AES::BLOCKSIZE);</span><br><span class="line"></span><br><span class="line">	aesEncryptor.SetKey(aesKey, CryptoPP::AES::DEFAULT_KEYLENGTH);</span><br><span class="line">	aesEncryptor.ProcessAndXorBlock(inBlock, xorBlock, outBlock);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::hex &lt;&lt; (<span class="keyword">int</span>)outBlock[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果配置正确，执行代码后将在命令行中输出如下信息：</p>
<p><img src="/images/image-20210602222909560.png" alt="image-20210602222909560" style="zoom:50%;" /></p>
<h2 id="使用动态链接库的方式引入Crypto"><a href="#使用动态链接库的方式引入Crypto" class="headerlink" title="使用动态链接库的方式引入Crypto++"></a>使用动态链接库的方式引入Crypto++</h2><p>上一小节记录了作者推荐的静态库的引入方式，如果有特别的需求需要用到.lib+.dll的动态库组合，需要进行额外的设置。</p>
<p>在<a href="https://github.com/weidai11/cryptopp" target="_blank" rel="noopener">Crypto++的代码仓库</a>中有这么一段说明：</p>
<blockquote>
<p><u>To use the Crypto++ DLL in your application, #include “dll.h” before including</u><br><u>any other Crypto++ header files, and place the DLL in the same directory as</u><br><u>your .exe file. dll.h includes the line #pragma comment(lib, “cryptopp”)</u><br><u>so you don’t have to explicitly list the import library in your project</u><br><u>settings.</u> To use a static library form of Crypto++, make the “cryptlib”<br>project a dependency of your application project, or specify it as<br>an additional library to link with in your project settings.<br>In either case you should check the compiler options to<br>make sure that the library and your application are using the same C++<br>run-time libraries and calling conventions.</p>
</blockquote>
<p>因此，在工程配置中，将引入的静态库改为动态库：</p>
<p><img src="/images/image-20210603201053828.png" alt="image-20210603201053828" style="zoom:50%;" /></p>
<p>接着在代码的头文件处引入<code>dll.h</code>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cryptopp/dll.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>最后把对应的.dll文件<code>cryptopp.dll</code>拷贝到.exe目录下，即可运行。如果在VS中运行Debug版本抛出异常，按下F5继续执行即可，或者直接Ctrl+F5执行不调试也可以正确输出，发生的异常属于Crypto++内部的小BUG，无伤大雅。</p>
<p>使用动态库生成的.exe文件会小很多，且频繁运行时可以充分利用系统的缓存机制，运行速度快；使用静态库生成的.exe文件较大，但是只有一个文件，较为简洁，便于传递。</p>
<p><img src="/images/image-20210603202427819.png" alt="image-20210603202427819" style="zoom:50%;" /></p>
<h2 id="MD还是MT？生成不同运行库的方法"><a href="#MD还是MT？生成不同运行库的方法" class="headerlink" title="MD还是MT？生成不同运行库的方法"></a>MD还是MT？生成不同运行库的方法</h2><p>MD意为：multithread and DLL-specific version，多线程DLL版本。编译器加载的是动态运行的库，依赖.lib和.dll文件。</p>
<p>MT意为：multithread, static version, 多线程静态版本。编译器加载的是静态运行的库，仅依赖.lib文件。</p>
<p>若生成工程时使用的是<code>/MT</code>生成的，它所调用的运行时库为：<code>LIBCMT.lib</code>，编译器将其安置到.obj文件中，让链接器使用<code>LIBCMT.lib</code>处理外部符号，并完成相关的运算操作（一个文件完成）；</p>
<p>若生成工程时使用的是<code>/MD</code>生成的，调用的运行库有两个：<code>MSVCRT.lib</code>和<code>MSVCRxxx.dll</code>，这里xxx对应MSVC版本，如VS2019使用的MSVC2019，调用的.dll文件为<code>MSVCR142.dll</code>。MSVC2017对应141，MSVC2015对应140，MSVC2013对应120，MSVC2010对应100。编译器将<code>MSVCRT.lib</code>安置到.obj文件中，与<code>MSVCRxxx.dll</code>建立静态链接，由.lib完成外部符号处理，相关的运算交给.dll文件（两个文件完成）；</p>
<p>因此，若一个生成运行库的工程使用的是<code>/MT</code>方式生成，调用的运行库是<code>LIBCMT.lib</code>，在另一个工程中引用这个库时，若这个工程使用的是<code>/MD</code>方式生成，调用的运行库是<code>MSVCRT.lib</code>和<code>MSVCRxxx.dll</code>，当调用某个系统库函数时，若两个运行库中均有这个函数，就会出现重定义的错误。因此当在另一个工程中使用由其他工程生成的库文件时，在“属性-C/C++-代码生成”中的运行库设置一定需要一至。</p>
<p>在Crypto++的.sln文件中，四个工程的默认运行库都是<code>/MT</code>，因此生成库文件要在别的工程中使用，该工程需要将运行库也一同设置为<code>/MT</code>。此时的矛盾点在于，使用VS创建的工程默认都是<code>/MD</code>，有一些现有的工程都是使用<code>/MD</code>的运行库，因此要进行嵌入的话，必须适配。</p>
<p><img src="/images/image-20210603212737537.png" alt="image-20210603212737537" style="zoom:50%;" /></p>
<p>修改不同运行库的方法很简单，右键两个工程<code>cryptdll</code>和<code>cryptlib</code>，在“属性-C/C++-代码生成-运行库”位置全都改成<code>/MD</code>相关，Debug就改成<code>/MDd</code>，<code>/Release</code>改成<code>/MD</code>，改完之后，按照上述小节的基本编译过程进行编译和结果输出，即可保存使用。</p>
<h2 id="使用Crypto-分别完成AES和RSA加密解密"><a href="#使用Crypto-分别完成AES和RSA加密解密" class="headerlink" title="使用Crypto++分别完成AES和RSA加密解密"></a>使用Crypto++分别完成AES和RSA加密解密</h2><blockquote>
<p>RSA:</p>
<p><a href="https://cryptopp.com/wiki/RSA_Cryptography#Encryption_Scheme_.28OAEP_using_SHA.29" target="_blank" rel="noopener">RSA Cryptography - Encryption Scheme (OAEP using SHA)</a></p>
<p>AES:</p>
<p><a href="https://cryptopp.com/wiki/Advanced_Encryption_Standard" target="_blank" rel="noopener">Advanced Encryption Standard - Crypto++ Wiki</a></p>
</blockquote>
<p>在C++中实现AES和RSA加密解密借助Crypto++来实现，这里引用官网的两个示例来演示如何通过C++代码实现加密解密流程。</p>
<h3 id="生成RSA公钥私钥对，进行加密解密"><a href="#生成RSA公钥私钥对，进行加密解密" class="headerlink" title="生成RSA公钥私钥对，进行加密解密"></a>生成RSA公钥私钥对，进行加密解密</h3><p>Crypto++官网示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> CryptoPP;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// Generate keys</span></span><br><span class="line">AutoSeededRandomPool rng;</span><br><span class="line"></span><br><span class="line">InvertibleRSAFunction params;</span><br><span class="line">params.GenerateRandomWithKeySize(rng, <span class="number">3072</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">RSA::PrivateKey <span class="title">privateKey</span><span class="params">(params)</span></span>;</span><br><span class="line"><span class="function">RSA::PublicKey <span class="title">publicKey</span><span class="params">(params)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> plain = <span class="string">"RSA Encryption"</span>, cipher, recovered;</span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// Encryption</span></span><br><span class="line"><span class="function">RSAES_OAEP_SHA_Encryptor <span class="title">e</span><span class="params">(publicKey)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">StringSource <span class="title">ss1</span><span class="params">(plain, <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">new</span> PK_EncryptorFilter(rng, e,</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="keyword">new</span> StringSink(cipher)</span></span></span><br><span class="line"><span class="function"><span class="params">	) <span class="comment">// PK_EncryptorFilter</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>; <span class="comment">// StringSource</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// Decryption</span></span><br><span class="line"><span class="function">RSAES_OAEP_SHA_Decryptor <span class="title">d</span><span class="params">(privateKey)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">StringSource <span class="title">ss2</span><span class="params">(cipher, <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">new</span> PK_DecryptorFilter(rng, d,</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="keyword">new</span> StringSink(recovered)</span></span></span><br><span class="line"><span class="function"><span class="params">	) <span class="comment">// PK_DecryptorFilter</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>; <span class="comment">// StringSource</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Recovered plain text"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<h3 id="AES加密与解密-1"><a href="#AES加密与解密-1" class="headerlink" title="AES加密与解密"></a>AES加密与解密</h3><p>Crypto++官网示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cryptlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"rijndael.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"modes.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"files.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"osrng.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hex.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> CryptoPP;</span><br><span class="line"></span><br><span class="line">    AutoSeededRandomPool prng;</span><br><span class="line">    <span class="function">HexEncoder <span class="title">encoder</span><span class="params">(<span class="keyword">new</span> FileSink(<span class="built_in">std</span>::<span class="built_in">cout</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SecByteBlock <span class="title">key</span><span class="params">(AES::DEFAULT_KEYLENGTH)</span></span>;</span><br><span class="line">    <span class="function">SecByteBlock <span class="title">iv</span><span class="params">(AES::BLOCKSIZE)</span></span>;</span><br><span class="line"></span><br><span class="line">    prng.GenerateBlock(key, key.<span class="built_in">size</span>());</span><br><span class="line">    prng.GenerateBlock(iv, iv.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> plain = <span class="string">"CBC Mode Test"</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> cipher, recovered;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"plain text: "</span> &lt;&lt; plain &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*********************************\</span></span><br><span class="line"><span class="comment">    \*********************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        CBC_Mode&lt; AES &gt;::Encryption e;</span><br><span class="line">        e.SetKeyWithIV(key, key.<span class="built_in">size</span>(), iv);</span><br><span class="line"></span><br><span class="line">        <span class="function">StringSource <span class="title">s</span><span class="params">(plain, <span class="literal">true</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">new</span> StreamTransformationFilter(e,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">new</span> StringSink(cipher)</span></span></span><br><span class="line"><span class="function"><span class="params">            ) <span class="comment">// StreamTransformationFilter</span></span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span>; <span class="comment">// StringSource</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(<span class="keyword">const</span> Exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*********************************\</span></span><br><span class="line"><span class="comment">    \*********************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"key: "</span>;</span><br><span class="line">    encoder.Put(key, key.<span class="built_in">size</span>());</span><br><span class="line">    encoder.MessageEnd();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"iv: "</span>;</span><br><span class="line">    encoder.Put(iv, iv.<span class="built_in">size</span>());</span><br><span class="line">    encoder.MessageEnd();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"cipher text: "</span>;</span><br><span class="line">    encoder.Put((<span class="keyword">const</span> <span class="keyword">byte</span>*)&amp;cipher[<span class="number">0</span>], cipher.<span class="built_in">size</span>());</span><br><span class="line">    encoder.MessageEnd();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*********************************\</span></span><br><span class="line"><span class="comment">    \*********************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        CBC_Mode&lt; AES &gt;::Decryption d;</span><br><span class="line">        d.SetKeyWithIV(key, key.<span class="built_in">size</span>(), iv);</span><br><span class="line"></span><br><span class="line">        <span class="function">StringSource <span class="title">s</span><span class="params">(cipher, <span class="literal">true</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">new</span> StreamTransformationFilter(d,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">new</span> StringSink(recovered)</span></span></span><br><span class="line"><span class="function"><span class="params">            ) <span class="comment">// StreamTransformationFilter</span></span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span>; <span class="comment">// StringSource</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"recovered text: "</span> &lt;&lt; recovered &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(<span class="keyword">const</span> Exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="C-与JS之间互通的加密和解密函数"><a href="#C-与JS之间互通的加密和解密函数" class="headerlink" title="C++与JS之间互通的加密和解密函数"></a>C++与JS之间互通的加密和解密函数</h1><p>为了在C++和JS之间进行数据传输通信，需要设定一个统一的数据交互格式。在这里的设计中，AES密钥表示为16进制字符串，通过AES加密后的内容仍为16进制字符串；RSA公钥私钥对通过.pem文件存储，密钥内容由Base64编码（为了迎合CryptoJS），通过RSA公钥加密后的数据为Base64编码后的字符串。</p>
<h2 id="C-实现的AES加密解密函数"><a href="#C-实现的AES加密解密函数" class="headerlink" title="C++实现的AES加密解密函数"></a>C++实现的AES加密解密函数</h2><p>在Crypto++中，喂给加密解密函数的密钥的数据类型是字节数组，而生成的用于传输的密文、密钥、偏移量是16进制的字符串，因此需要首先实现字节数组和16进制字符串之间的转换。</p>
<p>头文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cryptopp/rijndael.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cryptopp/modes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cryptopp/osrng.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cryptopp/hex.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cryptopp/files.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="1-16进制字符串-转-字节数组"><a href="#1-16进制字符串-转-字节数组" class="headerlink" title="1. 16进制字符串 转 字节数组"></a>1. 16进制字符串 转 字节数组</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 16进制字符串转为字节数组</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="hexStr"&gt;16进制字符串&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;字节数组&lt;/returns&gt;</span></span><br><span class="line"><span class="function">CryptoPP::SecByteBlock <span class="title">HexString2ByteBlock</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> hexStr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> CryptoPP;</span><br><span class="line">	</span><br><span class="line">	<span class="function">SecByteBlock <span class="title">byteBlock</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> byteStr;</span><br><span class="line">		<span class="function">StringSource <span class="title">s</span><span class="params">(hexStr, <span class="literal">true</span>, <span class="keyword">new</span> HexDecoder(<span class="keyword">new</span> StringSink(byteStr)))</span></span>;</span><br><span class="line"></span><br><span class="line">		byteBlock.Assign((<span class="keyword">const</span> <span class="keyword">byte</span>*)&amp;byteStr[<span class="number">0</span>], byteStr.<span class="built_in">size</span>());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> byteBlock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-字节数组-转-16进制字符串"><a href="#2-字节数组-转-16进制字符串" class="headerlink" title="2. 字节数组 转 16进制字符串"></a>2. 字节数组 转 16进制字符串</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 字节数组转16进制字符串</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="byteBlock"&gt;字节数组&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;16进制字符串&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">ByteBlock2HexString</span><span class="params">(CryptoPP::SecByteBlock byteBlock)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> CryptoPP;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">StringSource <span class="title">s</span><span class="params">(byteBlock, byteBlock.<span class="built_in">size</span>(), <span class="literal">true</span>, <span class="keyword">new</span> HexEncoder(<span class="keyword">new</span> StringSink(str)))</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-16进制编码：字符串-转为-16进制字符串"><a href="#3-16进制编码：字符串-转为-16进制字符串" class="headerlink" title="3. 16进制编码：字符串 转为 16进制字符串"></a>3. 16进制编码：字符串 转为 16进制字符串</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 将由char组成的字符串转为16进制字符串</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="cStr"&gt;字符串, 每一位是一个char(-128~127)&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;16进制字符串&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">String2HexString</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> cStr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> CryptoPP;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">StringSource <span class="title">s</span><span class="params">((<span class="keyword">const</span> <span class="keyword">byte</span>*)&amp;cStr[<span class="number">0</span>], cStr.<span class="built_in">size</span>(), <span class="literal">true</span>, <span class="keyword">new</span> HexEncoder(<span class="keyword">new</span> StringSink(str)))</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-16进制解码：16进制字符串-转为-字符串"><a href="#4-16进制解码：16进制字符串-转为-字符串" class="headerlink" title="4. 16进制解码：16进制字符串 转为 字符串"></a>4. 16进制解码：16进制字符串 转为 字符串</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 16进制字符串转为由char组成的字符串</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="hexStr"&gt;16进制字符串&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;由char组成的字符串&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">HexString2String</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> hexStr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> CryptoPP;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">StringSource <span class="title">s</span><span class="params">(hexStr, <span class="literal">true</span>, <span class="keyword">new</span> HexDecoder(<span class="keyword">new</span> StringSink(str)))</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-AES-加密"><a href="#5-AES-加密" class="headerlink" title="5. AES 加密"></a>5. AES 加密</h3><p>加密时，首先将16进制字符串的密钥key和偏移iv转为字节数组，再调用Crypto++相关的函数进行加密。若密钥和偏移字符串为空，则根据指定的长度生成随机的密钥和偏移字符串。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// AES加密</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="str"&gt;待加密的字符串&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="encStr"&gt;指针: 加密后的字符串, 为16进制数组成的字符串&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="key"&gt;指针: 密钥, 若为空指针或长度为0, 则根据keyLen长度生成&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="iv"&gt;指针: 偏移量, 若为空指针或长度为0, 则根据ivLen长度生成&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="keyLen"&gt;密钥长度, 默认16, 若密钥指针不为空, 该参数失效&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="ivLen"&gt;偏移量长度, 默认为16, 若偏移量指针不为空, 该参数失效&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;是否加密成功&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AesEncrypt</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> str, <span class="built_in">std</span>::<span class="built_in">string</span>* hexEncStr = <span class="literal">nullptr</span>, <span class="built_in">std</span>::<span class="built_in">string</span>* hexKeyStr = <span class="literal">nullptr</span>, <span class="built_in">std</span>::<span class="built_in">string</span>* hexIvStr = <span class="literal">nullptr</span>, <span class="keyword">int</span> keyLen = <span class="number">16</span>, <span class="keyword">int</span> ivLen = <span class="number">16</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (hexEncStr == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"未为加密字符串分配空间"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (str.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"待加密的字符串为空"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果key或iv为空指针, 说明不需要输出, 需要在函数执行完成后删除变量</span></span><br><span class="line">	<span class="keyword">bool</span> isDelKey, isDelIv;</span><br><span class="line">	isDelKey = isDelIv = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span> (hexKeyStr == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		hexKeyStr = <span class="keyword">new</span> <span class="built_in">std</span>::<span class="built_in">string</span>();</span><br><span class="line">		isDelKey = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (hexIvStr == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		hexIvStr = <span class="keyword">new</span> <span class="built_in">std</span>::<span class="built_in">string</span>();</span><br><span class="line">		isDelIv = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> isSucceed = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">using</span> <span class="keyword">namespace</span> CryptoPP;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		* 获取密钥和偏移量的字节数组, 若key或iv长度为0, 生成随机字符串</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		SecByteBlock byteKey;</span><br><span class="line">		SecByteBlock byteIv;</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (hexKeyStr-&gt;<span class="built_in">size</span>() != <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				keyLen = <span class="keyword">int</span>(hexKeyStr-&gt;<span class="built_in">size</span>() / <span class="number">2</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (keyLen != <span class="number">8</span> &amp;&amp; keyLen != <span class="number">16</span> &amp;&amp; keyLen != <span class="number">32</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="built_in">std</span>::exception((<span class="string">"密钥长度错误: "</span> + <span class="built_in">std</span>::to_string(keyLen)).c_str());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (hexKeyStr-&gt;<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">// 生成随机的key</span></span><br><span class="line">				byteKey.New(keyLen);</span><br><span class="line">				AutoSeededRandomPool prng;</span><br><span class="line">				prng.GenerateBlock(byteKey, byteKey.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 转为字符串</span></span><br><span class="line">				*hexKeyStr = ByteBlock2HexString(byteKey);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				byteKey = HexString2ByteBlock(*hexKeyStr);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (hexIvStr-&gt;<span class="built_in">size</span>() != <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				ivLen = <span class="keyword">int</span>(hexIvStr-&gt;<span class="built_in">size</span>() / <span class="number">2</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (ivLen != <span class="number">8</span> &amp;&amp; ivLen != <span class="number">16</span> &amp;&amp; ivLen != <span class="number">32</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="built_in">std</span>::exception((<span class="string">"偏移量长度错误: "</span> + <span class="built_in">std</span>::to_string(ivLen)).c_str());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (hexIvStr-&gt;<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">// 生成随机的iv</span></span><br><span class="line">				byteIv.New(ivLen);</span><br><span class="line">				AutoSeededRandomPool prng;</span><br><span class="line">				prng.GenerateBlock(byteIv, byteIv.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 转为字符串</span></span><br><span class="line">				*hexIvStr = ByteBlock2HexString(byteIv);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				byteIv = HexString2ByteBlock(*hexIvStr);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 加密</span></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> encStrByte;</span><br><span class="line">		&#123;</span><br><span class="line">			CBC_Mode&lt;AES&gt;::Encryption e;</span><br><span class="line">			e.SetKeyWithIV(byteKey, byteKey.<span class="built_in">size</span>(), byteIv, byteIv.<span class="built_in">size</span>());</span><br><span class="line">			<span class="function">StringSource <span class="title">s</span><span class="params">(str, <span class="literal">true</span>, <span class="keyword">new</span> StreamTransformationFilter(e, <span class="keyword">new</span> StringSink(encStrByte)))</span></span>;</span><br><span class="line">		&#125;</span><br><span class="line">		*hexEncStr = String2HexString(encStrByte);</span><br><span class="line"></span><br><span class="line">		isSucceed = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		isSucceed = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (isDelKey) <span class="keyword">delete</span> hexKeyStr;</span><br><span class="line">	<span class="keyword">if</span> (isDelIv) <span class="keyword">delete</span> hexIvStr;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> isSucceed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-AES-解密"><a href="#6-AES-解密" class="headerlink" title="6. AES 解密"></a>6. AES 解密</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// AES 解密</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="hexEncStr"&gt;16进制的加密字符串&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="hexKeyStr"&gt;16进制的密钥字符串&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="hexIvStr"&gt;16进制的偏移量字符串&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="decStr"&gt;解密后的字符串&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;是否解密成功&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AesDecrypt</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> hexEncStr, <span class="built_in">std</span>::<span class="built_in">string</span> hexKeyStr, <span class="built_in">std</span>::<span class="built_in">string</span> hexIvStr, <span class="built_in">std</span>::<span class="built_in">string</span>* decStr = <span class="literal">nullptr</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (decStr == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"输出指针为空"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> isSucceed = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> CryptoPP;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 将16进制转为字节数组</span></span><br><span class="line">		SecByteBlock key, iv;</span><br><span class="line">		key = HexString2ByteBlock(hexKeyStr);</span><br><span class="line">		iv = HexString2ByteBlock(hexIvStr);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> cStr = HexString2String(hexEncStr);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 解密</span></span><br><span class="line">		CBC_Mode&lt;AES&gt;::Decryption d;</span><br><span class="line">		d.SetKeyWithIV(key, key.<span class="built_in">size</span>(), iv, iv.<span class="built_in">size</span>());</span><br><span class="line">		<span class="function">StringSource <span class="title">s</span><span class="params">(cStr, <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">new</span> StreamTransformationFilter(d,</span></span></span><br><span class="line"><span class="function"><span class="params">				<span class="keyword">new</span> StringSink(*decStr)</span></span></span><br><span class="line"><span class="function"><span class="params">			)</span></span></span><br><span class="line"><span class="function"><span class="params">		)</span></span>;</span><br><span class="line"></span><br><span class="line">		isSucceed = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		isSucceed = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> isSucceed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="调用结果"><a href="#调用结果" class="headerlink" title="调用结果"></a>调用结果</h3><p>调用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str, key, iv, encStr, decStr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密</span></span><br><span class="line">&#123;</span><br><span class="line">	str = <span class="string">"AES CBC Encrypt, Test, Hello World!!!!!"</span>;</span><br><span class="line">	<span class="keyword">if</span> (AesEncrypt(str, &amp;encStr, &amp;key, &amp;iv))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"key: "</span> &lt;&lt; key &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"iv: "</span> &lt;&lt; iv &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"encStr: "</span> &lt;&lt; encStr &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"加密失败"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (AesDecrypt(encStr, key, iv, &amp;decStr))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"decStr: "</span> &lt;&lt; decStr &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"解密失败"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key: D486B7316C9F9F69078D031DB1499E58</span><br><span class="line">iv: 6A8C943C59F23D9ECE3C09934F5464DA</span><br><span class="line">encStr: 4CA2770DE3FB68D7E17F46B87A1E2689794835A63B1D0A7E2AC10139F018093F13079967ECECBC9046A522D3E8A29B7D</span><br><span class="line">decStr: AES CBC Encrypt, Test, Hello World!!!!!</span><br></pre></td></tr></table></figure>
<h2 id="JS实现的AES加密解密函数"><a href="#JS实现的AES加密解密函数" class="headerlink" title="JS实现的AES加密解密函数"></a>JS实现的AES加密解密函数</h2><p>通过调用CryptoJS实现AES加密解密，需要注意的是输出的参数类型，用于与C++通信的数据格式为16进制字符串，因此需要针对16进制的密文、密钥、偏移量做解析，进而完成加密解密。</p>
<p>这里的密钥长度和偏移量长度指的是将16进制字符串转为字节数组后的长度，存在一个2倍的关系，即：<strong>16进制字符串</strong>的长度除以2得到<strong>由字节数组构成的密钥</strong>的长度。</p>
<h3 id="1-16进制随机字符串生成"><a href="#1-16进制随机字符串生成" class="headerlink" title="1. 16进制随机字符串生成"></a>1. 16进制随机字符串生成</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随机生成指定长度的16进制字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>len 字符串长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span>16进制字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> randomHexStr = <span class="function">(<span class="params">len</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        str += <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">16</span>).toString(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-AES-加密"><a href="#2-AES-加密" class="headerlink" title="2. AES 加密"></a>2. AES 加密</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AES 加密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>str 待加密的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>hexKeyStr 16进制的密钥字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>hexIvStr 16进制的偏移量字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>keyLen 密钥字符串长度, 当16进制密钥字符串为0时生效</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>ivLen 偏移量字符串长度, 当16进制偏移字符串为0时生效</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Object&#125;</span> </span>16进制的密文/密钥/偏移量 &#123;hexEncStr, hexKeyStr, hexIvStr&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> AesEncrypt = <span class="function">(<span class="params">str = <span class="built_in">String</span>, hexKeyStr = <span class="string">''</span>, hexIvStr = <span class="string">''</span>, keyLen = <span class="number">16</span>, ivLen = <span class="number">16</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 解析密钥和偏移</span></span><br><span class="line">    <span class="keyword">var</span> key, iv;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密钥</span></span><br><span class="line">    <span class="keyword">if</span> (hexKeyStr.length !== <span class="number">0</span>) &#123;</span><br><span class="line">        keyLen = hexKeyStr.length / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (keyLen !== <span class="number">8</span> &amp;&amp; keyLen !== <span class="number">16</span> &amp;&amp; keyLen !== <span class="number">32</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'密钥长度不符合要求: '</span> + keyLen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hexKeyStr.length === <span class="number">0</span>) &#123;</span><br><span class="line">        hexKeyStr = randomHexStr(keyLen * <span class="number">2</span>);</span><br><span class="line">        key = CryptoJS.enc.Hex.parse(hexKeyStr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        key = CryptoJS.enc.Hex.parse(hexKeyStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 偏移量</span></span><br><span class="line">    <span class="keyword">if</span> (hexIvStr.length !== <span class="number">0</span>) &#123;</span><br><span class="line">        ivLen = hexIvStr.length / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ivLen !== <span class="number">8</span> &amp;&amp; ivLen !== <span class="number">16</span> &amp;&amp; ivLen !== <span class="number">32</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'偏移量长度不符合要求: '</span> + ivLen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hexIvStr.length === <span class="number">0</span>) &#123;</span><br><span class="line">        hexIvStr = randomHexStr(ivLen * <span class="number">2</span>);</span><br><span class="line">        iv = CryptoJS.enc.Hex.parse(hexIvStr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        iv = CryptoJS.enc.Hex.parse(hexIvStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密</span></span><br><span class="line">    <span class="keyword">const</span> enc = CryptoJS.AES.encrypt(str, key, &#123;</span><br><span class="line">        iv,</span><br><span class="line">        mode: CryptoJS.mode.CBC,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        hexEncStr: enc.ciphertext.toString(),</span><br><span class="line">        hexKeyStr,</span><br><span class="line">        hexIvStr</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-AES-解密"><a href="#3-AES-解密" class="headerlink" title="3. AES 解密"></a>3. AES 解密</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Aes 解密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>encHexStr 16进制字符串: 密文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>keyHexStr 16进制字符串: 密钥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>ivHexStr 16进制字符串: 偏移量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span>解密后的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> AesDecrypt = <span class="function">(<span class="params">encHexStr = <span class="built_in">String</span>, keyHexStr = <span class="built_in">String</span>, ivHexStr = <span class="built_in">String</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 解析密钥和偏移</span></span><br><span class="line">    <span class="keyword">const</span> key = CryptoJS.enc.Hex.parse(keyHexStr);</span><br><span class="line">    <span class="keyword">const</span> iv = CryptoJS.enc.Hex.parse(ivHexStr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解密</span></span><br><span class="line">    <span class="keyword">const</span> dec = CryptoJS.AES.decrypt(CryptoJS.enc.Base64.stringify(CryptoJS.enc.Hex.parse(encHexStr)), key, &#123;</span><br><span class="line">        iv,</span><br><span class="line">        mode: CryptoJS.mode.CBC,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dec.toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="调用结果-1"><a href="#调用结果-1" class="headerlink" title="调用结果"></a>调用结果</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">'AES CBC Encrtypt, Test, Hello World!!!!!'</span>;</span><br><span class="line">    <span class="keyword">const</span> aesResults = AesEncrypt(str);</span><br><span class="line">    <span class="keyword">const</span> encStr = aesResults.hexEncStr;</span><br><span class="line">    <span class="keyword">const</span> key = aesResults.hexKeyStr;</span><br><span class="line">    <span class="keyword">const</span> iv = aesResults.hexIvStr;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'encStr: %s'</span>, encStr);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'key: %s'</span>, key);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'iv: %s'</span>, iv);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> decStr = AesDecrypt(encStr, key, iv);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'decStr: %s'</span>, decStr);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">encStr: 3aed669123c8be163a8ed89602d86e49683828fd860aa73c21aeae6905695c1bba2bfd7205531768c2d66b4f3e9e527f</span><br><span class="line">key: fffbd3050f001baf4c0e21097ff704ad</span><br><span class="line">iv: 6e4fa052041e7faa1e606a6ef56ab34b</span><br><span class="line">decStr: AES CBC Encrtypt, Test, Hello World!!!!!</span><br></pre></td></tr></table></figure>
<h2 id="C-实现的RSA加密解密函数"><a href="#C-实现的RSA加密解密函数" class="headerlink" title="C++实现的RSA加密解密函数"></a>C++实现的RSA加密解密函数</h2><p>相应的RSA函数、Base64编码解码函数需要引入以下头文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cryptopp/rsa.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cryptopp/base64.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="1-生成RSA密钥对"><a href="#1-生成RSA密钥对" class="headerlink" title="1. 生成RSA密钥对"></a>1. 生成RSA密钥对</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 生成RSA密钥对</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GenerateRSAKey</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span>* pubKeyStr, <span class="built_in">std</span>::<span class="built_in">string</span>* prvKeyStr, <span class="keyword">unsigned</span> <span class="keyword">int</span> keyLen = <span class="number">2048</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> CryptoPP;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!pubKeyStr || !prvKeyStr)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="string">"Null Pointer"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 使用随机数初始化不可逆函数</span></span><br><span class="line">		AutoSeededRandomPool rng;</span><br><span class="line">		InvertibleRSAFunction params;</span><br><span class="line">		params.GenerateRandomWithKeySize(rng, keyLen);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 生成随机密钥对</span></span><br><span class="line">		<span class="function">RSA::PublicKey <span class="title">pubKey</span><span class="params">(params)</span></span>;</span><br><span class="line">		<span class="function">RSA::PrivateKey <span class="title">prvKey</span><span class="params">(params)</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 进行Base64编码</span></span><br><span class="line">		<span class="function">Base64Encoder <span class="title">pubeEncoder</span><span class="params">(<span class="keyword">new</span> StringSink(*pubKeyStr))</span></span>;</span><br><span class="line">		pubKey.DEREncode(pubeEncoder);</span><br><span class="line">		pubeEncoder.MessageEnd();</span><br><span class="line"></span><br><span class="line">		<span class="function">Base64Encoder <span class="title">prveEncoder</span><span class="params">(<span class="keyword">new</span> StringSink(*prvKeyStr))</span></span>;</span><br><span class="line">		prvKey.DEREncode(prveEncoder);</span><br><span class="line">		prveEncoder.MessageEnd();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> pubKey, prvKey;</span><br><span class="line">GenerateRSAKey(&amp;pubKey, &amp;prvKey, <span class="number">2048</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"pubKey: \n"</span> &lt;&lt; pubKey &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"prvKey: \n"</span> &lt;&lt; prvKey &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<p>输出是一串带有换行符<code>\n</code>的字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pubKey:</span><br><span class="line">MIIBIDANBgkqhkiG9w0BAQEFAAOCAQ0AMIIBCAKCAQEAqsx9tnvD&#x2F;801PJoUX&#x2F;DV3Vk7cXL7</span><br><span class="line">F3WuSeSGkYyw69dyLJvjb1PYwBOAt3+oKrGsaqclFRhq0iqQaHWRL&#x2F;TVdBM74DWM0wLAu1zU</span><br><span class="line">Mfwql1qpqN2qoFfYS0ETRnsECqiVy1FDDhHvI5vhwJbUCfWDHIa1CPZKCDvbIc3pGYr&#x2F;k3Yq</span><br><span class="line">d4Hh8bdFEpzI47P&#x2F;aIXJm0sF1&#x2F;WugCqAxvC2qO04XoWxMPfbcz&#x2F;OtNbYHAfBange+HV6RVLh</span><br><span class="line">7WMYv7hYO5WLQnfldgkNEAOsX9rYfO9G3EBSDeAyQipkePDPuX6kDvhT&#x2F;kC23tbFKMVoKTIb</span><br><span class="line">2RWXn8YmYjavkXHPbWXICZFWewIBEQ&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">prvKey:</span><br><span class="line">MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCqzH22e8P&#x2F;zTU8mhRf8NXd</span><br><span class="line">WTtxcvsXda5J5IaRjLDr13Ism+NvU9jAE4C3f6gqsaxqpyUVGGrSKpBodZEv9NV0EzvgNYzT</span><br><span class="line">AsC7XNQx&#x2F;CqXWqmo3aqgV9hLQRNGewQKqJXLUUMOEe8jm+HAltQJ9YMchrUI9koIO9shzekZ</span><br><span class="line">iv+Tdip3geHxt0USnMjjs&#x2F;9ohcmbSwXX9a6AKoDG8Lao7ThehbEw99tzP8601tgcB8FqeB74</span><br><span class="line">dXpFUuHtYxi&#x2F;uFg7lYtCd+V2CQ0QA6xf2th870bcQFIN4DJCKmR48M+5fqQO+FP+QLbe1sUo</span><br><span class="line">xWgpMhvZFZefxiZiNq+Rcc9tZcgJkVZ7AgERAoIBAEZUM8OcX8Ou2a+KvRhyOfG7VLY+Z2QD</span><br><span class="line">R8QSzf+yZvezEOUxIWoTd14mJfE0kIoM7KRi8SbN0aHVSoVdliLOOcZiRdTKwYQQMT4XKjKz</span><br><span class="line">IJis3HK1oJxgaB78rZV98pr6H4&#x2F;0SMmO6f+aiiIf&#x2F;PUKvYQ3d7hlaccntJVy54L8&#x2F;9NOGVEX</span><br><span class="line">X&#x2F;kTCA5yJ+cbrbATL4Eq5MQPsRDC6vsc+IkUY8ORf01EIisxScZP+JJVHXY1FnzgqspblCU+</span><br><span class="line">9Z+NPZlHUd0&#x2F;nD5&#x2F;cCHT44UYzoUMh6suvqMRuHJHQ7I5GlcyCP8UdGG5hT&#x2F;+WfJHPPNfpDJ7</span><br><span class="line">n7alL9nbMI+GnokIdOmxt9ECgYEAv21N5MXlkoCFBMI8IeoQ4On7G&#x2F;gsbha+NobcTfzOuhct</span><br><span class="line">rC6P5I27lSk6W843o8op+bMnFDIcFTXJG4JHY9XRSqfNCkrXOdfUGhxs2ybfMlXkYoH+W2iz</span><br><span class="line">hg4EpUswrwFVaZU+BnBi37qfW70wKZMOeeVmDxPsGeHroCumd94MrtECgYEA5GnWpmE1w5OU</span><br><span class="line">0PA0pWUhvneembp+kmVJxnCE6IPIZ2xkYiIwNjN6PTxH&#x2F;A8BaFyopYO&#x2F;EHDqrhQBFnDQzIPN</span><br><span class="line">54FZhEpFecF2IJJ64zeD7518sttJFuiAp7oYWCzUcX2Vz8TSbNMKL495Cq8+Pu&#x2F;&#x2F;dUfzfoZa</span><br><span class="line">1pwarj4YfWGwe4sCgYEAqOf5b4FwNfjt1wW8lmUd86FG+o+uu316qJUcvUh6K7oZPZJ+9tdp</span><br><span class="line">R2Cc55fWvbJhRbwxikpVA6ftrtxdG9rHulfTCRTcBdyN+OvnlDFbhsRB&#x2F;JDRX7a8hVepvwYb</span><br><span class="line">5bXh87&#x2F;rbxfexWhufh9mu0WFPmD&#x2F;svN1+LhIYCaD0y1WfCECgYEAoTumk4&#x2F;ptzr&#x2F;ootwdL&#x2F;b</span><br><span class="line">lYGdIThZWEd&#x2F;XuYDdvOchT10CQkS+RVHOkirSIMQDW6VKYoshBN4euDxtXzPn2wY36aZio7H</span><br><span class="line">oT1EUzo4oGNsMKtnFNcGaoYAdmU+XFvhQQ1asMcrH6QHMKGCniFZHV4dvDLJ&#x2F;vVtTDH0tzrk</span><br><span class="line">HET1C+kCgYEAjmr1l&#x2F;Ie6FTuAU1Hm628n8Slyfp121dHScmjz426gKLmG+ckNXlYOoVj&#x2F;F34</span><br><span class="line">UxYdjlq9UG12RwxMrEdaH2hR3j0IBCHbQrXUXZotJS1Yx1pieZ&#x2F;NE4HB5uAqMk6FlaqWXokZ</span><br><span class="line">mvxkXgwCkVXO4fO5Bh3BZY0+kKXbuByu2Wm4Dfs&#x3D;</span><br></pre></td></tr></table></figure>
<h3 id="2-保存和读取RSA密钥对"><a href="#2-保存和读取RSA密钥对" class="headerlink" title="2. 保存和读取RSA密钥对"></a>2. 保存和读取RSA密钥对</h3><p>在CryptoJS的密钥对保存方式中，将RSA密钥保存到.pem文件时，包含了文件内容的收尾信息，例如私钥的保存格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">Base64编码的密钥：xxxxxxx</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<p>保存：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 保存私钥到文件</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SaveRSAPrvKey</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> filePath, <span class="built_in">std</span>::<span class="built_in">string</span> prvKey)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> CryptoPP;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (filePath.empty())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="string">"File Path is empty!"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="built_in">std</span>::ofstream <span class="title">ofs</span><span class="params">(filePath)</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!ofs.is_open())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="string">"File Open Failed! - "</span> + filePath;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ofs &lt;&lt; <span class="string">"-----BEGIN PRIVATE KEY-----\n"</span>;</span><br><span class="line"></span><br><span class="line">		ofs &lt;&lt; prvKey;</span><br><span class="line"></span><br><span class="line">		ofs &lt;&lt; <span class="string">"-----END PRIVATE KEY-----"</span>;</span><br><span class="line"></span><br><span class="line">		ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 保存公钥到文件</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SaveRSAPubKey</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> filePath, <span class="built_in">std</span>::<span class="built_in">string</span> pubKey)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> CryptoPP;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (filePath.empty())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="string">"File Path is empty!"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="built_in">std</span>::ofstream <span class="title">ofs</span><span class="params">(filePath)</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!ofs.is_open())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="string">"File Open Failed! - "</span> + filePath;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ofs &lt;&lt; <span class="string">"-----BEGIN PUBLIC KEY-----\n"</span>;</span><br><span class="line">		</span><br><span class="line">		ofs &lt;&lt; pubKey;</span><br><span class="line"></span><br><span class="line">		ofs &lt;&lt; <span class="string">"-----END PUBLIC KEY-----"</span>;</span><br><span class="line"></span><br><span class="line">		ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>读取：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 从文件读取RSA私钥</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="filePath"&gt;文件路径&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="prvKey"&gt;读取的私钥字符串&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;是否读取成功&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ReadRSAPrvKey</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> filePath, <span class="built_in">std</span>::<span class="built_in">string</span>* prvKey)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!prvKey)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="string">"Null Pointer"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="built_in">std</span>::ifstream <span class="title">ifs</span><span class="params">(filePath)</span></span>;</span><br><span class="line">		<span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="string">"File Open Failed! - "</span> + filePath;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> <span class="built_in">line</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 首行</span></span><br><span class="line">		<span class="built_in">std</span>::getline(ifs, <span class="built_in">line</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 读取密钥</span></span><br><span class="line">		*prvKey = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">while</span> (!ifs.eof())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::getline(ifs, <span class="built_in">line</span>);</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">line</span> == <span class="string">"-----END PRIVATE KEY-----"</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			*prvKey += <span class="built_in">line</span> + <span class="string">'\n'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ifs.<span class="built_in">close</span>();</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 从文件读取RSA公钥</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="filePath"&gt;文件路径&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="pubKey"&gt;读取的公钥字符串&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;是否读取成功&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ReadRSAPubKey</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> filePath, <span class="built_in">std</span>::<span class="built_in">string</span>* pubKey)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!pubKey)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="string">"Null Pointer"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::ifstream <span class="title">ifs</span><span class="params">(filePath)</span></span>;</span><br><span class="line">		<span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="string">"File Open Failed! - "</span> + filePath;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> <span class="built_in">line</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 首行</span></span><br><span class="line">		<span class="built_in">std</span>::getline(ifs, <span class="built_in">line</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 读取密钥</span></span><br><span class="line">		*pubKey = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">while</span> (!ifs.eof())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::getline(ifs, <span class="built_in">line</span>);</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">line</span> == <span class="string">"-----END PUBLIC KEY-----"</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			*pubKey += <span class="built_in">line</span> + <span class="string">'\n'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ifs.<span class="built_in">close</span>();</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-RSA加密解密"><a href="#3-RSA加密解密" class="headerlink" title="3. RSA加密解密"></a>3. RSA加密解密</h3><p>加密函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// RSA加密</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="str"&gt;待加密字符串&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="pubKey"&gt;公钥&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="encStr"&gt;加密后的字符串&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;是否加密成功&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">RSAEncrypt</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> str, <span class="built_in">std</span>::<span class="built_in">string</span> pubKey, <span class="built_in">std</span>::<span class="built_in">string</span>* encStr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> CryptoPP;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!encStr)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="string">"Null Pointer"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		AutoSeededRandomPool rng;</span><br><span class="line">		<span class="function">StringSource <span class="title">pubKeySrc</span><span class="params">(pubKey, <span class="literal">true</span>, <span class="keyword">new</span> Base64Decoder)</span></span>;</span><br><span class="line">		<span class="function">RSAES_OAEP_SHA_Encryptor <span class="title">e</span><span class="params">(pubKeySrc)</span></span>;</span><br><span class="line">		<span class="function">StringSource <span class="title">s</span><span class="params">(str, <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">new</span> PK_EncryptorFilter(rng, e,</span></span></span><br><span class="line"><span class="function"><span class="params">				<span class="keyword">new</span> Base64Encoder(<span class="keyword">new</span> StringSink(*encStr))</span></span></span><br><span class="line"><span class="function"><span class="params">			)</span></span></span><br><span class="line"><span class="function"><span class="params">		)</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解密函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// RSA解密</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="encStr"&gt;待解密字符串&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="prvKey"&gt;私钥&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="str"&gt;解密后的字符串&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;是否解密成功&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">RSADecrypt</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> encStr, <span class="built_in">std</span>::<span class="built_in">string</span> prvKey, <span class="built_in">std</span>::<span class="built_in">string</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> CryptoPP;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!str)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="string">"Null Pointer"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		AutoSeededRandomPool rng;</span><br><span class="line">		<span class="function">StringSource <span class="title">prvKeySrc</span><span class="params">(prvKey, <span class="literal">true</span>, <span class="keyword">new</span> Base64Decoder)</span></span>;</span><br><span class="line">		<span class="function">RSAES_OAEP_SHA_Decryptor <span class="title">d</span><span class="params">(prvKeySrc)</span></span>;</span><br><span class="line">		<span class="function">StringSource <span class="title">s</span><span class="params">(encStr, <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">new</span> Base64Decoder(</span></span></span><br><span class="line"><span class="function"><span class="params">				<span class="keyword">new</span> PK_DecryptorFilter(rng, d,</span></span></span><br><span class="line"><span class="function"><span class="params">					<span class="keyword">new</span> StringSink(*str)</span></span></span><br><span class="line"><span class="function"><span class="params">				)</span></span></span><br><span class="line"><span class="function"><span class="params">			)</span></span></span><br><span class="line"><span class="function"><span class="params">		)</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="调用示例"><a href="#调用示例" class="headerlink" title="调用示例"></a>调用示例</h3><p>以下示例演示了从.pem文件中读取密钥对进行RSA加密解密的过程：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">///*</span></span><br><span class="line"><span class="comment">//* RSA加密解密</span></span><br><span class="line"><span class="comment">//* 需要读取文件: 公钥.pem, 私钥.pem</span></span><br><span class="line"><span class="comment">//* 公钥 + 明文字符串 --&gt; 密文</span></span><br><span class="line"><span class="comment">//* 私钥 + 密文字符串 --&gt; 明文</span></span><br><span class="line"><span class="comment">//*/</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> pubKey;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> prvKey;</span><br><span class="line"></span><br><span class="line">ReadRSAPubKey(<span class="string">"./test_pub.pem"</span>, &amp;pubKey);</span><br><span class="line">ReadRSAPrvKey(<span class="string">"./test_prv.pem"</span>, &amp;prvKey);</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; pubKey &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; prvKey &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str = <span class="string">"Test RSA Encrypt, Hello World"</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> encStr;</span><br><span class="line">RSAEncrypt(str, pubKey, &amp;encStr);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; encStr &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> decStr;</span><br><span class="line">RSADecrypt(encStr, prvKey, &amp;decStr);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; decStr &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">公钥：</span><br><span class="line">MIIBIDANBgkqhkiG9w0BAQEFAAOCAQ0AMIIBCAKCAQEAqZI1MFbpgioFmCGeITRcFuoEP0n3</span><br><span class="line">UA&#x2F;lSxxZKwSFQCS9eguEQIxVs05njeI4Fhoy5Ch6SWz8jvQZtXZa9qtmJqNUFnssJAPVmW&#x2F;1</span><br><span class="line">yXtr444KdOsFXdhC8sWc9MVVUYgcuyMIBrtWNfLOr5yPnbLd6mW7mDKJW2eN8WQWxW+6Q8sI</span><br><span class="line">2hHU2A8iCvfewFbk8B6mkQTBDdd9jlhBJYFHuiYaxikHUiz4lVyIjOfmdayXgcoSzmuK3+oD</span><br><span class="line">xBVLeIFfBmWFN7O6HRQCthA1T9O7v1Q&#x2F;0lp321Ml1o7fovw6wYnhYiWzjHdO1QrH4RgepXV3</span><br><span class="line">SpH05yySYUQkSWun9tXrF2lTBwIBEQ&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">私钥：</span><br><span class="line">MIIEuwIBADANBgkqhkiG9w0BAQEFAASCBKUwggShAgEAAoIBAQCpkjUwVumCKgWYIZ4hNFwW</span><br><span class="line">6gQ&#x2F;SfdQD+VLHFkrBIVAJL16C4RAjFWzTmeN4jgWGjLkKHpJbPyO9Bm1dlr2q2Ymo1QWeywk</span><br><span class="line">A9WZb&#x2F;XJe2vjjgp06wVd2ELyxZz0xVVRiBy7IwgGu1Y18s6vnI+dst3qZbuYMolbZ43xZBbF</span><br><span class="line">b7pDywjaEdTYDyIK997AVuTwHqaRBMEN132OWEElgUe6JhrGKQdSLPiVXIiM5+Z1rJeByhLO</span><br><span class="line">a4rf6gPEFUt4gV8GZYU3s7odFAK2EDVP07u&#x2F;VD&#x2F;SWnfbUyXWjt+i&#x2F;DrBieFiJbOMd07VCsfh</span><br><span class="line">GB6ldXdKkfTnLJJhRCRJa6f21esXaVMHAgERAoIBABjv2qU59Sm64rR9ahPxHJn1PNwhdzFr</span><br><span class="line">v9ZW&#x2F;g3bBIlu0JHyooH2hRLW0v5G6iFeNKkVAuyuJSQU1pqvhdj7Fo02IvQ&#x2F;SkGIF+HbwkNG</span><br><span class="line">2yj+TNT1YqvrGOd3aefCqqobi8EqzHl15wfvAEcAb3kSxkgeBP&#x2F;LMlE04CsHMIZyUBkHB7gX</span><br><span class="line">yqyDrkWtoxLgyDTuptbwNqFzB7ZHXIL6gKDY3QJWDQHgiC0Nd6bGHUATgY5s+07auUqXsaN1</span><br><span class="line">xdpu7RLF3PpKpiq12R7gpKHJKkcYEyM4ZVJyVFyAQnTHXBNpUuxf5BlcGxj1fA09HspTdqlM</span><br><span class="line">X+1EtVNYOhsIGonfXQwoiakCgYEAxssVdJ+DfkPVMUnlZ2p1yeaL+CNM8adS+O2wQ8ZFCKmy</span><br><span class="line">2J8HXU7g7PdE9r8&#x2F;WWbNn4lzAQIR0E1lmr4KQ+kx3nN2PTdy1&#x2F;1KW8gXYPd&#x2F;hRQrFWxH+O61</span><br><span class="line">0ZCHG5tavR4J8oIhr71HKr8lAq0ossx535auuE8SiAMAeUHAPDbia28CgYEA2l5al6NynFO5</span><br><span class="line">JVx4+OqFOvTkIjpJJEK5n&#x2F;BczHrrMz&#x2F;GowzIY625oSeS9ZxPAFJ9xl&#x2F;2BEkD4ev1PCBRm9C+</span><br><span class="line">+1F1EvZmMxoBeghkbn390jUWSws07z+kFvhcrQiWI5ZcfsRJs6E+UZS55DIVNzIQvDZEPEHZ</span><br><span class="line">qsHNrXHznI3ZpekCgYBpPlanJ0WdMvhlY1tU3gIfmCv71nQHdrN0uhIFw1G5SsgYVDETR+B9</span><br><span class="line">c9k3VjCYvfRjhQCmLkWqg1Pogroj8+05iGvGDkvbwlSK8XXJ7HCv3YA4hJ6S2LqcH1aWJRHr</span><br><span class="line">pn28nz8Cr4AHkl7jTJ0TXTF2XtT4KdyiW&#x2F;ExIs8u7+FH7wKBgQCaJHwuzbpQOxlHjJGgpYs4</span><br><span class="line">rN1FVlG&#x2F;PiitIiNjKZb2&#x2F;9eCJyQKIEbMG+9D9d1po6QTjwgDBl0X8dpIj0iqOP9H&#x2F;UOU6ioF</span><br><span class="line">9D1HFPuZSeBYJXkl6csDO&#x2F;tbgiNM9wCRl1BZe39Rnv7QLL9z5x4I2AvQJk5IpvQAEFTy5wZQ</span><br><span class="line">ZCEp0QKBgA5a&#x2F;PIYaKQo3n2qw5jdRI34HLy7Bhpmt2pHMVfcnou&#x2F;TIZpbyCqSJcqFRorrOvn</span><br><span class="line">i9EhWenM0b4wStuD4KRYByG91N7oZwRKuexIXmzz2YbpImvrfTFbT52wIV5k9jVcgodCDK7N</span><br><span class="line">DekQzQSgu1PFgQitYO+&#x2F;vaa0DNkKR7yLLguX</span><br><span class="line"></span><br><span class="line">密文：</span><br><span class="line">GqvUMa1RpFa5+bgXzXOeor1NkRvYSg776jK9Gq5Foe38sePak9OQEXljUMKxCipjABs6EP+y</span><br><span class="line">AVhxYhYUl&#x2F;P3xvihponjjDY2U+Fy&#x2F;JJhGCHjAhzcpfl04a7xQY9C2dPbt41TXXZ4sIYh2k18</span><br><span class="line">X9bvjeQmdtq9x+gQvK4zW0OZn9IBBiKSnbJ2C+N1T&#x2F;f3YczL4UagjIVNKjGQ6vYhVLBhPAH+</span><br><span class="line">N02bNvknfL&#x2F;ll+2YNNtuviQpUhIQwlbYOkquQjjzC6JJ8SxOGDogfrO2LQ5V4qENFdqRTa9m</span><br><span class="line">CSRdc4BQbNw7EY6if&#x2F;EobRTDu&#x2F;1qBsR&#x2F;f1xBmKfBKiZXA9CXwIkJIw&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">明文：</span><br><span class="line">Test RSA Encrypt, Hello World</span><br></pre></td></tr></table></figure>
<h2 id="JS实现的RSA加密解密函数"><a href="#JS实现的RSA加密解密函数" class="headerlink" title="JS实现的RSA加密解密函数"></a>JS实现的RSA加密解密函数</h2><p>与本文之前章节的借助<code>Node-RSA</code>实现的RSA加密解密方式一至，唯一需要修改的地方在于读取的密钥模式，从<code>pkcs1</code>改为<code>pkcs1_oaep</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> NodeRSA = <span class="built_in">require</span>(<span class="string">'node-rsa'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> keyDir = path.join(__dirname, <span class="string">'rsa'</span>);</span><br><span class="line">    <span class="keyword">const</span> pubKey = <span class="keyword">new</span> NodeRSA(fs.readFileSync(path.join(keyDir, <span class="string">'test_pub.pem'</span>)),</span><br><span class="line">        <span class="string">'pkcs8-public-pem'</span>, &#123; <span class="attr">encryptionScheme</span>: <span class="string">'pkcs1_oaep'</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> prvKey = <span class="keyword">new</span> NodeRSA(fs.readFileSync(path.join(keyDir, <span class="string">'test_prv.pem'</span>)),</span><br><span class="line">        <span class="string">'pkcs8-private-pem'</span>, &#123; <span class="attr">encryptionScheme</span>: <span class="string">'pkcs1_oaep'</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> msg = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        text: <span class="string">'Hello World'</span>,</span><br><span class="line">        time: <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'公钥:\n%s\n'</span>, pubKey.exportKey(<span class="string">'pkcs8-public-pem'</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'私钥:\n%s\n'</span>, prvKey.exportKey(<span class="string">'pkcs8-private-pem'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> encMsg = pubKey.encrypt(msg, <span class="string">'base64'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'密文:\n%s\n'</span>, encMsg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> decMsg = prvKey.decrypt(encMsg, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'明文:\n%s\n'</span>, decMsg);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">公钥:</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIDANBgkqhkiG9w0BAQEFAAOCAQ0AMIIBCAKCAQEAqZI1MFbpgioFmCGeITRc</span><br><span class="line">FuoEP0n3UA&#x2F;lSxxZKwSFQCS9eguEQIxVs05njeI4Fhoy5Ch6SWz8jvQZtXZa9qtm</span><br><span class="line">JqNUFnssJAPVmW&#x2F;1yXtr444KdOsFXdhC8sWc9MVVUYgcuyMIBrtWNfLOr5yPnbLd</span><br><span class="line">6mW7mDKJW2eN8WQWxW+6Q8sI2hHU2A8iCvfewFbk8B6mkQTBDdd9jlhBJYFHuiYa</span><br><span class="line">xikHUiz4lVyIjOfmdayXgcoSzmuK3+oDxBVLeIFfBmWFN7O6HRQCthA1T9O7v1Q&#x2F;</span><br><span class="line">0lp321Ml1o7fovw6wYnhYiWzjHdO1QrH4RgepXV3SpH05yySYUQkSWun9tXrF2lT</span><br><span class="line">BwIBEQ&#x3D;&#x3D;</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line"></span><br><span class="line">私钥:</span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIIEuwIBADANBgkqhkiG9w0BAQEFAASCBKUwggShAgEAAoIBAQCpkjUwVumCKgWY</span><br><span class="line">IZ4hNFwW6gQ&#x2F;SfdQD+VLHFkrBIVAJL16C4RAjFWzTmeN4jgWGjLkKHpJbPyO9Bm1</span><br><span class="line">dlr2q2Ymo1QWeywkA9WZb&#x2F;XJe2vjjgp06wVd2ELyxZz0xVVRiBy7IwgGu1Y18s6v</span><br><span class="line">nI+dst3qZbuYMolbZ43xZBbFb7pDywjaEdTYDyIK997AVuTwHqaRBMEN132OWEEl</span><br><span class="line">gUe6JhrGKQdSLPiVXIiM5+Z1rJeByhLOa4rf6gPEFUt4gV8GZYU3s7odFAK2EDVP</span><br><span class="line">07u&#x2F;VD&#x2F;SWnfbUyXWjt+i&#x2F;DrBieFiJbOMd07VCsfhGB6ldXdKkfTnLJJhRCRJa6f2</span><br><span class="line">1esXaVMHAgERAoIBABjv2qU59Sm64rR9ahPxHJn1PNwhdzFrv9ZW&#x2F;g3bBIlu0JHy</span><br><span class="line">ooH2hRLW0v5G6iFeNKkVAuyuJSQU1pqvhdj7Fo02IvQ&#x2F;SkGIF+HbwkNG2yj+TNT1</span><br><span class="line">YqvrGOd3aefCqqobi8EqzHl15wfvAEcAb3kSxkgeBP&#x2F;LMlE04CsHMIZyUBkHB7gX</span><br><span class="line">yqyDrkWtoxLgyDTuptbwNqFzB7ZHXIL6gKDY3QJWDQHgiC0Nd6bGHUATgY5s+07a</span><br><span class="line">uUqXsaN1xdpu7RLF3PpKpiq12R7gpKHJKkcYEyM4ZVJyVFyAQnTHXBNpUuxf5Blc</span><br><span class="line">Gxj1fA09HspTdqlMX+1EtVNYOhsIGonfXQwoiakCgYEAxssVdJ+DfkPVMUnlZ2p1</span><br><span class="line">yeaL+CNM8adS+O2wQ8ZFCKmy2J8HXU7g7PdE9r8&#x2F;WWbNn4lzAQIR0E1lmr4KQ+kx</span><br><span class="line">3nN2PTdy1&#x2F;1KW8gXYPd&#x2F;hRQrFWxH+O610ZCHG5tavR4J8oIhr71HKr8lAq0ossx5</span><br><span class="line">35auuE8SiAMAeUHAPDbia28CgYEA2l5al6NynFO5JVx4+OqFOvTkIjpJJEK5n&#x2F;Bc</span><br><span class="line">zHrrMz&#x2F;GowzIY625oSeS9ZxPAFJ9xl&#x2F;2BEkD4ev1PCBRm9C++1F1EvZmMxoBeghk</span><br><span class="line">bn390jUWSws07z+kFvhcrQiWI5ZcfsRJs6E+UZS55DIVNzIQvDZEPEHZqsHNrXHz</span><br><span class="line">nI3ZpekCgYBpPlanJ0WdMvhlY1tU3gIfmCv71nQHdrN0uhIFw1G5SsgYVDETR+B9</span><br><span class="line">c9k3VjCYvfRjhQCmLkWqg1Pogroj8+05iGvGDkvbwlSK8XXJ7HCv3YA4hJ6S2Lqc</span><br><span class="line">H1aWJRHrpn28nz8Cr4AHkl7jTJ0TXTF2XtT4KdyiW&#x2F;ExIs8u7+FH7wKBgQCaJHwu</span><br><span class="line">zbpQOxlHjJGgpYs4rN1FVlG&#x2F;PiitIiNjKZb2&#x2F;9eCJyQKIEbMG+9D9d1po6QTjwgD</span><br><span class="line">Bl0X8dpIj0iqOP9H&#x2F;UOU6ioF9D1HFPuZSeBYJXkl6csDO&#x2F;tbgiNM9wCRl1BZe39R</span><br><span class="line">nv7QLL9z5x4I2AvQJk5IpvQAEFTy5wZQZCEp0QKBgA5a&#x2F;PIYaKQo3n2qw5jdRI34</span><br><span class="line">HLy7Bhpmt2pHMVfcnou&#x2F;TIZpbyCqSJcqFRorrOvni9EhWenM0b4wStuD4KRYByG9</span><br><span class="line">1N7oZwRKuexIXmzz2YbpImvrfTFbT52wIV5k9jVcgodCDK7NDekQzQSgu1PFgQit</span><br><span class="line">YO+&#x2F;vaa0DNkKR7yLLguX</span><br><span class="line">-----END PRIVATE KEY-----</span><br><span class="line"></span><br><span class="line">密文:</span><br><span class="line">ZTONK6mHtgVEDjFB9mIOqg+pxEfNgpeJQuH5I0gVVP1OkUaL37VKTA26UcIVakphcVa3Ju5fD0TpaEFpZRsWrxuGIM8Umrbc7fI1Y2Pie3O&#x2F;EhlF51DRqKxEL5LZKbVqulCw1kI6rtxQlWsogeOwIVHY2vTsGQAjAJB1nZUQNZEfelnSRZxs+OU8VlRgn3hWAua5wtPrCM48eq+Mfo1X&#x2F;EuzD8EFAAtqHEsYQzz6UJl+LPZCw0vGk7flJ3HffMFhXmezCEQbKWeE6B9eyaSP9qFDiZGAu8AoCBWyNJeMIZ9cmbNG1yPCEyciICUUCvqw2Av05VMmJSpQkmoehrZuOw&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">明文:</span><br><span class="line">&#123;&quot;text&quot;:&quot;Hello World&quot;,&quot;time&quot;:1624011798408&#125;</span><br></pre></td></tr></table></figure>
<p>C++实现的</p>
<h1 id="C-与JS的配合使用的AES-RSA双重加密"><a href="#C-与JS的配合使用的AES-RSA双重加密" class="headerlink" title="C++与JS的配合使用的AES+RSA双重加密"></a>C++与JS的配合使用的AES+RSA双重加密</h1><p>AES+RSA的双重加密思路为：随机生成AES的密钥key和偏移iv，使用该密钥+偏移对数据进行加密，得到密文1，接着使用RSA算法对包含AES密钥key和偏移iv的json字符串进行加密，得到密文2；传输两串密文，接收方收到这两串密文后，首先通过RSA解密算法解出AES密钥和偏移，接着再解出数据的明文。</p>
<h2 id="加密说明示例"><a href="#加密说明示例" class="headerlink" title="加密说明示例"></a>加密说明示例</h2><p>原始数据（JSON格式）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"account"</span>: <span class="string">"test"</span>,</span><br><span class="line">	<span class="attr">"password"</span>: <span class="string">"123456"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>随机生成的AES密钥和偏移，用JSON格式保存：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"D8BB5D728B2C96A77AFA7519D060BE57"</span>,</span><br><span class="line">    <span class="attr">"iv"</span>: <span class="string">"170A9B9576B1ECAEE13583C784D6139B"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将原始数据和AES密钥和偏移的JSON转为字符串后，经AES+RSA双重加密，得到加密后的数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"mM5/dq8hd2ekOHPHT48yrcAJrw3Z4aMAwdmifDeVYbK2xfy53cRm5tJISq5jnN6xDX5SvwrDKCy3QB9qGW0C1wzp/ou5SuJ3/4Rumd2ZdEs9KbmnN/Atcm1oksi5TfmGnqlbnwKN2Z98saZ46DBdiH4pGC2Us9m2MqNTlHXgbQuU56SAjvM7seN/RCwFxjPkAOCjvMIKcq7O2TOhABWSt6GIypvT2PkwopavfmNO3J+5G4dQgNNiCeRM/5uRDEdQcz0GWhF0Fh846rSF9Yt2S5oTww/gxyiMSGOe5fuxaBGEvEhOzEhF6UqHo9lR1qHidSjNJbVQWKpadcKu5VLVuw=="</span>,</span><br><span class="line">    <span class="attr">"params"</span>: <span class="string">"C596AF0D135693FF66B515161710158100B55434E7CDD62C7696BABAA7C5F68774AD6C839551FA00F5353C9DCD6F47CE0814D34658215E1BCA4C40D778E136A5"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解密时，先用RSA私钥从<code>key</code>中解出AES密钥和偏移，接着用AES算法从<code>params</code>中解出原始数据。</p>
<h2 id="纯C-实现"><a href="#纯C-实现" class="headerlink" title="纯C++实现"></a>纯C++实现</h2><p>用到了<code>boost</code>存放JSON数据，头文件、预定义和工具函数如下所示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/property_tree/ptree.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/property_tree/json_parser.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> boost::property_tree::ptree JsonData;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(JsonData json, <span class="built_in">std</span>::<span class="built_in">string</span> title = <span class="string">""</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">stringstream</span> ss;</span><br><span class="line">		boost::property_tree::write_json(ss, json);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (title.<span class="built_in">size</span>() &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; title &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ss.str() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加密函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AES_RSA_Encrypt</span><span class="params">(JsonData data, JsonData* encData, <span class="built_in">std</span>::<span class="built_in">string</span> rsaPubKeyPath = <span class="string">"./test_pub.pem"</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!encData) <span class="keyword">throw</span> <span class="string">"输出指针为空"</span>;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">stringstream</span> ss;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 转为字符串</span></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> jsonStr;</span><br><span class="line">		boost::property_tree::write_json(ss, data);</span><br><span class="line">		jsonStr = ss.str();</span><br><span class="line">		ss.str(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		* AES 加密</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		JsonData aesKey;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> encJsonStr, key, iv;</span><br><span class="line">		<span class="keyword">if</span> (!AesEncrypt(jsonStr, &amp;encJsonStr, &amp;key, &amp;iv)) <span class="keyword">throw</span> <span class="string">"Aes加密失败"</span>;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> aesKeyStr;</span><br><span class="line">		aesKey.<span class="built_in">put</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="string">"key"</span>, key);</span><br><span class="line">		aesKey.<span class="built_in">put</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="string">"iv"</span>, iv);</span><br><span class="line">		boost::property_tree::write_json(ss, aesKey);</span><br><span class="line">		aesKeyStr = ss.str();</span><br><span class="line">		ss.str(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		* RSA加密</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> encAesKeyStr, pubKey;</span><br><span class="line">		<span class="keyword">if</span> (!ReadRSAPubKey(rsaPubKeyPath, &amp;pubKey)) <span class="keyword">throw</span> <span class="string">"读取RSA公钥失败"</span>;</span><br><span class="line">		<span class="keyword">if</span> (!RSAEncrypt(aesKeyStr, pubKey, &amp;encAesKeyStr)) <span class="keyword">throw</span> <span class="string">"RSA加密失败"</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 覆盖输出内容</span></span><br><span class="line">		encData-&gt;<span class="built_in">clear</span>();</span><br><span class="line">		encData-&gt;<span class="built_in">put</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="string">"params"</span>, encJsonStr);</span><br><span class="line">		encData-&gt;<span class="built_in">put</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="string">"key"</span>, encAesKeyStr);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解密函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AES_RSA_Decrypt</span><span class="params">(JsonData encData, JsonData* decData, <span class="built_in">std</span>::<span class="built_in">string</span> rsaPrvKeyPath = <span class="string">"./test_prv.pem"</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!decData) <span class="keyword">throw</span> <span class="string">"输出指针为空"</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">using</span> boost::property_tree::read_json;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">stringstream</span> ss;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 解出AES密钥</span></span><br><span class="line">		JsonData aesKey;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> key, iv, aesKeyStr;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> prvKey;</span><br><span class="line">		<span class="keyword">if</span> (!ReadRSAPrvKey(rsaPrvKeyPath, &amp;prvKey)) <span class="keyword">throw</span> <span class="string">"读取RSA密钥失败"</span>;</span><br><span class="line">		<span class="keyword">if</span> (!RSADecrypt(encData.<span class="built_in">get</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="string">"key"</span>), prvKey, &amp;aesKeyStr)) <span class="keyword">throw</span> <span class="string">"RSA解密失败"</span>;</span><br><span class="line">		ss.str(aesKeyStr);</span><br><span class="line">		read_json(ss, aesKey);</span><br><span class="line">		key = aesKey.<span class="built_in">get</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="string">"key"</span>);</span><br><span class="line">		iv = aesKey.<span class="built_in">get</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="string">"iv"</span>);</span><br><span class="line">		ss.str(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// AES解密</span></span><br><span class="line">		decData-&gt;<span class="built_in">clear</span>();</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> dataStr;</span><br><span class="line">		<span class="keyword">if</span> (!AesDecrypt(encData.<span class="built_in">get</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="string">"params"</span>), key, iv, &amp;dataStr)) <span class="keyword">throw</span> <span class="string">"AES解密失败"</span>;</span><br><span class="line">		ss.str(dataStr);</span><br><span class="line">		read_json(ss, *decData);</span><br><span class="line">		ss.str(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用结果：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// json数据</span></span><br><span class="line">		JsonData json;</span><br><span class="line">		json.<span class="built_in">put</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="string">"account"</span>, <span class="string">"test"</span>);</span><br><span class="line">		json.<span class="built_in">put</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="string">"password"</span>, <span class="string">"123456"</span>);</span><br><span class="line">		<span class="built_in">print</span>(json, <span class="string">"原始数据："</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 加密</span></span><br><span class="line">		JsonData encJson;</span><br><span class="line">		AES_RSA_Encrypt(json, &amp;encJson, <span class="string">"./test_pub.pem"</span>);</span><br><span class="line">		<span class="built_in">print</span>(encJson, <span class="string">"加密后的数据："</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 解密</span></span><br><span class="line">		JsonData decJson;</span><br><span class="line">		AES_RSA_Decrypt(encJson, &amp;decJson, <span class="string">"./test_prv.pem"</span>);</span><br><span class="line">		<span class="built_in">print</span>(decJson, <span class="string">"解密后的数据："</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原始数据：</span><br><span class="line">&#123;</span><br><span class="line">    &quot;account&quot;: &quot;test&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;123456&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">加密后的数据：</span><br><span class="line">&#123;</span><br><span class="line">    &quot;params&quot;: &quot;16DCBC4F58148239BCC789C356F8A33CFE9453C91589B4395C9694CCF39D14382BFEC01512686A4796AC8203EE341E1D24CBCD83E2B9247266E3B708DA842909&quot;,</span><br><span class="line">    &quot;key&quot;: &quot;m3c\&#x2F;k\&#x2F;9Rcus1Zg6gJuqaXbtbbUmEp2VIh4cu2J14DIiMRqQdyFQbOEjVyFPt7yVLrNJM+JIL\nR5Jz12dAmrvaEosxn2QLF91E2vXFPb5\&#x2F;jMHbpO4aP6LqfAse6SJWu73eNqBXHfmw4Jjlk8Pp\nGst58hFt8JBEqPqESSMiMH5YAYtxQW2vk08xQO86bxkBwPrUlFnp0VJ\&#x2F;bcyZ2881fP0lus8m\nIppIvnChyyDHK2sUS1pRCBfnKOHayVrLQft6euXnDgXinhtxBIiM90FBEG1lAugnz6+PRpDl\nWXOXv5XdeXsFYTmqC\&#x2F;2L+34L3a4pdM+mjD7zaybUXwhRjAa77IQOpg&#x3D;&#x3D;\n&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">解密后的数据：</span><br><span class="line">&#123;</span><br><span class="line">    &quot;account&quot;: &quot;test&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;123456&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="纯JS实现"><a href="#纯JS实现" class="headerlink" title="纯JS实现"></a>纯JS实现</h2><p>加密和解密函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> encrypt = <span class="function">(<span class="params">json = <span class="built_in">Object</span>, rsaPubKeyPath = <span class="string">'./test_pub.pem'</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// AES加密</span></span><br><span class="line">    <span class="keyword">const</span> aesResults = AesEncrypt(<span class="built_in">JSON</span>.stringify(json));</span><br><span class="line">    <span class="keyword">const</span> key = aesResults.hexKeyStr;</span><br><span class="line">    <span class="keyword">const</span> iv = aesResults.hexIvStr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RSA加密</span></span><br><span class="line">    <span class="keyword">const</span> aesKey = &#123; key, iv &#125;;</span><br><span class="line">    <span class="keyword">const</span> pubKey = <span class="keyword">new</span> NodeRSA(fs.readFileSync(rsaPubKeyPath),</span><br><span class="line">        <span class="string">'pkcs8-public-pem'</span>, &#123; <span class="attr">encryptionScheme</span>: <span class="string">'pkcs1_oaep'</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        params: aesResults.hexEncStr,</span><br><span class="line">        key: pubKey.encrypt(<span class="built_in">JSON</span>.stringify(aesKey), <span class="string">'base64'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> decrypt = <span class="function">(<span class="params">encJson = <span class="built_in">Object</span>, rsaPrvKeyPath = <span class="string">'./test_prv.pem'</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// RSA解密，解出AES密钥偏移</span></span><br><span class="line">    <span class="keyword">const</span> prvKey = <span class="keyword">new</span> NodeRSA(fs.readFileSync(rsaPrvKeyPath),</span><br><span class="line">        <span class="string">'pkcs8-private-pem'</span>, &#123; <span class="attr">encryptionScheme</span>: <span class="string">'pkcs1_oaep'</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> aesKey = <span class="built_in">JSON</span>.parse(prvKey.decrypt(encJson[<span class="string">'key'</span>], <span class="string">'utf8'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AES解密</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(AesDecrypt(encJson[<span class="string">'params'</span>], aesKey[<span class="string">'key'</span>], aesKey[<span class="string">'iv'</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> json = &#123;</span><br><span class="line">        account: <span class="string">'test'</span>,</span><br><span class="line">        password: <span class="string">'123456'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'原始数据：\n'</span>, json);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> encJson = encrypt(json, <span class="string">'./test_pub.pem'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'加密后的数据：\n'</span>, encJson);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> decJson = decrypt(encJson, <span class="string">'./test_prv.pem'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'解密后的数据：\n'</span>, decJson);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原始数据：</span><br><span class="line"> &#123; account: &#39;test&#39;, password: &#39;123456&#39; &#125;</span><br><span class="line">加密后的数据：</span><br><span class="line"> &#123;</span><br><span class="line">  params: &#39;9f1de48b55c4b422f01923fd7e535293a07ddb950615fae7c7563313ba605e7164e67145ecb285ea1ea507d851c9238f&#39;,</span><br><span class="line">  key: &#39;C7ZEIYUcxT2suOAIwNZj+Inof&#x2F;WUFMWPPSrbB29hQ38AkeS44wsfizrvaojAzzN&#x2F;xfyOXt9Slg88p6QmnmlvtIwNtl9ibrDqQJP&#x2F;IGtV7bYImQIGKhm8MjAR6lYohM8dhExB5ht+NUzKXBQYzkjXgipbqOXwk0bu2NNrBfftQ+&#x2F;EJVOsZd5W7Dsf+hhsnSWgZ&#x2F;DusMjRqt0kY1UGKFTgKotBin0bNTpRARCnBdYibrb+JyqiYOQotQgSXfLvdBmJVFs9YvGDZJtfn6zz5yBDkkWY4LDIF7&#x2F;aIukw7qYnK2E17r+sWA018ElofSmOv4yyKe6WKgvU49R5DOaKBUUjpA&#x3D;&#x3D;&#39;</span><br><span class="line">&#125;</span><br><span class="line">解密后的数据：</span><br><span class="line"> &#123; account: &#39;test&#39;, password: &#39;123456&#39; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-加密，JS解密"><a href="#C-加密，JS解密" class="headerlink" title="C++加密，JS解密"></a>C++加密，JS解密</h2><p>在C++中，通过如下调用方式进行数据加密：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// json数据</span></span><br><span class="line">		JsonData json;</span><br><span class="line">		json.<span class="built_in">put</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="string">"account"</span>, <span class="string">"test"</span>);</span><br><span class="line">		json.<span class="built_in">put</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="string">"password"</span>, <span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 加密</span></span><br><span class="line">		JsonData encJson;</span><br><span class="line">		AES_RSA_Encrypt(json, &amp;encJson, <span class="string">"./test_pub.pem"</span>);</span><br><span class="line">		<span class="built_in">print</span>(encJson);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到输出：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"params"</span>: <span class="string">"645588172227F34FBA6C7A6D2D3CB1154046E970D780536E6BCC83B75BC4DFE3D90AD7C2A96CB48E6547AFEC0FA1DD7605DD0A44FAA42FAC8E284E69445F90C6"</span>,</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"aRoVwUpqFYyDcCxFfDEmaFQIq3djFKMH\/U0vyb8rJAvKX4hhzVieDcCnsC9icWAaXqMQJKEe\n9Hj7XvSf9bRG68qze5KHW3vNRGS44iAr2hI0Bf+w0SbPceYElnAritlFd2iTtKe5QkdPt9gR\nnV1O7JnWISXDW0CmdTJ\/T3okCo40sRyQnnKhbyv15MaM1xJVaAmBQDxVA0LsiSyM23kPu2bi\nQg9QOISF3zdp8\/QNrrjS66AlgMfBlFB3DUA1+kC8KSQfa4k1X\/SVfoeZLd6LB4OBR0hQbXi\/\n6mQpbXOpTpaCrQkEsrcnCdebWQPcBKtmF0OuuvAKXpmekhYyE9MwKw==\n"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将输出拷贝到JS中解密：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> encJson = &#123;</span><br><span class="line">        <span class="string">"params"</span>: <span class="string">"645588172227F34FBA6C7A6D2D3CB1154046E970D780536E6BCC83B75BC4DFE3D90AD7C2A96CB48E6547AFEC0FA1DD7605DD0A44FAA42FAC8E284E69445F90C6"</span>,</span><br><span class="line">        <span class="string">"key"</span>: <span class="string">"aRoVwUpqFYyDcCxFfDEmaFQIq3djFKMH\/U0vyb8rJAvKX4hhzVieDcCnsC9icWAaXqMQJKEe\n9Hj7XvSf9bRG68qze5KHW3vNRGS44iAr2hI0Bf+w0SbPceYElnAritlFd2iTtKe5QkdPt9gR\nnV1O7JnWISXDW0CmdTJ\/T3okCo40sRyQnnKhbyv15MaM1xJVaAmBQDxVA0LsiSyM23kPu2bi\nQg9QOISF3zdp8\/QNrrjS66AlgMfBlFB3DUA1+kC8KSQfa4k1X\/SVfoeZLd6LB4OBR0hQbXi\/\n6mQpbXOpTpaCrQkEsrcnCdebWQPcBKtmF0OuuvAKXpmekhYyE9MwKw==\n"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> decJson = decrypt(encJson, <span class="string">'./test_prv.pem'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'解密后的数据：\n'</span>, decJson);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到输出：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">解密后的数据：</span><br><span class="line"> &#123; account: 'test', password: '123456' &#125;</span><br></pre></td></tr></table></figure>
<h2 id="JS加密，C-加密"><a href="#JS加密，C-加密" class="headerlink" title="JS加密，C++加密"></a>JS加密，C++加密</h2><p>在JS中加密：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> json = &#123;</span><br><span class="line">        account: <span class="string">'test'</span>,</span><br><span class="line">        password: <span class="string">'123456'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> encJson = encrypt(json, <span class="string">'./test_pub.pem'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(encJson);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  params: 'a16f83ebb59728f9b0a22fcbac1011c718017cbea832e2abe400e4628ee5562eaf382641a9b9bd8edf09c3ac36106e30',</span><br><span class="line">  key: 'Us2xIrwbB7WgZVMJriP8oAXUFa1UF9cTJPq1pvUHWdJCtkbcYLtRD5WJwTavtmg0Wj1EmzN6awMPmHR0bEdu1Psh8UbgEzZh1+pHQ86kw3DrHn2JhYNbZeucKUwKjqbKIzr/ti7hKRxtVE6PtUn9xZe+BfhgJzqZRAvr12NToXc+vU5DxT5Rp7BhMDasi1V1O/ssNIh3/RIeasfD1tmTtlzGmW3F/+VBAkR1S3eaFpPBtNB77SHYJSZW6GEjJA85HZCYyuQKVRPIxoPPp2vC7LOanxhREMiAebEt877RJ5SuC1UP4jHV46VBBhn7N2N/eh1eeQysyV8+ipM3kzA4Og=='</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拷贝到C++中进行解密：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 加密</span></span><br><span class="line">		JsonData encJson;</span><br><span class="line">		encJson.<span class="built_in">put</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="string">"params"</span>, <span class="string">"a16f83ebb59728f9b0a22fcbac1011c718017cbea832e2abe400e4628ee5562eaf382641a9b9bd8edf09c3ac36106e30"</span>);</span><br><span class="line">		encJson.<span class="built_in">put</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="string">"key"</span>, <span class="string">"Us2xIrwbB7WgZVMJriP8oAXUFa1UF9cTJPq1pvUHWdJCtkbcYLtRD5WJwTavtmg0Wj1EmzN6awMPmHR0bEdu1Psh8UbgEzZh1+pHQ86kw3DrHn2JhYNbZeucKUwKjqbKIzr/ti7hKRxtVE6PtUn9xZe+BfhgJzqZRAvr12NToXc+vU5DxT5Rp7BhMDasi1V1O/ssNIh3/RIeasfD1tmTtlzGmW3F/+VBAkR1S3eaFpPBtNB77SHYJSZW6GEjJA85HZCYyuQKVRPIxoPPp2vC7LOanxhREMiAebEt877RJ5SuC1UP4jHV46VBBhn7N2N/eh1eeQysyV8+ipM3kzA4Og=="</span>);</span><br><span class="line">	</span><br><span class="line">		<span class="comment">// 解密</span></span><br><span class="line">		JsonData decJson;</span><br><span class="line">		AES_RSA_Decrypt(encJson, &amp;decJson, <span class="string">"./test_prv.pem"</span>);</span><br><span class="line">		<span class="built_in">print</span>(decJson, <span class="string">"解密后的数据："</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">解密后的数据：</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"account"</span>: <span class="string">"test"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"123456"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>crypto</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Node.js</tag>
        <tag>Crypto.js</tag>
        <tag>AES</tag>
        <tag>CryptoPP</tag>
        <tag>Node-RSA</tag>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Windows.h的C++提示对话框封装接口</title>
    <url>/2021/07/03/%E5%9F%BA%E4%BA%8EWindows-h%E7%9A%84C-%E6%8F%90%E7%A4%BA%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%B0%81%E8%A3%85%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="MessageBox函数接口"><a href="#MessageBox函数接口" class="headerlink" title="MessageBox函数接口"></a>MessageBox函数接口</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MessageBoxW</span><span class="params">(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>hWnd</code>：对话框父窗口句柄，对话框显示在Delphi窗体内，可使用窗体的Handle属性，否则可用0，使其直接作为桌面窗口的子窗口。</li>
<li><code>lpText</code>：欲显示的信息字符串。</li>
<li><code>lpCaption</code>：对话框标题字符串。</li>
<li><code>uType</code>：对话框类型常量。</li>
</ul>
<p>该函数的返回值为整数，用于对话框按钮的识别。</p>
<h1 id="类型常量说明"><a href="#类型常量说明" class="headerlink" title="类型常量说明"></a>类型常量说明</h1><blockquote>
<p><a href="https://blog.csdn.net/qq_35040828/article/details/51690413" target="_blank" rel="noopener">https://blog.csdn.net/qq_35040828/article/details/51690413</a></p>
</blockquote>
<p>对话框的类型常量可由按钮组合、缺省按钮、显示图标、运行模式四种常量组合而成。</p>
<p>（1）按钮组合常量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MB_OK = $<span class="number">00000000</span>;               <span class="comment">// 一个确定按钮</span></span><br><span class="line">MB_OKCANCEL = $<span class="number">00000001</span>;         <span class="comment">// 一个确定按钮，一个取消按钮</span></span><br><span class="line">MB_ABORTRETRYIGNORE = $<span class="number">00000002</span>; <span class="comment">// 一个异常终止按钮，一个重试按钮，一个忽略按钮</span></span><br><span class="line">MB_YESNOCANCEL = $<span class="number">00000003</span>;      <span class="comment">// 一个是按钮，一个否按钮，一个取消按钮</span></span><br><span class="line">MB_YESNO = $<span class="number">00000004</span>;            <span class="comment">// 一个是按钮，一个否按钮</span></span><br><span class="line">MB_RETRYCANCEL = $<span class="number">00000005</span>;      <span class="comment">// 一个重试按钮，一个取消按钮</span></span><br></pre></td></tr></table></figure>
<p>（2）缺省按钮常量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MB_DEFBUTTON1 = $<span class="number">00000000</span>;　　　　　<span class="comment">// 第一个按钮为缺省按钮</span></span><br><span class="line">MB_DEFBUTTON2 = $<span class="number">00000100</span>;　　　　　<span class="comment">// 第二个按钮为缺省按钮</span></span><br><span class="line">MB_DEFBUTTON3 = $<span class="number">00000200</span>;　　　　　<span class="comment">// 第三个按钮为缺省按钮</span></span><br><span class="line">MB_DEFBUTTON4 = $<span class="number">00000300</span>;　　　　　<span class="comment">// 第四个按钮为缺省按钮</span></span><br></pre></td></tr></table></figure>
<p>（3）图标常量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MB_ICONHAND = $<span class="number">00000010</span>;               <span class="comment">// “×”号图标</span></span><br><span class="line">MB_ICONQUESTION = $<span class="number">00000020</span>;           <span class="comment">// “？”号图标</span></span><br><span class="line">MB_ICONEXCLAMATION = $<span class="number">00000030</span>;　　　　 <span class="comment">// “！”号图标</span></span><br><span class="line">MB_ICONASTERISK = $<span class="number">00000040</span>;　　　　　  <span class="comment">// “i”图标</span></span><br><span class="line">MB_USERICON = $<span class="number">00000080</span>;               <span class="comment">// 用户图标</span></span><br><span class="line">MB_ICONWARNING = MB_ICONEXCLAMATION;   <span class="comment">// “！”号图标</span></span><br><span class="line">MB_ICONERROR = MB_ICONHAND;            <span class="comment">// “×”号图标</span></span><br><span class="line">MB_ICONINFORMATION = MB_ICONASTERISK;  <span class="comment">// “i”图标</span></span><br><span class="line">MB_ICONSTOP = MB_ICONHAND;             <span class="comment">// “×”号图标</span></span><br></pre></td></tr></table></figure>
<p>（4）运行模式常量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MB_APPLMODAL = $<span class="number">00000000</span>;    <span class="comment">// 应用程序模式，在未结束对话框前也能切换到另一应用程序</span></span><br><span class="line">MB_SYSTEMMODAL = $<span class="number">00001000</span>;  <span class="comment">// 系统模式，必须结束对话框后，才能做其他操作</span></span><br><span class="line">MB_TASKMODAL = $<span class="number">00002000</span>;    <span class="comment">// 任务模式，在未结束对话框前也能切换到另一应用程序</span></span><br><span class="line">MB_HELP = $<span class="number">00004000</span>;         <span class="comment">// Help Button</span></span><br></pre></td></tr></table></figure>
<h1 id="函数返回值说明"><a href="#函数返回值说明" class="headerlink" title="函数返回值说明"></a>函数返回值说明</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>                <span class="comment">//对话框建立失败</span></span><br><span class="line">IDOK = <span class="number">1</span>         <span class="comment">//按确定按钮</span></span><br><span class="line">IDCANCEL = <span class="number">2</span>     <span class="comment">//按取消按钮</span></span><br><span class="line">IDABOUT = <span class="number">3</span>      <span class="comment">//按异常终止按钮</span></span><br><span class="line">IDRETRY = <span class="number">4</span>      <span class="comment">//按重试按钮</span></span><br><span class="line">IDIGNORE = <span class="number">5</span>     <span class="comment">//按忽略按钮</span></span><br><span class="line">IDYES = <span class="number">6</span>        <span class="comment">//按是按钮</span></span><br><span class="line">IDNO = <span class="number">7</span>         <span class="comment">//按否按钮</span></span><br></pre></td></tr></table></figure>
<h1 id="封装接口实现"><a href="#封装接口实现" class="headerlink" title="封装接口实现"></a>封装接口实现</h1><p>.h文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"KvStrCvt.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> KvMsgBox &#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">info</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">text</span>, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; title = <span class="string">"消息"</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">warning</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">text</span>, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; title = <span class="string">"警告"</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">error</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">text</span>, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; title = <span class="string">"失败"</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">question</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">text</span>, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; title = <span class="string">"问题"</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>.cpp文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"KvMsgBox.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KvMsgBox::info</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">text</span>, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; title)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> MessageBox(<span class="literal">NULL</span>, KvStrCvt::s2ws(<span class="built_in">text</span>).c_str(),</span><br><span class="line">		KvStrCvt::s2ws(title).c_str(), MB_OKCANCEL | MB_ICONINFORMATION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KvMsgBox::warning</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">text</span>, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; title)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> MessageBox(<span class="literal">NULL</span>, KvStrCvt::s2ws(<span class="built_in">text</span>).c_str(),</span><br><span class="line">		KvStrCvt::s2ws(title).c_str(), MB_OKCANCEL | MB_ICONWARNING);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KvMsgBox::error</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">text</span>, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; title)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> MessageBox(<span class="literal">NULL</span>, KvStrCvt::s2ws(<span class="built_in">text</span>).c_str(),</span><br><span class="line">		KvStrCvt::s2ws(title).c_str(), MB_OKCANCEL | MB_ICONERROR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KvMsgBox::question</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="built_in">text</span>, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; title)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> MessageBox(<span class="literal">NULL</span>, KvStrCvt::s2ws(<span class="built_in">text</span>).c_str(),</span><br><span class="line">		KvStrCvt::s2ws(title).c_str(), MB_OKCANCEL | MB_ICONQUESTION);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>补充：<code>KvStrCvt::s2ws()</code>函数实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">wstring</span> <span class="title">KvStrCvt::s2ws</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	<span class="keyword">int</span> slength = (<span class="keyword">int</span>)s.length() + <span class="number">1</span>;</span><br><span class="line">	len = MultiByteToWideChar(CP_ACP, <span class="number">0</span>, s.c_str(), slength, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">wchar_t</span>* buf = <span class="keyword">new</span> <span class="keyword">wchar_t</span>[len];</span><br><span class="line">	MultiByteToWideChar(CP_ACP, <span class="number">0</span>, s.c_str(), slength, buf, len);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">wstring</span> <span class="title">r</span><span class="params">(buf)</span></span>;</span><br><span class="line">	<span class="keyword">delete</span>[] buf;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Flex布局学习笔记</title>
    <url>/2021/07/01/Flex%E5%B8%83%E5%B1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Flex布局学习笔记"><a href="#Flex布局学习笔记" class="headerlink" title="Flex布局学习笔记"></a>Flex布局学习笔记</h1><p>参考资料：</p>
<blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局教程：语法篇 | 阮一峰</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">Flex 布局教程：实例篇 | 阮一峰</a></p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Flex布局是一种CSS布局，由W3C联盟于2009年提出，可以简便、完整、响应式地实现各种页面布局，浏览器的支持情况如下图所示。</p>
<p><img src="/images/image-20210628013753185.png" alt="image-20210628013753185" style="zoom: 67%;" /></p>
<p>Flex布局全称Flexible Box，即弹性布局。采用Flex布局需要分清<strong>容器（Flex Container）</strong>和<strong>项目（Flex Item）</strong>的概念。Flex容器是一个用于参照的外壳，其内部的元素为Flex项目。任何元素都可以设置为Flex容器，包括行内元素。</p>
<p><img src="/images/image-20210628015434116.png" alt="image-20210628015434116"></p>
<p>如上图所示，Flex容器中存在主轴（main axis）和交叉轴（cross axis），分别用<code>main start</code>, <code>main end</code>, <code>cross start</code>, <code>cross end</code>表达它们的起始位置，可以简单理解为坐标轴原点位于左上角。Flex容器中的项目默认沿着主轴方向排列，使用<code>main size</code>和<code>cross size</code>分别表示Flex项目的宽高。</p>
<h2 id="设置Flex的方法"><a href="#设置Flex的方法" class="headerlink" title="设置Flex的方法"></a>设置Flex的方法</h2><blockquote>
<p>注意：将父元素设置为Flex布局后，<strong>子元素</strong>的<code>float</code>, <code>clear</code>, <code>vertical-align</code>属性将失效。</p>
</blockquote>
<p>任何容器都可以设置为flex容器：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>甚至是行内元素：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.inline-box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于Webkit内核的浏览器（Safari, Chrome等），需要加上<code>-webkit</code>前缀：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex;  <span class="comment">/* Safari */</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Flex容器（父元素）的属性"><a href="#Flex容器（父元素）的属性" class="headerlink" title="Flex容器（父元素）的属性"></a>Flex容器（父元素）的属性</h1><p>Flex容器是Flex布局的外壳，作为父元素，其中的子元素自动成为Flex项目。包含以下六个属性：</p>
<blockquote>
<ul>
<li><code>flex-direction</code>: 决定主轴的方向，即子元素的排列方向，默认为<code>row</code>；</li>
<li><code>flex-wrap</code>: 定义了子元素的换行规则，默认为<code>nowrap</code>；</li>
<li><code>flex-flow</code>: 是direction和wrap和缩写，控制方向和换行规则，默认为<code>row nowrap</code>；</li>
<li><code>justify-content</code>: 定义了子元素在<strong>主轴上</strong>（横向）的对齐方式，默认为<code>flex-start</code>；</li>
<li><code>align-items</code>: 定义了子元素在<strong>交叉轴上</strong>（纵向）的对齐方式，默认为<code>stretch</code>；</li>
<li><code>align-content</code>: 定义了<strong>多跟主轴</strong>的在交叉轴方向上（纵向）的对齐方式，若只有一根主轴，则该属性无效，默认为<code>stretch</code>。</li>
</ul>
</blockquote>
<h1 id="Flex项目（子元素）的属性"><a href="#Flex项目（子元素）的属性" class="headerlink" title="Flex项目（子元素）的属性"></a>Flex项目（子元素）的属性</h1><p>位于Flex容器中的元素称为Flex项目，可以通过对其进行设置，控制其在父元素Flex容器中的位置，包含以下六个属性：</p>
<blockquote>
<ul>
<li><code>order</code>: 定义项目的排列顺序。数值越小，排列越靠前，默认为<code>0</code>；</li>
<li><code>flex-grow</code>: 定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大；</li>
<li><code>flex-shrink</code>: 当一行的元素默认宽度大于容器时起作用，默认为<code>1</code>。为<code>0</code>时表示绝不收缩，不为0时，将一行的所有元素的该属性值统计起来，根据每一个元素的对应比例减少宽度，该值越大被扣掉的宽度越多；</li>
<li><code>flex-basis</code>: 定义了子元素在Flex布局容器中沿着主轴方向的宽度。其凌驾于<code>width</code>和<code>height</code>属性之上，例如，当主轴为横轴时，设定该属性为某一固定px值后，无论设置<code>width</code>为多少时，都不会改变其宽度，主轴为纵轴时同理。当主轴空间不足时，将根据所有子元素的<code>flex-basis</code>的值进行等比例缩放，若该值为auto，则将子元素的宽度加入比例中计算，若该值为某一像素值，则直接加入比例中。</li>
<li><code>flex</code>: 是flex-grow, flex-shrink, flex-basis的缩写，控制子元素的缩放和宽度，默认为<code>0 1 auto</code>，可以简写为auto或none：<code>auto = 1 1 auto</code>, <code>none = 0 0 auto</code>；</li>
<li><code>align-self</code>: 允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</li>
</ul>
</blockquote>
<h1 id="试验Flex布局的简单网页"><a href="#试验Flex布局的简单网页" class="headerlink" title="试验Flex布局的简单网页"></a>试验Flex布局的简单网页</h1><p>写了一个简单的网页来测试Flex布局容器的效果。</p>
<p><img src="/images/image-20210628120620725.png" alt="image-20210628120620725"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flex 布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        html,</span><br><span class="line">        body &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#app</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            text-align: center;</span><br><span class="line">            padding: 20px;</span><br><span class="line">            padding-top: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.5</span>);</span></span><br><span class="line">            margin: 20px 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box-child</span> &#123;</span></span><br><span class="line">            border: 1px solid;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Flex布局试验<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100%;text-align: left;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span>容器设置<span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            高度：<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"boxStyle.height"</span>&gt;</span> 宽度：<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"boxStyle.width"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            flex-direction:</span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"boxStyle['flex-direction']"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"row"</span>&gt;</span>row<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"row-reverse"</span>&gt;</span>row-reverse<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"column"</span>&gt;</span>column<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"column-reverse"</span>&gt;</span>column-reverse<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            flex-wrap:</span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"boxStyle['flex-wrap']"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"nowrap"</span>&gt;</span>nowrap<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"wrap"</span>&gt;</span>wrap<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"wrap-reverse"</span>&gt;</span>wrap-reverse<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            flex-flow: <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"boxStyle['flex-flow']"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            justify-content:</span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"boxStyle['justify-content']"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"flex-start"</span>&gt;</span>flex-start<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"flex-end"</span>&gt;</span>flex-end<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"center"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"space-between"</span>&gt;</span>space-between<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"space-around"</span>&gt;</span>space-around<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            align-items:</span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"boxStyle['align-items']"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"flex-start"</span>&gt;</span>flex-start<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"flex-end"</span>&gt;</span>flex-end<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"center"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"baseline"</span>&gt;</span>baseline<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"stretch"</span>&gt;</span>stretch<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            align-content:</span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"boxStyle['align-content']"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"flex-start"</span>&gt;</span>flex-start<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"flex-end"</span>&gt;</span>flex-end<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"center"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"space-between"</span>&gt;</span>space-between<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"space-around"</span>&gt;</span>space-around<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"stretch"</span>&gt;</span>stretch<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span>子元素设置<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            高度：<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"itemStyle.height"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"randomItemHeight"</span>&gt;</span>随机高度<span class="tag">&lt;/<span class="name">button</span>&gt;</span> 宽度：<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-model</span>=<span class="string">"itemStyle.width"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            order: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model</span>=<span class="string">"itemStyle.order"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            flex-grow: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model</span>=<span class="string">"itemStyle['flex-grow']"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            flex-shrink: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model</span>=<span class="string">"itemStyle['flex-shrink']"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            flex-basis: <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"itemStyle['flex-basis']"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            flex: <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"itemStyle['flex']"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            align-self: <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"itemStyle['align-self']"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"auto"</span>&gt;</span>auto<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"flex-start"</span>&gt;</span>flex-start<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"flex-end"</span>&gt;</span>flex-end<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"center"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"baseline"</span>&gt;</span>baseline<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"stretch"</span>&gt;</span>stretch<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addChild"</span>&gt;</span>添加子元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"delChild"</span>&gt;</span>删除子元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span> 当前选中：&#123;&#123;selectedItem&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:style</span>=<span class="string">"boxStyle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-child"</span> <span class="attr">v-for</span>=<span class="string">"(style, idx) in itemStyleList"</span> <span class="attr">:key</span>=<span class="string">"idx"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:style</span>=<span class="string">"&#123;...style, 'border-color': selectedItem === idx ? 'red' : 'black'&#125;"</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">click</span>=<span class="string">"clickChild(style, idx)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line">                    boxStyle: &#123;</span><br><span class="line"><span class="actionscript">                        height: <span class="string">'200px'</span>,</span></span><br><span class="line"><span class="actionscript">                        width: <span class="string">'100%'</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">'flex-direction'</span>: <span class="string">'row'</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">'flex-wrap'</span>: <span class="string">'nowrap'</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">'flex-flow'</span>: <span class="string">'row nowrap'</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">'justify-content'</span>: <span class="string">'flex-start'</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">'align-items'</span>: <span class="string">'stretch'</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">'align-content'</span>: <span class="string">'stretch'</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    itemStyleList: [],</span><br><span class="line">                    itemStyle: &#123;</span><br><span class="line"><span class="actionscript">                        height: <span class="string">'100px'</span>,</span></span><br><span class="line"><span class="actionscript">                        width: <span class="string">'100px'</span>,</span></span><br><span class="line">                        order: 0,</span><br><span class="line"><span class="actionscript">                        <span class="string">'flex-grow'</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">'flex-shrink'</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">'flex-basis'</span>: <span class="string">'auto'</span>,</span></span><br><span class="line"><span class="actionscript">                        flex: <span class="string">'0 1 auto'</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">'align-self'</span>: <span class="string">'auto'</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    selectedItem: -1</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                addChild() &#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (!(<span class="keyword">this</span>.selectedItem === <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.itemStyleList.length === <span class="number">0</span>))</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.selectedItem++;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.itemStyleList.push(&#123; ...this.itemStyle &#125;);</span></span><br><span class="line">                &#125;,</span><br><span class="line">                clickChild(style, idx) &#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.selectedItem = idx;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.itemStyle = style;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                randomItemHeight() &#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.itemStyle.height = <span class="built_in">parseInt</span>(<span class="number">80</span> + <span class="built_in">Math</span>.random() * <span class="number">70</span>) + <span class="string">'px'</span>;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                delChild() &#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (<span class="keyword">this</span>.selectedItem === <span class="number">-1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span> alert(<span class="string">'未选中子元素'</span>);</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (<span class="keyword">this</span>.selectedItem &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.itemStyleList.length === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.itemStyleList.splice(<span class="keyword">this</span>.selectedItem, <span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (<span class="keyword">this</span>.selectedItem &gt; <span class="number">0</span>)</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.selectedItem--;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="Flex容器属性详解"><a href="#Flex容器属性详解" class="headerlink" title="Flex容器属性详解"></a>Flex容器属性详解</h1><h2 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h2><p>该属性决定了项目排列的方向，也就是主轴的方向。</p>
<p>可选值：</p>
<blockquote>
<ul>
<li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li>
<li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li>
<li><code>column</code>：主轴为垂直方向，起点在上沿。</li>
<li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li>
</ul>
</blockquote>
<h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h2><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。可取的值有三个：</p>
<blockquote>
<ul>
<li><code>nowrap</code>（默认值）：不换行</li>
<li><code>wrap</code>：换行，第一行在上</li>
<li><code>wrap-reverse</code>：换行，第一行在下</li>
</ul>
</blockquote>
<h2 id="flex-wrap-1"><a href="#flex-wrap-1" class="headerlink" title="flex-wrap"></a>flex-wrap</h2><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>
<h2 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h2><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。有五个取值：</p>
<blockquote>
<ul>
<li><code>flex-start</code>（默认值）：左对齐</li>
<li><code>flex-end</code>：右对齐</li>
<li><code>center</code>： 居中</li>
<li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li>
<li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
</blockquote>
<p><img src="/images/image-20210630033333172.png" alt="image-20210630033333172" style="zoom:67%;" /></p>
<h2 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h2><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。有五种取值：</p>
<blockquote>
<ul>
<li><code>flex-start</code>：交叉轴的起点对齐。</li>
<li><code>flex-end</code>：交叉轴的终点对齐。</li>
<li><code>center</code>：交叉轴的中点对齐。</li>
<li><code>baseline</code>: 项目的第一行文字的基线对齐。</li>
<li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>
</blockquote>
<p><img src="/images/image-20210630033815236.png" alt="image-20210630033815236" style="zoom:67%;" /></p>
<h2 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h2><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。有六个取值：</p>
<blockquote>
<ul>
<li><code>flex-start</code>：与交叉轴的起点对齐。</li>
<li><code>flex-end</code>：与交叉轴的终点对齐。</li>
<li><code>center</code>：与交叉轴的中点对齐。</li>
<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li>
</ul>
</blockquote>
<p><img src="/images/image-20210630033923829.png" alt="image-20210630033923829" style="zoom:67%;" /></p>
<h1 id="Flex项目属性详解"><a href="#Flex项目属性详解" class="headerlink" title="Flex项目属性详解"></a>Flex项目属性详解</h1><h2 id="order"><a href="#order" class="headerlink" title="order"></a>order</h2><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>
<p><img src="/images/image-20210630034626568.png" alt="image-20210630034626568"></p>
<h2 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h2><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p>
<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
<p><img src="/images/image-20210630034725611.png" alt="image-20210630034725611"></p>
<h2 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h2><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
<p>负值对该属性无效。</p>
<p><img src="/images/image-20210630034746270.png" alt="image-20210630034746270"></p>
<h2 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h2><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p>
<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p>
<p>设置了<code>flex-basis</code>之后，子元素在Flex容器中的宽度由该属性的值定义，与元素本身的宽度不再有关系：</p>
<p><img src="/images/image-20210630040028425.png" alt="image-20210630040028425" style="zoom: 67%;" /></p>
<p>当空间不足时，会将所有元素的<code>flex-basis</code>值相加后进行等比缩放：</p>
<p><img src="/images/image-20210630040234895.png" alt="image-20210630040234895" style="zoom:67%;" /></p>
<h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p>
<p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h2 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h2><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>，即展开占满整列。</p>
<p><img src="/images/image-20210630040833035.png" alt="image-20210630040833035" style="zoom:80%;" /></p>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ std::string std::wstring LPCWSTR相互转换</title>
    <url>/2021/07/03/cpp-std-string-std-wstring-lpcwstr/</url>
    <content><![CDATA[<p>在C++的Windows.h中的许多界面函数为了兼容中文字符串，都用到了<code>LPCWSTR</code>的数据类型（如<code>OutputDebugString()</code>, <code>MessageBox()</code>），该数据类型是<code>const wchar_t *</code>的别名，即用宽字符表示的字符串。</p>
<p>在标准库STL中，表示宽字符的数据类型是<code>std::wstring</code>，而最常用的字符串类型是<code>std::string</code>。为了将<code>std::string</code>转为<code>LPCWSTR</code>，一种做法是首先将<code>std::string</code>转为<code>std::wstring</code>，再通过<code>std::wstring::c_str()</code>方法获取静态宽字符串；另一种做法是将<code>std::string</code>转为<code>wchar_t *</code>，再直接赋值给<code>LPCWSTR</code>。</p>
<h1 id="std-wstring-与-std-string-相互转换"><a href="#std-wstring-与-std-string-相互转换" class="headerlink" title="std::wstring 与 std::string 相互转换"></a>std::wstring 与 std::string 相互转换</h1><p>需要引入头文件<code>Windows.h</code>，该文件包含了这一步必备的函数：<code>MultiByteToWideChar</code>。</p>
<p>std::wstring -&gt; std::string</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">ws2s</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">wstring</span>&amp; ws)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	<span class="keyword">int</span> slen = (<span class="keyword">int</span>)ws.length() + <span class="number">1</span>;</span><br><span class="line">	len = WideCharToMultiByte(CP_ACP, <span class="number">0</span>, ws.c_str(), slen, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">char</span>* buf = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">	WideCharToMultiByte(CP_ACP, <span class="number">0</span>, ws.c_str(), slen, buf, len, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">r</span><span class="params">(buf)</span></span>;</span><br><span class="line">	<span class="keyword">delete</span>[] buf;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>std::string -&gt; std::wstring</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">wstring</span> <span class="title">s2ws</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	<span class="keyword">int</span> slength = (<span class="keyword">int</span>)s.length() + <span class="number">1</span>;</span><br><span class="line">	len = MultiByteToWideChar(CP_ACP, <span class="number">0</span>, s.c_str(), slength, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">wchar_t</span>* buf = <span class="keyword">new</span> <span class="keyword">wchar_t</span>[len];</span><br><span class="line">	MultiByteToWideChar(CP_ACP, <span class="number">0</span>, s.c_str(), slength, buf, len);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">wstring</span> <span class="title">r</span><span class="params">(buf)</span></span>;</span><br><span class="line">	<span class="keyword">delete</span>[] buf;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="std-string-与-LPCWSTR-相互转换"><a href="#std-string-与-LPCWSTR-相互转换" class="headerlink" title="std::string 与 LPCWSTR 相互转换"></a>std::string 与 LPCWSTR 相互转换</h1><h2 id="通过std-wstring作为中转（推荐）"><a href="#通过std-wstring作为中转（推荐）" class="headerlink" title="通过std::wstring作为中转（推荐）"></a>通过std::wstring作为中转（推荐）</h2><p><code>LPCWSTR</code> == <code>const WCHAR *</code> == <code>const wchar_t *</code>，明白了这个，就可以联想到，<code>std::wstring</code>的<code>c_str()</code>函数的返回值类型就是<code>LPCWSTR</code></p>
<p>std::string -&gt; LPCWSTR</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="built_in">text</span> = <span class="string">"hello"</span>;</span><br><span class="line">LPCWSTR r = s2ws(<span class="built_in">text</span>).c_str();</span><br></pre></td></tr></table></figure>
<p>LPCWSTR -&gt; std::string：字符串默认是<code>const char *</code>，加上<code>L</code>表明是<code>const wchar_t *</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">LPCWSTR wstr = <span class="string">L"国泰民安"</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s = ws2s(wstr);</span><br></pre></td></tr></table></figure>
<h2 id="直接转换（没事找事）"><a href="#直接转换（没事找事）" class="headerlink" title="直接转换（没事找事）"></a>直接转换（没事找事）</h2><blockquote>
<p>直接转换纯属没事找事，用<code>std::wstring</code>作为中转已经足够了，以下的方法仅作为记录，瞎折腾的笔记罢了。</p>
</blockquote>
<p><code>LPCWSTR</code> -&gt; <code>std::string</code>: 和<code>std::wstring</code>转<code>std::string</code>写法一样</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">KvStrCvt::lpcwstr2string</span><span class="params">(LPCWSTR wstr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	<span class="keyword">int</span> slen = wcslen(wstr) + <span class="number">1</span>;</span><br><span class="line">	len = WideCharToMultiByte(CP_ACP, <span class="number">0</span>, wstr, slen, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">char</span>* buf = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">	WideCharToMultiByte(CP_ACP, <span class="number">0</span>, wstr, slen, buf, len, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">r</span><span class="params">(buf)</span></span>;</span><br><span class="line">	<span class="keyword">delete</span>[] buf;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>std::string</code> -&gt; <code>LPCWSTR</code>：先说结论：<strong>不推荐</strong>将返回值设置为LPCWSTR，推荐使用std::wstring作为中转。</p>
<p>如果不借用<code>std::wstring</code>，一种实现的手段如下代码所示。但是这么写有一个问题：内存泄露</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LPCWSTR <span class="title">KvStrCvt::string2lpcwstr</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	<span class="keyword">int</span> slength = (<span class="keyword">int</span>)s.length() + <span class="number">1</span>;</span><br><span class="line">	len = MultiByteToWideChar(CP_ACP, <span class="number">0</span>, s.c_str(), slength, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">wchar_t</span>* buf = <span class="keyword">new</span> <span class="keyword">wchar_t</span>[len];</span><br><span class="line">	MultiByteToWideChar(CP_ACP, <span class="number">0</span>, s.c_str(), slength, buf, len);</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">wchar_t</span>* wstr = buf;</span><br><span class="line">	<span class="keyword">return</span> wstr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把它写到一个循环中，会发现内存占用疯狂增加：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">	LPCWSTR wstr = KvStrCvt::string2lpcwstr(<span class="string">"国泰民安"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改成如下的形式，会发现输出为乱码，并且编译器报错：C26816，指针指向堆栈上的内存</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LPCWSTR <span class="title">KvStrCvt::string2lpcwstr</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	<span class="keyword">int</span> slength = (<span class="keyword">int</span>)s.length() + <span class="number">1</span>;</span><br><span class="line">	len = MultiByteToWideChar(CP_ACP, <span class="number">0</span>, s.c_str(), slength, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">wchar_t</span>* buf = <span class="keyword">new</span> <span class="keyword">wchar_t</span>[len];</span><br><span class="line">	MultiByteToWideChar(CP_ACP, <span class="number">0</span>, s.c_str(), slength, buf, len);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">wstring</span> <span class="title">wstr</span><span class="params">(buf)</span></span>;</span><br><span class="line">	<span class="keyword">delete</span>[] buf;</span><br><span class="line">	<span class="keyword">return</span> wstr.c_str();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此，并不建议将转换的返回值直接设置为<code>LPCWSTR</code>，特别是当这个返回值还是个变量，除非水平超高。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04下Nginx使用手记</title>
    <url>/2021/07/06/Ubuntu-18-04%E4%B8%8BNginx%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>参考资料：</p>
<p><a href="https://www.cnblogs.com/EasonJim/p/7806879.html" target="_blank" rel="noopener">Ubuntu 16.04安装Nginx</a></p>
<p><a href="https://segmentfault.com/a/1190000015797789" target="_blank" rel="noopener">Ubuntu安装配置Nginx（一）——部署Web服务</a></p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="apt安装"><a href="#apt安装" class="headerlink" title="apt安装"></a>apt安装</h2><p>推荐使用apt安装，在参考的博客中有一种手动安装的方式，看着挺麻烦，有机会再试吧。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>
<p>安装好的文件位置：</p>
<p><code>/usr/sbin/nginx</code>：主程序</p>
<p><code>/etc/nginx</code>：存放配置文件</p>
<p><code>/usr/share/nginx</code>：存放静态文件（好像是旧版本用的）</p>
<p><code>/var/www/html</code>：默认设置的静态文件目录</p>
<p><code>/var/log/nginx</code>：存放日志</p>
<p>关于文件位置，其实从上面的根目录文件夹可以知道，Linux系统的配置文件一般放在/etc，日志一般放在/var/log，运行的程序一般放在/usr/sbin或者/usr/bin。</p>
<p>还有一个好处，创建好的文件由于放在/usr/sbin目录下，所以能直接在终端中使用nginx命令而无需指定路径。</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>使用apt-get安装nginx后，会自动创建服务，会自动在<code>/etc/init.d</code>下新建服务脚本<code>nginx</code>，可以在终端中使用如下命令进行操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service nginx &#123;start|stop|restart|reload|force-reload|status|configtest|rotate|upgrade&#125;</span><br></pre></td></tr></table></figure>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service nginx start</span><br><span class="line">sudo nginx</span><br></pre></td></tr></table></figure>
<h2 id="重新加载服务"><a href="#重新加载服务" class="headerlink" title="重新加载服务"></a>重新加载服务</h2><p>修改配置后重新加载时</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service nginx reload</span><br><span class="line">sudo service nginx restart</span><br><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure>
<ul>
<li><code>reload</code>和<code>restart</code>的区别：前者会在更新配置文件时检查，若配置文件语法出错则保持原先状态不变，不会导致服务中断；后者先执行<code>stop</code>后执行<code>start</code>，会造成服务中断，且不会对语法进行检查，若有错则直接导致启动失败；</li>
<li><code>reload</code>操作可以通过服务<code>service</code>，也可以通过给命令<code>nginx</code>发送信号<code>-s reload</code>执行。</li>
</ul>
<h2 id="退出服务"><a href="#退出服务" class="headerlink" title="退出服务"></a>退出服务</h2><p>直接停止，不管是否有请求没处理完：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service nginx stop</span><br><span class="line">sudo nginx -s stop</span><br></pre></td></tr></table></figure>
<p>有序退出，等待请求处理完毕：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nginx -s quit</span><br></pre></td></tr></table></figure>
<h1 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h1><h2 id="查看和测试配置文件"><a href="#查看和测试配置文件" class="headerlink" title="查看和测试配置文件"></a>查看和测试配置文件</h2><p>查看并测试配置文件，主要检查语法错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nginx -t</span><br><span class="line"></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure>
<p>指定配置文件路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nginx -t -c /home/me/a.conf</span><br><span class="line"></span><br><span class="line">nginx: [emerg] open() "/home/me/a.conf" failed (2: No such file or directory)</span><br><span class="line">nginx: configuration file /home/me/a.conf test failed</span><br></pre></td></tr></table></figure>
<h2 id="设置配置文件"><a href="#设置配置文件" class="headerlink" title="设置配置文件"></a>设置配置文件</h2><p>通过<code>sudo service nginx start</code>或者<code>sudo nginx</code>启动服务时，默认的配置文件为<code>/etc/nginx/nginx.conf</code>。</p>
<p>如何修改呢？通过<code>nginx</code>命令启动时，修改方式为添加参数<code>-c</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nginx -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>
<p>通过服务启动的话网上资料比较少，且不建议这么修改，最新版本nginx配置是由4个文件构成：</p>
<ol>
<li><code>conf.d</code>：用户自己定义的conf配置文件</li>
<li><code>sites-available</code>：系统默认设置的配置文件</li>
<li><code>sites-enabled</code>：由<code>sites-available</code>中的配置文件转换生成</li>
<li><code>nginx.conf</code>：汇总以上三个配置文件的内容，同时配置我们所需要的参数</li>
</ol>
<p>在部署需要的web服务时，我们可以拷贝<code>sites-enabled</code>中的<code>default</code>文件到conf.d并且修改名字为<code>**.conf</code>,然后进行配置。</p>
<p>在<code>nginx.conf</code>中主要进行服务器的全局设置，关于http服务的部署被剥离出去，由其他三个文件夹决定。在<code>nginx.conf</code>中引入<code>conf.d</code>和<code>sites-enabled</code>两个文件夹中的服务器配置，引入顺序如下所示：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">	<span class="comment"># 省略</span></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也就是说，服务器配置的东西被写到了http字段下。观察文件夹发现，<code>conf.d</code>文件夹默认为空，<code>sites-enabled</code>文件夹中只有一个<code>default</code>文件，这里面写了基础的服务器配置，包括端口、首页、404页面。</p>
<p>如果在<code>conf.d</code>文件夹中添加服务器配置，那么也不会覆盖掉端口为80的服务端配置，如果要对默认的服务器配置进行修改，最好的办法是把<code>default</code>文件内容复制到另一个文本文件中，命名为<code>xxx.conf</code>放到<code>conf.d</code>中，然后在<code>nginx.conf</code>中把语句<code>include /etc/nginx/sites-enabled/*;</code>注释掉。</p>
<h2 id="静态服务器配置"><a href="#静态服务器配置" class="headerlink" title="静态服务器配置"></a>静态服务器配置</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Default server configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="comment"># 监听端口</span></span><br><span class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 设置静态根目录</span></span><br><span class="line">	<span class="attribute">root</span> /var/www/html;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 列表：默认首页文件</span></span><br><span class="line">	<span class="attribute">index</span> index.html index.htm index.nginx-debian.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于<code>index</code>，类似于指定了一个页面入口。若不指定，只有通过<code>192.168.0.1/index.html</code>才能访问页面，直接通过<code>192.168.0.1</code>会提示403。</p>
<p>通过如上配置，可以在目录<code>/var/www/html</code>中放置任何html静态页面，并<strong>支持文件夹</strong>。</p>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><blockquote>
<p><a href="https://www.cnblogs.com/progor/p/13338483.html" target="_blank" rel="noopener">循序渐进nginx(一)：介绍、安装、hello world、Location匹配</a></p>
<p><a href="https://www.cnblogs.com/progor/p/13338484.html" target="_blank" rel="noopener">循序渐进nginx(二)：反向代理、负载均衡、缓存服务、静态资源访问</a></p>
</blockquote>
<h3 id="代理域名"><a href="#代理域名" class="headerlink" title="代理域名"></a>代理域名</h3><p>只需要加上<code>server_name</code>，即可代理域名</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> study.rsgis.whu.edu.cn;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置长连接</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass_header</span> server;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Scheme <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8088/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="代理请求"><a href="#代理请求" class="headerlink" title="代理请求"></a>代理请求</h3><p>设置了一个静态文件夹，放在3303端口，用80端口的<code>/app</code>路由来代理这个端口。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Default server configuration</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="comment"># 监听端口</span></span><br><span class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 设置静态根目录</span></span><br><span class="line">	<span class="attribute">root</span> /var/www/html;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 列表：默认首页文件</span></span><br><span class="line">	<span class="attribute">index</span> index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">location</span> /app/ &#123;</span><br><span class="line">		<span class="attribute">proxy_pass</span> http://localhost:3303/;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">3303</span>;</span><br><span class="line">	<span class="attribute">root</span> /var/www/app;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">index</span> index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><code>location</code>和<code>proxy_pass</code>设置的讲究</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line">	<span class="attribute">location</span> /api/ &#123;</span><br><span class="line">		<span class="attribute">proxy_pass</span> http://localhost:8081/;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在lcoation都是<code>location /api/</code>时，proxy_pass不同，请求的资源也是不一样的：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>proxy_pass</th>
<th>请求</th>
<th>转发结果</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>proxy_pass http://localhost:8081;</code></td>
<td><code>hostname:8080/api/user/list</code></td>
<td><code>http://locahost:8081/api/user/list</code></td>
</tr>
<tr>
<td><code>proxy_pass http://localhost:8081/;</code></td>
<td><code>hostname:8080/api/user/list</code></td>
<td><code>http://locahost:8081/user/list</code></td>
</tr>
<tr>
<td><code>proxy_pass http://localhost:8081/test;</code></td>
<td><code>hostname:8080/api/user/list</code></td>
<td><code>http://locahost:8081/testuser/list</code></td>
</tr>
<tr>
<td><code>proxy_pass http://localhost:8081/test/;</code></td>
<td><code>hostname:8080/api/user/list</code></td>
<td><code>http://locahost:8081/test/user/list</code></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Koa.js中的Cookies防篡改机制</title>
    <url>/2021/07/10/Koa-js%E4%B8%AD%E7%9A%84Cookies%E9%98%B2%E7%AF%A1%E6%94%B9%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://github.com/crypto-utils/keygrip" target="_blank" rel="noopener">crypto-utils/keygrip</a></p>
<p><a href="https://juejin.cn/post/6844903608618598407" target="_blank" rel="noopener">Cookie防篡改机制 | 掘金</a></p>
<p><a href="https://www.5axxw.com/wiki/content/5mleoh" target="_blank" rel="noopener">基于Keygrip的签名和未签名cookies</a></p>
</blockquote>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>作为为数不多的写在Koa实例中的功能，Cookies防篡改机制通过接口<code>app.keys</code>暴露给开发者。该接口接收两类参数：</p>
<ul>
<li>密钥：<code>[&#39;secret1&#39;, &#39;secret2&#39;, &#39;secret3&#39;]</code>或<code>&#39;secret&#39;</code>，字符串或数组；</li>
<li>Keygrip实例：<code>app.keys = new Keygrip([&quot;SEKRIT2&quot;, &quot;SEKRIT1&quot;], &#39;sha256&#39;, &#39;hex&#39;)</code>。</li>
</ul>
<p>在防篡改机制的保护下，存放在Cookies中的数据如果被人为修改，就会被检测出来，不再生效。</p>
<p>Cookies防篡改机制为：</p>
<ul>
<li>服务器提供一个签名生成算法<code>sign</code></li>
<li>对数据进行签名<code>sign(key)</code>得到密文保存为<code>key.sig</code></li>
<li>将<code>key</code>和<code>key.sig</code>同时存在Cookie中，客户端每一次请求都带着<code>key</code>和<code>key.sig</code></li>
<li>服务器收到请求后，校验<code>key</code>和<code>key.sig</code>，检验内容是否被篡改</li>
</ul>
<h1 id="Keygrip使用方法"><a href="#Keygrip使用方法" class="headerlink" title="Keygrip使用方法"></a>Keygrip使用方法</h1><p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i keygrip -S</span><br></pre></td></tr></table></figure>
<p>初始化Keygrip对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = <span class="keyword">new</span> Keygrip(keylist, [hmacAlgorithm], [encoding])</span><br></pre></td></tr></table></figure>
<ul>
<li><code>keylist</code>：字符串数组，<strong>必填</strong>，用于签名的密钥列表；</li>
<li><code>hmacAlgorithm</code>：用于签名的算法，默认为<code>sha1</code>，该参数用于指定node.js自带的<code>crypto</code>模块的<code>createHmac()</code>方法的第一个参数，取决于平台上OpenSSL版本支持的可用算法。例如<code>sha1</code>, <code>sha256</code>, <code>sha512</code>, <code>md5</code>, …；</li>
<li><code>encoding</code>：编码方式，默认为<code>base64</code>，可选：<code>utf8</code>, <code>base64</code>, <code>hex</code>, <code>ascii</code>, <code>binary</code>, …。</li>
</ul>
<p>使用Keygrip计算hash值、验证hash、匹配列表中的密钥。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Keygrip = <span class="built_in">require</span>(<span class="string">'keygrip'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Keygrip实例</span></span><br><span class="line"><span class="keyword">const</span> keyList = [<span class="string">'secret1'</span>, <span class="string">'secret2'</span>, <span class="string">'secret3'</span>];</span><br><span class="line"><span class="keyword">const</span> keys = <span class="keyword">new</span> Keygrip(keyList, <span class="string">'sha1'</span>, <span class="string">'base64'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算hash值</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">const</span> hash = keys.sign(str);</span><br><span class="line"><span class="built_in">console</span>.log(hash); <span class="comment">// eIpfKfH_9jX0QEbzfuKOKMOr7qw</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line"><span class="keyword">const</span> matched1 = keys.verify(<span class="string">'123456'</span>, hash);</span><br><span class="line"><span class="built_in">console</span>.log(matched1); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">const</span> matched2 = keys.verify(<span class="string">'123455'</span>, hash);</span><br><span class="line"><span class="built_in">console</span>.log(matched2); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配密钥顺序</span></span><br><span class="line"><span class="keyword">const</span> idx1 = keys.index(<span class="string">'123456'</span>, hash);</span><br><span class="line"><span class="built_in">console</span>.log(idx1); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">const</span> idx2 = keys.index(<span class="string">'123455'</span>, hash);</span><br><span class="line"><span class="built_in">console</span>.log(idx2); <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在数组开始插入新的密钥</span></span><br><span class="line">keyList.unshift(<span class="string">'secret0'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(keyList); <span class="comment">// [ 'secret0', 'secret1', 'secret2', 'secret3' ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> matched3 = keys.verify(<span class="string">'123456'</span>, hash);</span><br><span class="line"><span class="built_in">console</span>.log(matched3); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">const</span> idx3 = keys.index(<span class="string">'123456'</span>, hash);</span><br><span class="line"><span class="built_in">console</span>.log(idx3); <span class="comment">// 1（当index的值大于0时，虽然可以正确匹配，但表明应该更新签名，使用最新的、也就是序号为0的那个密钥）</span></span><br></pre></td></tr></table></figure>
<p>Keygrip的核心是三个函数：</p>
<ul>
<li><code>sign(data)</code>：使用密钥列表中的<strong>第一个密钥</strong>对数据进行签名；</li>
<li><code>verify(data, hash)</code>：验证数据是否被篡改，计算<code>data</code>的hash值，与<code>hash</code>进行对比；</li>
<li><code>index(data, hash)</code>：验证<code>hash</code>是否是由<code>data</code>经列表中的密钥签名获得，如果不是，返回-1，如果是，返回密钥在列表中的序号。</li>
</ul>
<h1 id="Koa-js中Cookies防篡改的方法"><a href="#Koa-js中Cookies防篡改的方法" class="headerlink" title="Koa.js中Cookies防篡改的方法"></a>Koa.js中Cookies防篡改的方法</h1><p>Koa.js中使用<a href="https://github.com/pillarjs/cookies" target="_blank" rel="noopener">pillarjs/cookies</a>来管理Cookies，可以通过<code>ctx.cookies</code>访问到这个对象的实例，其中最重要的两个方法是<code>get()</code>和<code>set()</code>。</p>
<ul>
<li><p><code>ctx.cookies.set(key, value, opts)</code></p>
</li>
<li><p><code>ctx.cookies.get(key, opts)</code></p>
</li>
</ul>
<p>opts的完整参数可以查看仓库API或源码，这里我们只需要用到其最常用的<code>signed</code>，一个使用签名防止cookie篡改的例子如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cookies 防篡改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> Keygrip = <span class="built_in">require</span>(<span class="string">'keygrip'</span>);</span><br><span class="line">app.keys = <span class="keyword">new</span> Keygrip([<span class="string">'secret'</span>], <span class="string">'sha1'</span>, <span class="string">'base64'</span>);</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    account: <span class="string">'test'</span>,</span><br><span class="line">    password: <span class="string">'123456'</span></span><br><span class="line">&#125;</span><br><span class="line">app.use(<span class="keyword">async</span>(ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.cookies.set(<span class="string">'_user'</span>, <span class="built_in">JSON</span>.stringify(data), &#123; <span class="attr">signed</span>: <span class="literal">true</span>, <span class="attr">maxAge</span>: <span class="number">86400000</span> &#125;);</span><br><span class="line">    ctx.body = <span class="string">'ok'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这样，当访问服务器后，会在cookie中留下两个字段：<code>_user</code>和<code>_user.sig</code>，分别存放的是数据和数据签名：</p>
<p><code>_user</code> = <code>{&quot;account&quot;:&quot;test&quot;,&quot;password&quot;:&quot;123456&quot;}</code></p>
<p><code>_user.sig</code> = <code>8onPj6-OdNwq2N9ON52GtkEZBX0</code></p>
<p>要验证一个cookie是否被篡改，需要用到<code>ctx.cookies.get()</code>函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.cookies.get(<span class="string">'_user'</span>, &#123; <span class="attr">signed</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure>
<p>如果数据不存在或者被篡改，则该语句的返回值为<code>null</code>。</p>
<hr>
<p>做了个小测试，想看看cookie中保存的签名字段到底是什么的签名，做了如下测试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Keygrip = <span class="built_in">require</span>(<span class="string">'keygrip'</span>);</span><br><span class="line"><span class="keyword">const</span> keys = <span class="keyword">new</span> Keygrip([<span class="string">'secret'</span>], <span class="string">'sha1'</span>, <span class="string">'base64'</span>);</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    account: <span class="string">'test'</span>,</span><br><span class="line">    password: <span class="string">'123456'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hash = keys.sign(<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line"><span class="built_in">console</span>.log(hash)</span><br></pre></td></tr></table></figure>
<p>结果发现输出结果是：<code>J-89cUmdlRoSwdmub_5gBhLHdaQ</code>，这和保存在cookie中的<code>8onPj6-OdNwq2N9ON52GtkEZBX0</code>不一致啊！</p>
<p>后来到Cookies的仓库<a href="https://github.com/pillarjs/cookies" target="_blank" rel="noopener">pillarjs/cookies</a>翻了一下源码，找到两处语句：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (opts &amp;&amp; signed) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.keys) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'.keys required for signed cookies'</span>);</span><br><span class="line">    cookie.value = <span class="keyword">this</span>.keys.sign(cookie.toString())</span><br><span class="line">    cookie.name += <span class="string">".sig"</span></span><br><span class="line">    pushCookie(headers, cookie)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Cookie.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">"="</span> + <span class="keyword">this</span>.value</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>受此启发，将签名的字符串改为<code>_user={&quot;account&quot;:&quot;test&quot;,&quot;password&quot;:&quot;123456&quot;}</code>，再进行签名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Keygrip = <span class="built_in">require</span>(<span class="string">'keygrip'</span>);</span><br><span class="line"><span class="keyword">const</span> keys = <span class="keyword">new</span> Keygrip([<span class="string">'secret'</span>], <span class="string">'sha1'</span>, <span class="string">'base64'</span>);</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    account: <span class="string">'test'</span>,</span><br><span class="line">    password: <span class="string">'123456'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hash = keys.sign(<span class="string">`_user=<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hash)</span><br></pre></td></tr></table></figure>
<p>得到结果：<code>8onPj6-OdNwq2N9ON52GtkEZBX0</code>，与保存在cookie中的结果一至！</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Koa.js</tag>
        <tag>keygrip</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】Go 每日一库之 casbin</title>
    <url>/2021/07/10/%E8%BD%AC%E8%BD%BD-Go-%E6%AF%8F%E6%97%A5%E4%B8%80%E5%BA%93%E4%B9%8B-casbin/</url>
    <content><![CDATA[<blockquote>
<p>转载自：<a href="https://zhuanlan.zhihu.com/p/148353743" target="_blank" rel="noopener">Go 每日一库之 casbin</a></p>
<p>最近在学Koa，看到koa-authz，在了解了ACL/RBAC/ABAC的概念后仍然困于Casbin的使用上，不了解其policy和model的具体含义，有幸搜到了这篇文章。文章中使用了Go语言来实现Casbin的功能，尽管我本身对Go语言不太了解，但仍不妨碍我看懂文章中对Casbin配置文件的解释以及在编程中使用Casbin完成用户权限控制的功能，受益匪浅。</p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>权限管理在几乎每个系统中都是必备的模块。如果项目开发每次都要实现一次权限管理，无疑会浪费开发时间，增加开发成本。因此，<code>casbin</code>库出现了。<code>casbin</code>是一个强大、高效的访问控制库。支持常用的多种访问控制模型，如<code>ACL/RBAC/ABAC</code>等。可以实现灵活的访问权限控制。同时，<code>casbin</code>支持多种编程语言，<code>Go/Java/Node/PHP/Python/.NET/Rust</code>。我们只需要<strong>一次学习，多处运用</strong>。</p>
<h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><p>我们依然使用 Go Module 编写代码，先初始化：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir casbin &amp;&amp; <span class="built_in">cd</span> casbin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> go mod init github.com/darjun/go-daily-lib/casbin</span></span><br></pre></td></tr></table></figure>
<p>然后安装<code>casbin</code>，目前是<code>v2</code>版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go get github.com/casbin/casbin/v2</span></span><br></pre></td></tr></table></figure>
<p>权限实际上就是控制<strong>谁</strong>能对<strong>什么资源</strong>进行什么操作。<code>casbin</code>将访问控制模型抽象到一个基于 PERM（Policy，Effect，Request，Matchers） 元模型的配置文件（模型文件）中。因此切换或更新授权机制只需要简单地修改配置文件。</p>
<p><code>policy</code>是策略或者说是规则的定义。它定义了具体的规则。</p>
<p><code>request</code>是对访问请求的抽象，它与<code>e.Enforce()</code>函数的参数是一一对应的</p>
<p><code>matcher</code>匹配器会将请求与定义的每个<code>policy</code>一一匹配，生成多个匹配结果。</p>
<p><code>effect</code>根据对请求运用匹配器得出的所有结果进行汇总，来决定该请求是<strong>允许</strong>还是<strong>拒绝</strong>。</p>
<p>下面这张图很好地描绘了这个过程：</p>
<p><img src="/images/v2-d96d46f024d9736d6a0de63ddb6bc456_720w.jpg" alt="img"></p>
<p>我们首先编写模型文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[request_definition]</span><br><span class="line">r &#x3D; sub, obj, act</span><br><span class="line"></span><br><span class="line">[policy_definition]</span><br><span class="line">p &#x3D; sub, obj, act</span><br><span class="line"></span><br><span class="line">[matchers]</span><br><span class="line">m &#x3D; r.sub &#x3D;&#x3D; p.sub &amp;&amp; r.obj &#x3D;&#x3D; p.obj &amp;&amp; r.act &#x3D;&#x3D; p.act</span><br><span class="line"></span><br><span class="line">[policy_effect]</span><br><span class="line">e &#x3D; some(where (p.eft &#x3D;&#x3D; allow))</span><br></pre></td></tr></table></figure>
<p>上面模型文件规定了权限由<code>sub,obj,act</code>三要素组成，只有在策略列表中有和它完全相同的策略时，该请求才能通过。匹配器的结果可以通过<code>p.eft</code>获取，<code>some(where (p.eft == allow))</code>表示只要有一条策略允许即可。</p>
<p>然后我们策略文件（即谁能对什么资源进行什么操作）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p, dajun, data1, read</span><br><span class="line">p, lizi, data2, write</span><br></pre></td></tr></table></figure>
<p>上面<code>policy.csv</code>文件的两行内容表示<code>dajun</code>对数据<code>data1</code>有<code>read</code>权限，<code>lizi</code>对数据<code>data2</code>有<code>write</code>权限。</p>
<p>接下来就是使用的代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"log"</span></span><br><span class="line"></span><br><span class="line">  <span class="string">"github.com/casbin/casbin/v2"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(e *casbin.Enforcer, sub, obj, act <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  ok, _ := e.Enforce(sub, obj, act)</span><br><span class="line">  <span class="keyword">if</span> ok &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s CAN %s %s\n"</span>, sub, act, obj)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s CANNOT %s %s\n"</span>, sub, act, obj)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  e, err := casbin.NewEnforcer(<span class="string">"./model.conf"</span>, <span class="string">"./policy.csv"</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatalf(<span class="string">"NewEnforecer failed:%v\n"</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"data1"</span>, <span class="string">"read"</span>)</span><br><span class="line">  check(e, <span class="string">"lizi"</span>, <span class="string">"data2"</span>, <span class="string">"write"</span>)</span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"data1"</span>, <span class="string">"write"</span>)</span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"data2"</span>, <span class="string">"read"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码其实不复杂。首先创建一个<code>casbin.Enforcer</code>对象，加载模型文件<code>model.conf</code>和策略文件<code>policy.csv</code>，调用其<code>Enforce</code>方法来检查权限。运行程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go run main.go</span></span><br><span class="line">dajun CAN read data1</span><br><span class="line">lizi CAN write data2</span><br><span class="line">dajun CANNOT write data1</span><br><span class="line">dajun CANNOT read data2</span><br></pre></td></tr></table></figure>
<p>请求必须完全匹配某条策略才能通过。<code>(&quot;dajun&quot;, &quot;data1&quot;, &quot;read&quot;)</code>匹配<code>p, dajun, data1, read</code>，<code>(&quot;lizi&quot;, &quot;data2&quot;, &quot;write&quot;)</code>匹配<code>p, lizi, data2, write</code>，所以前两个检查通过。第 3 个因为<code>&quot;dajun&quot;</code>没有对<code>data1</code>的<code>write</code>权限，第 4 个因为<code>dajun</code>对<code>data2</code>没有<code>read</code>权限，所以检查都不能通过。输出结果符合预期。</p>
<p><code>sub/obj/act</code>依次对应传给<code>Enforce</code>方法的三个参数。实际上这里的<code>sub/obj/act</code>和<code>read/write/data1/data2</code>是我自己随便取的，你完全可以使用其它的名字，只要能前后一致即可。</p>
<p>上面例子中实现的就是<code>ACL</code>（access-control-list，访问控制列表）。<code>ACL</code>显示定义了每个主体对每个资源的权限情况，未定义的就没有权限。我们还可以加上超级管理员，超级管理员可以进行任何操作。假设超级管理员为<code>root</code>，我们只需要修改匹配器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[matchers]</span><br><span class="line">e &#x3D; r.sub &#x3D;&#x3D; p.sub &amp;&amp; r.obj &#x3D;&#x3D; p.obj &amp;&amp; r.act &#x3D;&#x3D; p.act || r.sub &#x3D;&#x3D; &quot;root&quot;</span><br></pre></td></tr></table></figure>
<p>只要访问主体是<code>root</code>一律放行。</p>
<p>验证：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  e, err := casbin.NewEnforcer(<span class="string">"./model.conf"</span>, <span class="string">"./policy.csv"</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatalf(<span class="string">"NewEnforecer failed:%v\n"</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  check(e, <span class="string">"root"</span>, <span class="string">"data1"</span>, <span class="string">"read"</span>)</span><br><span class="line">  check(e, <span class="string">"root"</span>, <span class="string">"data2"</span>, <span class="string">"write"</span>)</span><br><span class="line">  check(e, <span class="string">"root"</span>, <span class="string">"data1"</span>, <span class="string">"execute"</span>)</span><br><span class="line">  check(e, <span class="string">"root"</span>, <span class="string">"data3"</span>, <span class="string">"rwx"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为<code>sub = &quot;root&quot;</code>时，匹配器一定能通过，运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go run main.go</span></span><br><span class="line">root CAN read data1</span><br><span class="line">root CAN write data2</span><br><span class="line">root CAN execute data1</span><br><span class="line">root CAN rwx data3</span><br></pre></td></tr></table></figure>
<h2 id="RBAC-模型"><a href="#RBAC-模型" class="headerlink" title="RBAC 模型"></a>RBAC 模型</h2><p><code>ACL</code>模型在用户和资源都比较少的情况下没什么问题，但是用户和资源量一大，<code>ACL</code>就会变得异常繁琐。想象一下，每次新增一个用户，都要把他需要的权限重新设置一遍是多么地痛苦。<code>RBAC</code>（role-based-access-control）模型通过引入角色（<code>role</code>）这个中间层来解决这个问题。每个用户都属于一个角色，例如开发者、管理员、运维等，每个角色都有其特定的权限，权限的增加和删除都通过角色来进行。这样新增一个用户时，我们只需要给他指派一个角色，他就能拥有该角色的所有权限。修改角色的权限时，属于这个角色的用户权限就会相应的修改。</p>
<p>在<code>casbin</code>中使用<code>RBAC</code>模型需要在模型文件中添加<code>role_definition</code>模块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[role_definition]</span><br><span class="line">g &#x3D; _, _</span><br><span class="line"></span><br><span class="line">[matchers]</span><br><span class="line">m &#x3D; g(r.sub, p.sub) &amp;&amp; r.obj &#x3D;&#x3D; p.obj &amp;&amp; r.act &#x3D;&#x3D; p.act</span><br></pre></td></tr></table></figure>
<p><code>g = _,_</code>定义了用户——角色，角色——角色的映射关系，前者是后者的成员，拥有后者的权限。然后在匹配器中，我们不需要判断<code>r.sub</code>与<code>p.sub</code>完全相等，只需要使用<code>g(r.sub, p.sub)</code>来判断请求主体<code>r.sub</code>是否属于<code>p.sub</code>这个角色即可。最后我们修改策略文件添加用户——角色定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p, admin, data, read</span><br><span class="line">p, admin, data, write</span><br><span class="line">p, developer, data, read</span><br><span class="line">g, dajun, admin</span><br><span class="line">g, lizi, developer</span><br></pre></td></tr></table></figure>
<p>上面的<code>policy.csv</code>文件规定了，<code>dajun</code>属于<code>admin</code>管理员，<code>lizi</code>属于<code>developer</code>开发者，使用<code>g</code>来定义这层关系。另外<code>admin</code>对数据<code>data</code>用<code>read</code>和<code>write</code>权限，而<code>developer</code>对数据<code>data</code>只有<code>read</code>权限。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"log"</span></span><br><span class="line"></span><br><span class="line">  <span class="string">"github.com/casbin/casbin/v2"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(e *casbin.Enforcer, sub, obj, act <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  ok, _ := e.Enforce(sub, obj, act)</span><br><span class="line">  <span class="keyword">if</span> ok &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s CAN %s %s\n"</span>, sub, act, obj)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s CANNOT %s %s\n"</span>, sub, act, obj)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  e, err := casbin.NewEnforcer(<span class="string">"./model.conf"</span>, <span class="string">"./policy.csv"</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatalf(<span class="string">"NewEnforecer failed:%v\n"</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"data"</span>, <span class="string">"read"</span>)</span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"data"</span>, <span class="string">"write"</span>)</span><br><span class="line">  check(e, <span class="string">"lizi"</span>, <span class="string">"data"</span>, <span class="string">"read"</span>)</span><br><span class="line">  check(e, <span class="string">"lizi"</span>, <span class="string">"data"</span>, <span class="string">"write"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很显然<code>lizi</code>所属角色没有<code>write</code>权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dajun CAN read data</span><br><span class="line">dajun CAN write data</span><br><span class="line">lizi CAN read data</span><br><span class="line">lizi CANNOT write data</span><br></pre></td></tr></table></figure>
<h3 id="多个RBAC"><a href="#多个RBAC" class="headerlink" title="多个RBAC"></a>多个RBAC</h3><p><code>casbin</code>支持同时存在多个<code>RBAC</code>系统，即用户和资源都有角色：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[role_definition]</span><br><span class="line">g&#x3D;_,_</span><br><span class="line">g2&#x3D;_,_</span><br><span class="line"></span><br><span class="line">[matchers]</span><br><span class="line">m &#x3D; g(r.sub, p.sub) &amp;&amp; g2(r.obj, p.obj) &amp;&amp; r.act &#x3D;&#x3D; p.act</span><br></pre></td></tr></table></figure>
<p>上面的模型文件定义了两个<code>RBAC</code>系统<code>g</code>和<code>g2</code>，我们在匹配器中使用<code>g(r.sub, p.sub)</code>判断请求主体属于特定组，<code>g2(r.obj, p.obj)</code>判断请求资源属于特定组，且操作一致即可放行。</p>
<p>策略文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p, admin, prod, read</span><br><span class="line">p, admin, prod, write</span><br><span class="line">p, admin, dev, read</span><br><span class="line">p, admin, dev, write</span><br><span class="line">p, developer, dev, read</span><br><span class="line">p, developer, dev, write</span><br><span class="line">p, developer, prod, read</span><br><span class="line">g, dajun, admin</span><br><span class="line">g, lizi, developer</span><br><span class="line">g2, prod.data, prod</span><br><span class="line">g2, dev.data, dev</span><br></pre></td></tr></table></figure>
<p>先看角色关系，即最后 4 行，<code>dajun</code>属于<code>admin</code>角色，<code>lizi</code>属于<code>developer</code>角色，<code>prod.data</code>属于生产资源<code>prod</code>角色，<code>dev.data</code>属于开发资源<code>dev</code>角色。<code>admin</code>角色拥有对<code>prod</code>和<code>dev</code>类资源的读写权限，<code>developer</code>只能拥有对<code>dev</code>的读写权限和<code>prod</code>的读权限。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">check(e, <span class="string">"dajun"</span>, <span class="string">"prod.data"</span>, <span class="string">"read"</span>)</span><br><span class="line">check(e, <span class="string">"dajun"</span>, <span class="string">"prod.data"</span>, <span class="string">"write"</span>)</span><br><span class="line">check(e, <span class="string">"lizi"</span>, <span class="string">"dev.data"</span>, <span class="string">"read"</span>)</span><br><span class="line">check(e, <span class="string">"lizi"</span>, <span class="string">"dev.data"</span>, <span class="string">"write"</span>)</span><br><span class="line">check(e, <span class="string">"lizi"</span>, <span class="string">"prod.data"</span>, <span class="string">"write"</span>)</span><br></pre></td></tr></table></figure>
<p>第一个函数中<code>e.Enforce()</code>方法在实际执行的时候先获取<code>dajun</code>所属角色<code>admin</code>，再获取<code>prod.data</code>所属角色<code>prod</code>，根据文件中第一行<code>p, admin, prod, read</code>允许请求。最后一个函数中<code>lizi</code>属于角色<code>developer</code>，而<code>prod.data</code>属于角色<code>prod</code>，所有策略都不允许，故该请求被拒绝：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dajun CAN read prod.data</span><br><span class="line">dajun CAN write prod.data</span><br><span class="line">lizi CAN read dev.data</span><br><span class="line">lizi CAN write dev.data</span><br><span class="line">lizi CANNOT write prod.data</span><br></pre></td></tr></table></figure>
<h3 id="多层角色"><a href="#多层角色" class="headerlink" title="多层角色"></a>多层角色</h3><p><code>casbin</code>还能为角色定义所属角色，从而实现多层角色关系，这种权限关系是可以传递的。例如<code>dajun</code>属于高级开发者<code>senior</code>，<code>seinor</code>属于开发者，那么<code>dajun</code>也属于开发者，拥有开发者的所有权限。我们可以定义开发者共有的权限，然后额外为<code>senior</code>定义一些特殊的权限。</p>
<p>模型文件不用修改，策略文件改动如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p, senior, data, write</span><br><span class="line">p, developer, data, read</span><br><span class="line">g, dajun, senior</span><br><span class="line">g, senior, developer</span><br><span class="line">g, lizi, developer</span><br></pre></td></tr></table></figure>
<p>上面<code>policy.csv</code>文件定义了高级开发者<code>senior</code>对数据<code>data</code>有<code>write</code>权限，普通开发者<code>developer</code>对数据只有<code>read</code>权限。同时<code>senior</code>也是<code>developer</code>，所以<code>senior</code>也继承其<code>read</code>权限。<code>dajun</code>属于<code>senior</code>，所以<code>dajun</code>对<code>data</code>有<code>read</code>和<code>write</code>权限，而<code>lizi</code>只属于<code>developer</code>，对数据<code>data</code>只有<code>read</code>权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">check(e, &quot;dajun&quot;, &quot;data&quot;, &quot;read&quot;)</span><br><span class="line">check(e, &quot;dajun&quot;, &quot;data&quot;, &quot;write&quot;)</span><br><span class="line">check(e, &quot;lizi&quot;, &quot;data&quot;, &quot;read&quot;)</span><br><span class="line">check(e, &quot;lizi&quot;, &quot;data&quot;, &quot;write&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="RBAC-domain"><a href="#RBAC-domain" class="headerlink" title="RBAC domain"></a>RBAC domain</h3><p>在<code>casbin</code>中，角色可以是全局的，也可以是特定<code>domain</code>（领域）或<code>tenant</code>（租户），可以简单理解为<strong>组</strong>。例如<code>dajun</code>在组<code>tenant1</code>中是管理员，拥有比较高的权限，在<code>tenant2</code>可能只是个弟弟。</p>
<p>使用<code>RBAC domain</code>需要对模型文件做以下修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[request_definition]</span><br><span class="line">r &#x3D; sub, dom, obj, act</span><br><span class="line"></span><br><span class="line">[policy_definition]</span><br><span class="line">p &#x3D; sub, dom, obj, act</span><br><span class="line"></span><br><span class="line">[role_definition]</span><br><span class="line">g &#x3D; _,_,_</span><br><span class="line"></span><br><span class="line">[matchers]</span><br><span class="line">m &#x3D; g(r.sub, p.sub, r.dom) &amp;&amp; r.dom &#x3D;&#x3D; p.dom &amp;&amp; r.obj &#x3D;&#x3D; p.obj &amp;&amp; r.act &#x3D;&#x3D; p.obj</span><br></pre></td></tr></table></figure>
<p><code>g=_,_,_</code>表示前者在后者中拥有中间定义的角色，在匹配器中使用<code>g</code>要带上<code>dom</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p, admin, tenant1, data1, read</span><br><span class="line">p, admin, tenant2, data2, read</span><br><span class="line">g, dajun, admin, tenant1</span><br><span class="line">g, dajun, developer, tenant2</span><br></pre></td></tr></table></figure>
<p>在<code>tenant1</code>中，只有<code>admin</code>可以读取数据<code>data1</code>。在<code>tenant2</code>中，只有<code>admin</code>可以读取数据<code>data2</code>。<code>dajun</code>在<code>tenant1</code>中是<code>admin</code>，但是在<code>tenant2</code>中不是。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(e *casbin.Enforcer, sub, domain, obj, act <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  ok, _ := e.Enforce(sub, domain, obj, act)</span><br><span class="line">  <span class="keyword">if</span> ok &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s CAN %s %s in %s\n"</span>, sub, act, obj, domain)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s CANNOT %s %s in %s\n"</span>, sub, act, obj, domain)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  e, err := casbin.NewEnforcer(<span class="string">"./model.conf"</span>, <span class="string">"./policy.csv"</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatalf(<span class="string">"NewEnforecer failed:%v\n"</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"tenant1"</span>, <span class="string">"data1"</span>, <span class="string">"read"</span>)</span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"tenant2"</span>, <span class="string">"data2"</span>, <span class="string">"read"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果不出意料：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dajun CAN read data1 in tenant1</span><br><span class="line">dajun CANNOT read data2 in tenant2</span><br></pre></td></tr></table></figure>
<h2 id="ABAC"><a href="#ABAC" class="headerlink" title="ABAC"></a>ABAC</h2><p><code>RBAC</code>模型对于实现比较规则的、相对静态的权限管理非常有用。但是对于特殊的、动态的需求，<code>RBAC</code>就显得有点力不从心了。例如，我们在不同的时间段对数据<code>data</code>实现不同的权限控制。正常工作时间<code>9:00-18:00</code>所有人都可以读写<code>data</code>，其他时间只有数据所有者能读写。这种需求我们可以很方便地使用<code>ABAC</code>（attribute base access list）模型完成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[request_definition]</span><br><span class="line">r &#x3D; sub, obj, act</span><br><span class="line"></span><br><span class="line">[policy_definition]</span><br><span class="line">p &#x3D; sub, obj, act</span><br><span class="line"></span><br><span class="line">[matchers]</span><br><span class="line">m &#x3D; r.sub.Hour &gt;&#x3D; 9 &amp;&amp; r.sub.Hour &lt; 18 || r.sub.Name &#x3D;&#x3D; r.obj.Owner</span><br><span class="line"></span><br><span class="line">[policy_effect]</span><br><span class="line">e &#x3D; some(where (p.eft &#x3D;&#x3D; allow))</span><br></pre></td></tr></table></figure>
<p>该规则不需要策略文件：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Object <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name  <span class="keyword">string</span></span><br><span class="line">  Owner <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Subject <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Hour <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(e *casbin.Enforcer, sub Subject, obj Object, act <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  ok, _ := e.Enforce(sub, obj, act)</span><br><span class="line">  <span class="keyword">if</span> ok &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s CAN %s %s at %d:00\n"</span>, sub.Name, act, obj.Name, sub.Hour)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s CANNOT %s %s at %d:00\n"</span>, sub.Name, act, obj.Name, sub.Hour)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  e, err := casbin.NewEnforcer(<span class="string">"./model.conf"</span>, <span class="string">"./policy.csv"</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatalf(<span class="string">"NewEnforecer failed:%v\n"</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  o := Object&#123;<span class="string">"data"</span>, <span class="string">"dajun"</span>&#125;</span><br><span class="line">  s1 := Subject&#123;<span class="string">"dajun"</span>, <span class="number">10</span>&#125;</span><br><span class="line">  check(e, s1, o, <span class="string">"read"</span>)</span><br><span class="line"></span><br><span class="line">  s2 := Subject&#123;<span class="string">"lizi"</span>, <span class="number">10</span>&#125;</span><br><span class="line">  check(e, s2, o, <span class="string">"read"</span>)</span><br><span class="line"></span><br><span class="line">  s3 := Subject&#123;<span class="string">"dajun"</span>, <span class="number">20</span>&#125;</span><br><span class="line">  check(e, s3, o, <span class="string">"read"</span>)</span><br><span class="line"></span><br><span class="line">  s4 := Subject&#123;<span class="string">"lizi"</span>, <span class="number">20</span>&#125;</span><br><span class="line">  check(e, s4, o, <span class="string">"read"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然<code>lizi</code>在<code>20:00</code>不能<code>read</code>数据<code>data</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dajun CAN read data at 10:00</span><br><span class="line">lizi CAN read data at 10:00</span><br><span class="line">dajun CAN read data at 20:00</span><br><span class="line">lizi CANNOT read data at 20:00</span><br></pre></td></tr></table></figure>
<p>我们知道，在<code>model.conf</code>文件中可以通过<code>r.sub</code>和<code>r.obj</code>，<code>r.act</code>来访问传给<code>Enforce</code>方法的参数。实际上<code>sub/obj</code>可以是结构体对象，得益于<code>govaluate</code>库的强大功能，我们可以在<code>model.conf</code>文件中获取这些结构体的字段值。如上面的<code>r.sub.Name</code>、<code>r.Obj.Owner</code>等。<code>govaluate</code>库的内容可以参见我之前的一篇文章<a href="https://link.zhihu.com/?target=https%3A//darjun.github.io/2020/04/01/godailylib/govaluate/">《Go 每日一库之 govaluate》</a>。</p>
<p>使用<code>ABAC</code>模型可以非常灵活的权限控制，但是一般情况下<code>RBAC</code>就已经够用了。</p>
<h2 id="模型存储"><a href="#模型存储" class="headerlink" title="模型存储"></a>模型存储</h2><p>上面代码中，我们一直将模型存储在文件中。<code>casbin</code>也可以实现在代码中动态初始化模型，例如<code>get-started</code>的例子可以改写为：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  m := model.NewModel()</span><br><span class="line">  m.AddDef(<span class="string">"r"</span>, <span class="string">"r"</span>, <span class="string">"sub, obj, act"</span>)</span><br><span class="line">  m.AddDef(<span class="string">"p"</span>, <span class="string">"p"</span>, <span class="string">"sub, obj, act"</span>)</span><br><span class="line">  m.AddDef(<span class="string">"e"</span>, <span class="string">"e"</span>, <span class="string">"some(where (p.eft == allow))"</span>)</span><br><span class="line">  m.AddDef(<span class="string">"m"</span>, <span class="string">"m"</span>, <span class="string">"r.sub == g.sub &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act"</span>)</span><br><span class="line"></span><br><span class="line">  a := fileadapter.NewAdapter(<span class="string">"./policy.csv"</span>)</span><br><span class="line">  e, err := casbin.NewEnforcer(m, a)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatalf(<span class="string">"NewEnforecer failed:%v\n"</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"data1"</span>, <span class="string">"read"</span>)</span><br><span class="line">  check(e, <span class="string">"lizi"</span>, <span class="string">"data2"</span>, <span class="string">"write"</span>)</span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"data1"</span>, <span class="string">"write"</span>)</span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"data2"</span>, <span class="string">"read"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样地，我们也可以从字符串中加载模型：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  text := <span class="string">`</span></span><br><span class="line"><span class="string">  [request_definition]</span></span><br><span class="line"><span class="string">  r = sub, obj, act</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  [policy_definition]</span></span><br><span class="line"><span class="string">  p = sub, obj, act</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  [policy_effect]</span></span><br><span class="line"><span class="string">  e = some(where (p.eft == allow))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  [matchers]</span></span><br><span class="line"><span class="string">  m = r.sub == p.sub &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line"></span><br><span class="line">  m, _ := model.NewModelFromString(text)</span><br><span class="line">  a := fileadapter.NewAdapter(<span class="string">"./policy.csv"</span>)</span><br><span class="line">  e, _ := casbin.NewEnforcer(m, a)</span><br><span class="line"></span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"data1"</span>, <span class="string">"read"</span>)</span><br><span class="line">  check(e, <span class="string">"lizi"</span>, <span class="string">"data2"</span>, <span class="string">"write"</span>)</span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"data1"</span>, <span class="string">"write"</span>)</span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"data2"</span>, <span class="string">"read"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是这两种方式并不推荐。</p>
<h2 id="策略存储"><a href="#策略存储" class="headerlink" title="策略存储"></a>策略存储</h2><p>在前面的例子中，我们都是将策略存储在<code>policy.csv</code>文件中。一般在实际应用中，很少使用文件存储。<code>casbin</code>以第三方适配器的方式支持多种存储方式包括<code>MySQL/MongoDB/Redis/Etcd</code>等，还可以实现自己的存储。完整列表看这里<a href="https://link.zhihu.com/?target=https%3A//casbin.org/docs/en/adapters">https://casbin.org/docs/en/adapters</a>。下面我们介绍使用<code>Gorm Adapter</code>。先连接到数据库，执行下面的<code>SQL</code>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> casbin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> casbin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> casbin_rule (</span><br><span class="line">  p_type <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  v0 <span class="built_in">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  v1 <span class="built_in">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  v2 <span class="built_in">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  v3 <span class="built_in">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  v4 <span class="built_in">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  v5 <span class="built_in">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> casbin_rule <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'p'</span>, <span class="string">'dajun'</span>, <span class="string">'data1'</span>, <span class="string">'read'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>),</span><br><span class="line">(<span class="string">'p'</span>, <span class="string">'lizi'</span>, <span class="string">'data2'</span>, <span class="string">'write'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>);</span><br></pre></td></tr></table></figure>
<p>然后使用<code>Gorm Adapter</code>加载<code>policy</code>，<code>Gorm Adapter</code>默认使用<code>casbin</code>库中的<code>casbin_rule</code>表：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">  <span class="string">"github.com/casbin/casbin/v2"</span></span><br><span class="line">  gormadapter <span class="string">"github.com/casbin/gorm-adapter/v2"</span></span><br><span class="line">  _ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(e *casbin.Enforcer, sub, obj, act <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  ok, _ := e.Enforce(sub, obj, act)</span><br><span class="line">  <span class="keyword">if</span> ok &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s CAN %s %s\n"</span>, sub, act, obj)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s CANNOT %s %s\n"</span>, sub, act, obj)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  a, _ := gormadapter.NewAdapter(<span class="string">"mysql"</span>, <span class="string">"root:12345@tcp(127.0.0.1:3306)/"</span>)</span><br><span class="line">  e, _ := casbin.NewEnforcer(<span class="string">"./model.conf"</span>, a)</span><br><span class="line"></span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"data1"</span>, <span class="string">"read"</span>)</span><br><span class="line">  check(e, <span class="string">"lizi"</span>, <span class="string">"data2"</span>, <span class="string">"write"</span>)</span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"data1"</span>, <span class="string">"write"</span>)</span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"data2"</span>, <span class="string">"read"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dajun CAN read data1</span><br><span class="line">lizi CAN write data2</span><br><span class="line">dajun CANNOT write data1</span><br><span class="line">dajun CANNOT read data2</span><br></pre></td></tr></table></figure>
<h2 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h2><p>我们可以在匹配器中使用函数。<code>casbin</code>内置了一些函数<code>keyMatch/keyMatch2/keyMatch3/keyMatch4</code>都是匹配 URL 路径的，<code>regexMatch</code>使用正则匹配，<code>ipMatch</code>匹配 IP 地址。参见<a href="https://link.zhihu.com/?target=https%3A//casbin.org/docs/en/function">https://casbin.org/docs/en/function</a>。使用内置函数我们能很容易对路由进行权限划分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[matchers]</span><br><span class="line">m &#x3D; r.sub &#x3D;&#x3D; p.sub &amp;&amp; keyMatch(r.obj, p.obj) &amp;&amp; r.act &#x3D;&#x3D; p.act</span><br><span class="line">p, dajun, user&#x2F;dajun&#x2F;*, read</span><br><span class="line">p, lizi, user&#x2F;lizi&#x2F;*, read</span><br></pre></td></tr></table></figure>
<p>不同用户只能访问其对应路由下的 URL：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  e, err := casbin.NewEnforcer(<span class="string">"./model.conf"</span>, <span class="string">"./policy.csv"</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatalf(<span class="string">"NewEnforecer failed:%v\n"</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"user/dajun/1"</span>, <span class="string">"read"</span>)</span><br><span class="line">  check(e, <span class="string">"lizi"</span>, <span class="string">"user/lizi/2"</span>, <span class="string">"read"</span>)</span><br><span class="line">  check(e, <span class="string">"dajun"</span>, <span class="string">"user/lizi/1"</span>, <span class="string">"read"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dajun CAN read user&#x2F;dajun&#x2F;1</span><br><span class="line">lizi CAN read user&#x2F;lizi&#x2F;2</span><br><span class="line">dajun CANNOT read user&#x2F;lizi&#x2F;1</span><br></pre></td></tr></table></figure>
<p>我们当然也可以定义自己的函数。先定义一个函数，返回 bool：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">KeyMatch</span><span class="params">(key1, key2 <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  i := strings.Index(key2, <span class="string">"*"</span>)</span><br><span class="line">  <span class="keyword">if</span> i == <span class="number">-1</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> key1 == key2</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(key1) &gt; i &#123;</span><br><span class="line">    <span class="keyword">return</span> key1[:i] == key2[:i]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> key1 == key2[:i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里实现了一个简单的正则匹配，只处理<code>*</code>。</p>
<p>然后将这个函数用<code>interface{}</code>类型包装一层：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">KeyMatchFunc</span><span class="params">(args ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line">  name1 := args[<span class="number">0</span>].(<span class="keyword">string</span>)</span><br><span class="line">  name2 := args[<span class="number">1</span>].(<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">bool</span>)(KeyMatch(name1, name2)), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后添加到权限认证器中：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">e.AddFunction(<span class="string">"my_func"</span>, KeyMatchFunc)</span><br></pre></td></tr></table></figure>
<p>这样我们就可以在匹配器中使用该函数实现正则匹配了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[matchers]</span><br><span class="line">m &#x3D; r.sub &#x3D;&#x3D; p.sub &amp;&amp; my_func(r.obj, p.obj) &amp;&amp; r.act &#x3D;&#x3D; p.act</span><br></pre></td></tr></table></figure>
<p>接下来我们在策略文件中为<code>dajun</code>赋予权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p, dajun, data&#x2F;*, read</span><br></pre></td></tr></table></figure>
<p><code>dajun</code>对匹配模式<code>data/*</code>的文件都有<code>read</code>权限。</p>
<p>验证一下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">check(e, <span class="string">"dajun"</span>, <span class="string">"data/1"</span>, <span class="string">"read"</span>)</span><br><span class="line">check(e, <span class="string">"dajun"</span>, <span class="string">"data/2"</span>, <span class="string">"read"</span>)</span><br><span class="line">check(e, <span class="string">"dajun"</span>, <span class="string">"data/1"</span>, <span class="string">"write"</span>)</span><br><span class="line">check(e, <span class="string">"dajun"</span>, <span class="string">"mydata"</span>, <span class="string">"read"</span>)</span><br></pre></td></tr></table></figure>
<p><code>dajun</code>对<code>data/1</code>没有<code>write</code>权限，<code>mydata</code>不符合<code>data/*</code>模式，也没有<code>read</code>权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dajun CAN read data&#x2F;1</span><br><span class="line">dajun CAN read data&#x2F;2</span><br><span class="line">dajun CANNOT write data&#x2F;1</span><br><span class="line">dajun CANNOT read mydata</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>casbin</code>功能强大，简单高效，且多语言通用。值得学习。</p>
<p>大家如果发现好玩、好用的 Go 语言库，欢迎到 Go 每日一库 GitHub 上提交 issue </p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li>casbin GitHub：<a href="https://link.zhihu.com/?target=https%3A//github.com/casbin/casbin">https://github.com/casbin/casbin</a></li>
<li>casbin 官网：<a href="https://link.zhihu.com/?target=https%3A//casbin.org/">https://casbin.org/</a></li>
<li>一种基于元模型的访问控制策略描述语言：<a href="https://link.zhihu.com/?target=http%3A//www.jos.org.cn/html/2020/2/5624.htm">http://www.jos.org.cn/html/2020/2/5624.htm</a></li>
<li>Go 每日一库 GitHub：<a href="https://link.zhihu.com/?target=https%3A//github.com/darjun/go-daily-lib">https://github.com/darjun/go-daily-lib</a></li>
</ol>
]]></content>
      <categories>
        <category>Casbin</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Casbin</tag>
        <tag>ACL</tag>
        <tag>RBAC</tag>
        <tag>ABAC</tag>
      </tags>
  </entry>
  <entry>
    <title>使用nssm创建Windows服务</title>
    <url>/2021/07/12/%E4%BD%BF%E7%94%A8nssm%E5%88%9B%E5%BB%BAWindows%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://nssm.cc" target="_blank" rel="noopener">https://nssm.cc</a></p>
<p>直接下载：<a href="https://nssm.cc/release/nssm-2.24.zip" target="_blank" rel="noopener">https://nssm.cc/release/nssm-2.24.zip</a></p>
<p>使用命令：<a href="https://nssm.cc/commands" target="_blank" rel="noopener">https://nssm.cc/commands</a></p>
</blockquote>
<p>在Windows中没法像Linux中添加服务那么容易，当要运行某个一直开着的非图形界面程序时需要保持命令行开启，例如nodejs，frp，为了将这类程序添加到服务中，可以手动添加服务并修改注册表，但是操作起来比较麻烦，细节比较多。好在发现了一个工具<a href="https://nssm.cc" target="_blank" rel="noopener">nssm</a>，提供了图形化界面可以将<code>.cmd</code>或<code>.bat</code>或<code>.exe</code>添加到服务中，使用方法如下：</p>
<p>下载后解压<code>nssm-2.24.zip</code>，打开命令行<code>cd</code>到该文件夹下的<code>win32</code>或<code>win64</code>文件夹中，执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nssm.exe install CustomService</span><br></pre></td></tr></table></figure>
<p>这句话的意思是将要在添加一个名为<code>CustomService</code>的系统服务，运行后会弹出一个对话框，选择程序目录、程序名称、输入命令行参数等，全都输入完毕再点击“确定”，即可添加服务。</p>
<p>一些常用的命令记录如下（完整命令可以查看<a href="https://nssm.cc/commands" target="_blank" rel="noopener">NSSM | Command line</a>）。</p>
<p>安装服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nssm install &lt;service name&gt;</span><br></pre></td></tr></table></figure>
<p>移除服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nssm remove &lt;service name&gt;</span><br></pre></td></tr></table></figure>
<p>启动、暂停、重启服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nssm start &lt;service name&gt;</span><br><span class="line">nssm stop &lt;service name&gt;</span><br><span class="line">nssm restart &lt;service name&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js区分require引用和执行</title>
    <url>/2021/07/14/Node-js%E5%8C%BA%E5%88%86require%E5%BC%95%E7%94%A8%E5%92%8C%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<p>在python中，可以使用<code>__name__</code>来区分引用还是执行，例如：</p>
<p>module.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	print(<span class="string">"执行"</span>)</span><br></pre></td></tr></table></figure>
<p>在main.py中引用不会输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> module</span><br></pre></td></tr></table></figure>
<p>通过解译器执行会输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python module.py  # 输出："执行"</span><br></pre></td></tr></table></figure>
<p>Node.js也有模块化的思想，要实现区分引用和执行，需要使用<code>require</code>和<code>module</code>，使用方法如下：</p>
<p>module.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">require</span>.main === <span class="built_in">module</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'执行'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>引用时不输出：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'./module.js'</span>);</span><br></pre></td></tr></table></figure>
<p>执行时输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node module.js  # 输出："执行"</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Koa.js 自定义koa-session加密方法</title>
    <url>/2021/07/12/Koa-js-%E8%87%AA%E5%AE%9A%E4%B9%89koa-session%E5%8A%A0%E5%AF%86%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Koa.js开发团队提供的session管理中间件<code>koa-session</code>（<a href="https://github.com/koajs/session" target="_blank" rel="noopener">koajs/session</a>），默认将session的内容保存在cookies中，其基本使用方法为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'koa-session'</span>);</span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.keys = [<span class="string">'some secret hurr'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CONFIG = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">app.use(session(CONFIG, app));</span><br><span class="line"><span class="comment">// or if you prefer all default config, just use =&gt; app.use(session(app));</span></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'listening on port 3000'</span>);</span><br></pre></td></tr></table></figure>
<p>其中<code>CONFIG</code>用于对中间件进行配置。查看<a href="https://github.com/koajs/session/blob/master/index.js" target="_blank" rel="noopener">源码</a>后发现，里面用于将session加密的函数为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Decode the base64 cookie value to an object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> <span class="variable">string</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Object&#125;</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api <span class="variable">private</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">decode(string) &#123;</span><br><span class="line">    <span class="keyword">const</span> body = Buffer.from(string, <span class="string">'base64'</span>).toString(<span class="string">'utf8'</span>);</span><br><span class="line">    <span class="keyword">const</span> json = <span class="built_in">JSON</span>.parse(body);</span><br><span class="line">    <span class="keyword">return</span> json;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Encode an object into a base64-encoded JSON string.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> <span class="variable">body</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;String&#125;</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api <span class="variable">private</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">encode(body) &#123;</span><br><span class="line">    body = <span class="built_in">JSON</span>.stringify(body);</span><br><span class="line">    <span class="keyword">return</span> Buffer.from(body).toString(<span class="string">'base64'</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>仅仅做了一个base64的编码，把浏览器端cookies中保存的session字段用base64解码，直接就能获得明文，这很明显一点也不安全。</p>
<p>为了对session数据做进一步的加密，本文引入<code>crypto-js</code>，对数据进行基于PBKDF2的AES加密，关于原理请看2021年7月11日的另一篇博客，下一章节只有实现代码。</p>
<h1 id="自定义koa-session的加密方法"><a href="#自定义koa-session的加密方法" class="headerlink" title="自定义koa-session的加密方法"></a>自定义koa-session的加密方法</h1><p><code>crypto-js</code>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i crypto-js -S</span><br></pre></td></tr></table></figure>
<p>实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoJS = <span class="built_in">require</span>(<span class="string">'crypto-js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aesKey = <span class="string">'aes key'</span>;</span><br><span class="line"><span class="keyword">const</span> aesIv = CryptoJS.enc.Hex.parse(<span class="string">'00112233'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> encode = <span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">    body = <span class="built_in">JSON</span>.stringify(body);</span><br><span class="line">    <span class="keyword">return</span> CryptoJS.AES.encrypt(body, aesKey, &#123; <span class="attr">iv</span>: aesIv &#125;).toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> decode = <span class="function">(<span class="params">string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> body = CryptoJS.AES.decrypt(string, aesKey, &#123; <span class="attr">iv</span>: aesIv &#125;)</span><br><span class="line">        .toString(CryptoJS.enc.Utf8).toString();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(body);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里直接使用CryptoJS的AES加密解密，注意<code>encode(body)</code>函数的参数是json对象，<code>decode(string)</code>函数的参数是加密后的字符串。</p>
<p>添加到配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> KoaSession = <span class="built_in">require</span>(<span class="string">'koa-session'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">'koa'</span>)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置session中间件</span></span><br><span class="line"><span class="keyword">const</span> CONFIG = &#123;</span><br><span class="line">    encode,</span><br><span class="line">    decode</span><br><span class="line">&#125;;</span><br><span class="line">app.use(KoaSession(CONFIG, app));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Koa.js</tag>
        <tag>CryptoJS</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto.js中的AES加密的参数key是什么意思？</title>
    <url>/2021/07/11/Crypto-js%E4%B8%AD%E7%9A%84AES%E5%8A%A0%E5%AF%86%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%82%E6%95%B0%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</url>
    <content><![CDATA[<blockquote>
<p>注意到使用<code>CryptoJS.AES.encrypt</code>进行加密时，第二个参数<code>key</code>可以为<code>CryptoJS.lib.wordarray</code>，也可以为<code>string</code>，如果是前者，每次加密的结果都一样，如果是后者，每次加密结果都不一致，这是为什么呢？</p>
</blockquote>
<p>在CryptoJS的<a href="https://cryptojs.gitbook.io/docs" target="_blank" rel="noopener">官方文档</a>有这么一句话：</p>
<blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> encrypted = CryptoJS.AES.encrypt(<span class="string">"Message"</span>, <span class="string">"Secret Passphrase"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> decrypted = CryptoJS.AES.decrypt(encrypted, <span class="string">"Secret Passphrase"</span>);</span><br></pre></td></tr></table></figure>
<p>CryptoJS supports AES-128, AES-192, and AES-256. It will pick the variant by the size of the key you pass in. If you use a passphrase, then it will generate a 256-bit key.</p>
</blockquote>
<p>意思是如果传入的为一个wordarray，那么会根据位数执行<code>AES-128</code>/<code>AES-192</code>/<code>AES-256</code>的加密算法；如果传入的是一个短语，也就是字符串，那么会根据这个字符串，生成一个256位的密钥。</p>
<h1 id="密钥的位数"><a href="#密钥的位数" class="headerlink" title="密钥的位数"></a>密钥的位数</h1><p>如何指定密钥的位数从而指定加密算法呢？手动操作<code>CryptoJS.lib.wordarray</code>吗？很显然这有点困难，这方面的文档也比较少。我们不妨回归算法的本质。</p>
<p>AES加密算法中的128/192/256指的是位数，即<code>bit</code>。将其转换为字节，分别对应16字节、24字节、32字节（分别除以8）。</p>
<p>一个字节能存储的数据长度为<code>2^8 = 256</code>，取值范围为<code>0-255</code>，换算成16进制就是<code>00-FF</code>，这样就提供了一个思路，可以通过<strong>构建16进制字符串来指定密钥的位数</strong>。在16进制字符串中，2个字符表示1个字节。</p>
<p><code>crypto-js</code>提供了一个函数：<code>CryptoJS.enc.Hex.parse()</code>，可以将16进制字符串转成<code>wordarray</code>，由此来指定密钥的位数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoJS = <span class="built_in">require</span>(<span class="string">'crypto-js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 长度为16字节的密钥，2个字符表示1字节的16进制数</span></span><br><span class="line"><span class="keyword">const</span> hexKeyStr = <span class="string">"AA00BB11CC22DD33EE44FF5566778899"</span>;</span><br><span class="line"><span class="keyword">const</span> hexIvStr = <span class="string">"00112233445566778899aabbccddeeff"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AES-128 加密</span></span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">'test'</span>, <span class="attr">pwd</span>: <span class="string">'123456'</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> enc = CryptoJS.AES.encrypt(<span class="built_in">JSON</span>.stringify(data), CryptoJS.enc.Hex.parse(hexKeyStr), &#123;</span><br><span class="line">    iv: CryptoJS.enc.Hex.parse(hexIvStr),</span><br><span class="line">    mode: CryptoJS.mode.CBC,</span><br><span class="line">    padding: CryptoJS.pad.Pkcs7</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(enc.ciphertext.toString());</span><br><span class="line"><span class="comment">// 314a0c0af60bf916e1ca49f2d0dcb4cfe2c31a92937ef25e4e12ce9d0951c8f6</span></span><br><span class="line"><span class="built_in">console</span>.log(enc.toString());</span><br><span class="line"><span class="comment">// MUoMCvYL+Rbhykny0Ny0z+LDGpKTfvJeThLOnQlRyPY=</span></span><br></pre></td></tr></table></figure>
<p>生成16进制字符串可以使用<code>crypto-js</code>自带的函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成16字节的word array</span></span><br><span class="line"><span class="keyword">const</span> hexWordArray = CryptoJS.lib.WordArray.random(<span class="number">128</span> / <span class="number">8</span>);</span><br><span class="line"><span class="comment">// 将word array转为16进制字符串</span></span><br><span class="line"><span class="keyword">const</span> hexStr = hexWordArray.toString();</span><br></pre></td></tr></table></figure>
<h1 id="使用字符串作为密钥：PBKDF2算法"><a href="#使用字符串作为密钥：PBKDF2算法" class="headerlink" title="使用字符串作为密钥：PBKDF2算法"></a>使用字符串作为密钥：PBKDF2算法</h1><blockquote>
<p><a href="https://stackoverflow.com/questions/22875419/cryptojs-how-to-generate-aes-passphrase" target="_blank" rel="noopener">cryptojs: How to generate AES passphrase</a></p>
<p><a href="https://segmentfault.com/a/1190000004261009" target="_blank" rel="noopener">【笔记】PBKDF2算法</a></p>
</blockquote>
<p>一直在思考，为什么传入一个字符串也可以进行加密，而且每次加密的结果都不一样，所谓的自动生成256位密钥又是什么原理，知道看到了Stack Overflow上面的这个问题：<a href="https://stackoverflow.com/questions/22875419/cryptojs-how-to-generate-aes-passphrase" target="_blank" rel="noopener">cryptojs: How to generate AES passphrase</a>，了解到这背后的原理是PBKDF算法。</p>
<p>PBKDF2（Password-Based Key Derivation Function）是一个用来导出密钥的函数，常用于生成加密的密码。</p>
<p>它的基本原理是通过一个伪随机函数（例如HMAC函数），把明文和一个盐值作为输入参数，然后重复进行运算，并最终产生密钥。</p>
<p>如果重复的次数足够大，破解的成本就会变得很高。而盐值的添加也会增加“彩虹表”攻击的难度。</p>
<p>在CryptoJS中封装了PBKDF2算法（<a href="https://cryptojs.gitbook.io/docs/#pbkdf2" target="_blank" rel="noopener">官方文档 # pbkdf2</a>），使用方法如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> salt = CryptoJS.lib.WordArray.random(<span class="number">128</span> / <span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> key128Bits = CryptoJS.PBKDF2(<span class="string">"abcdefg123++"</span>, salt, &#123;</span><br><span class="line">    keySize: <span class="number">128</span> / <span class="number">32</span></span><br><span class="line">&#125;).toString();</span><br><span class="line"><span class="built_in">console</span>.log(key128Bits.length, key128Bits);</span><br><span class="line"><span class="comment">// 32 a53fbb9fd7616c8312a16865499170e9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key256Bits = CryptoJS.PBKDF2(<span class="string">"abcdefg123++"</span>, salt, &#123;</span><br><span class="line">    keySize: <span class="number">256</span> / <span class="number">32</span></span><br><span class="line">&#125;).toString();</span><br><span class="line"><span class="built_in">console</span>.log(key256Bits.length, key256Bits);</span><br><span class="line"><span class="comment">// 64 a53fbb9fd7616c8312a16865499170e96c2c1eb126641c4a4b540f29d453f56f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key512Bits = CryptoJS.PBKDF2(<span class="string">"abcdefg123++"</span>, salt, &#123;</span><br><span class="line">    keySize: <span class="number">512</span> / <span class="number">32</span></span><br><span class="line">&#125;).toString();</span><br><span class="line"><span class="built_in">console</span>.log(key512Bits.length, key512Bits);</span><br><span class="line"><span class="comment">// 128 a53fbb9fd7616c8312a16865499170e96c2c1eb126641c4a4b540f29d453f56f6024b91f301da2e660849f48ce9cad7ddae340bc7b5bcef1944a742cb771e3fb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key512Bits1000Iterations = CryptoJS.PBKDF2(<span class="string">"abcdefg123++"</span>, salt, &#123;</span><br><span class="line">    keySize: <span class="number">512</span> / <span class="number">32</span>,</span><br><span class="line">    iterations: <span class="number">1000</span></span><br><span class="line">&#125;).toString();</span><br><span class="line"><span class="built_in">console</span>.log(key512Bits1000Iterations.length, key512Bits1000Iterations);</span><br><span class="line"><span class="comment">// 128 520465b48238dce46d228a9114d9e731e4cae83bab0623dfce4a213fa4d772ad6365cf18f2e71001b432b16b4ab4e2f2c1f417801dcfe168e1226d540167beec</span></span><br></pre></td></tr></table></figure>
<p>代码解释：</p>
<ul>
<li>使用<code>CryptoJS.lib.WordArray.random(128 / 8);</code>生成了一个<code>128/8</code>字节长度的椒盐噪声；</li>
<li>使用椒盐噪声和密钥<code>abcdefg123++</code>，通过<code>CryptoJS.PBKDF2</code>生成随机密钥；</li>
<li><code>keySize</code>的设定为“密钥位数/32”，猜测是因为算法中用于运算的数字是32位整型数字；</li>
<li>使用<code>toString()</code>转为16进制字符串，该字符串长度除以2等于字节数，再乘以8得到位数。</li>
</ul>
]]></content>
      <categories>
        <category>crypto</category>
      </categories>
      <tags>
        <tag>Crypto.js</tag>
        <tag>PBKDF2</tag>
        <tag>AES</tag>
      </tags>
  </entry>
  <entry>
    <title>Koa2入门笔记</title>
    <url>/2021/07/11/Koa2%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>参考资料</p>
<p><a href="https://segmentfault.com/a/1190000008314332" target="_blank" rel="noopener">Node.js 框架对比之 Express VS Koa</a></p>
<p><a href="https://www.itying.com/koa/article-index-id-90.html" target="_blank" rel="noopener">Koa2中文文档_Koa2教程</a></p>
<p><a href="https://github.com/koajs/koa/blob/master/docs/guide.md" target="_blank" rel="noopener">github | koajs/koa/guide</a></p>
<p><a href="https://koajs.com" target="_blank" rel="noopener">https://koajs.com</a></p>
</blockquote>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul>
<li><p><code>Koa.js</code>是基于Node.js的web应用服务端框架，相较于同一团队开发的<code>Express.js</code>来说它体积更小，功能更简洁，同时也尽可能减少了Node.js中存在的大量的回调。</p>
</li>
<li><p>目前通过npm直接安装的<code>Koa.js</code>都是2.0版本以上，如果不是需要升级npm到最新版本；如果需要用1.x版本的可以在安装时指定版本号：<code>npm i koa@1.7.0 -S</code></p>
</li>
<li>使用<code>try...catch</code>结构处理异常，相较于<code>Express.js</code>中的基于回调函数的组合业务逻辑，异常捕获更加轻松自然。</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>初始化一个npm目录后执行安装：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">node <span class="literal">-v</span>   <span class="comment"># v12.14.0</span></span><br><span class="line">npm <span class="literal">-v</span>    <span class="comment"># 6.13.4</span></span><br><span class="line">npm init <span class="literal">-y</span></span><br><span class="line">npm i koa <span class="literal">-S</span></span><br></pre></td></tr></table></figure>
<p>安装的版本是：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"dependencies": &#123;</span><br><span class="line">    "koa": "^2.13.1"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>在目录下创建<code>app.js</code>，在其中写入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span>(ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">'Hello Koa.js v2'</span>;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8888</span>;</span><br><span class="line">app.listen(port, <span class="string">'0.0.0.0'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`app listen on: http://127.0.0.1:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
<p>这样就搭建好了一个服务器，在命令行输入<code>node app</code>，打开浏览器对应的地址即可访问。</p>
<p>其实最后监听那边写成<code>Express.js</code>中的回调风格也是可以的（如下所示），虽然也不是不可以，但是这里是Koa2的教程，所以还是要尽可能地减少使用回调嘛，除了<code>app.use</code>那边不得不用之外，其他地方最好都不要用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = app.listen(<span class="number">8888</span>, <span class="string">'0.0.0.0'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> port = server.address().port;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`app listen on: http://127.0.0.1:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>中间件是<code>Koa.js</code>的核心概念，一个koa实例的最重要的构成就是中间件，这些中间件以函数的形式存放在一个数组中，根据http请求以类似于堆栈的方式执行。</p>
<p><code>Koa.js</code>的中间件的最大的特点在于其控制流，根据官网的说法，当存在多个中间件时，调用的顺序是从下游（downstream）开始，循着控制流回到上游（upstream），这一方式称作级联（Cascading），将在下一小节论述。</p>
<p>由于<code>Koa.js</code>本身功能简洁，诸如路由、静态目录、请求内容解析等功能全都由中间件来实现，其官方提供了一个收录列表，记录了其生态中的中间件列表，若有实际应用需求可以首先来这边寻找。</p>
<blockquote>
<p>koa中间件官方收录：</p>
<p><a href="https://github.com/koajs/koa/wiki#middleware" target="_blank" rel="noopener">https://github.com/koajs/koa/wiki#middleware</a></p>
</blockquote>
<h2 id="级联"><a href="#级联" class="headerlink" title="级联"></a>级联</h2><p>中间件级联也可以理解为嵌套，从一次请求开始，数据流会依次流过不同的中间件，最后返回到客户端。在这个流动的过程中，我们可以根据请求做出一定的响应、添加解析功能、进行拦截、添加分流等。而<code>Koa.js</code>提供了一个接口，允许开发者自由控制数据流。</p>
<p>控制的关键就在于<code>next</code>函数，下面是一个官方给出的例子，用于统计一次请求的响应时间，并记录到响应头中、打印到控制台。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="keyword">const</span> rt = ctx.response.get(<span class="string">'X-Response-Time'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;ctx.method&#125;</span> <span class="subst">$&#123;ctx.url&#125;</span> - <span class="subst">$&#123;rt&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// x-response-time</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="keyword">const</span> ms = <span class="built_in">Date</span>.now() - start;</span><br><span class="line">  ctx.set(<span class="string">'X-Response-Time'</span>, <span class="string">`<span class="subst">$&#123;ms&#125;</span>ms`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>当服务器收到请求时，首先来到<code>logger</code>中间件，当执行到<code>await next()</code>语句时，就将当前函数的内容挂起，执行之后的中间件；来到<code>x-response-time</code>中间件时，记录了一下请求发生的时间，接着执行到<code>await next()</code>，挂起等待，进入下一个中间件；在执行完最后一个中间件<code>response</code>之后，发现后续没有中间件了，那么就按照先进后出的顺序，向上回溯，先来到<code>x-response-time</code>的<code>await next()</code>之后，执行记录响应时间并写到http响应头的操作，执行完之后，再回溯到<code>logger</code>，从http响应头中拿到记录的响应时间，打印到控制台。再往上已没有中间件，该请求就被发送回客户端，一次请求的处理流程就走完了。</p>
<p>中间件级联中的控制流的核心在于<code>await next()</code>语句，由它作为数据下游（downstream）和上游（upstream）的界线。当请求发生时，会根据所写的中间件的顺序，执行<code>await next()</code>语句之前的语句，当最后一个中间件执行完毕后，下游结束，并按照进来的顺序，反向回溯，执行中间件中写在<code>await next()</code>之后的语句。就差不多是下面这个意思：</p>
<p><img src="/images/image-20210708215037915.png" alt="image-20210708215037915" style="zoom:50%;" /></p>
<p>如果参与级联的中间件不包含<code>next()</code>语句，则认为它就是级联的终点，例如下面语句的执行结果是：请求响应内容只有一个<code>Hello,</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// response 1</span></span><br><span class="line">app.use(<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    ctx.body = <span class="string">'Hello,'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response 2</span></span><br><span class="line">app.use(<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    ctx.body += <span class="string">'World!'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>要让响应内容为<code>Hello,World!</code>，需要改写成：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// response 1</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">'Hello,'</span>;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response 2</span></span><br><span class="line">app.use(<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    ctx.body += <span class="string">'World!'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>尝试了一下，好像加不加<code>async/await</code>都可以发挥<code>next()</code>的作用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// response 1</span></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.body = <span class="string">'Hello,'</span>;</span><br><span class="line">    next();</span><br><span class="line">    ctx.body += <span class="string">'12345'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response 2</span></span><br><span class="line">app.use(<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    ctx.body += <span class="string">'World!'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>响应内容为：<code>Hello,World!12345</code>。</p>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p><a href="https://github.com/koajs" target="_blank" rel="noopener">koajs</a>开发者提供了两个路由中间件：<a href="https://github.com/koajs/route" target="_blank" rel="noopener">koa-route</a>和<a href="https://github.com/koajs/router" target="_blank" rel="noopener">koa-router</a>，前者号称超级简易（uber simple），后者则包含了路由的完整特性（full-featured）。</p>
<h2 id="koa-route"><a href="#koa-route" class="headerlink" title="koa-route"></a>koa-route</h2><p>由于不打算使用这个，仅在这边贴几行代码说明安装和示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install koa-route</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'koa-route'</span>);</span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = &#123;</span><br><span class="line">  tobi: &#123; <span class="attr">name</span>: <span class="string">'tobi'</span>, <span class="attr">species</span>: <span class="string">'ferret'</span> &#125;,</span><br><span class="line">  loki: &#123; <span class="attr">name</span>: <span class="string">'loki'</span>, <span class="attr">species</span>: <span class="string">'ferret'</span> &#125;,</span><br><span class="line">  jane: &#123; <span class="attr">name</span>: <span class="string">'jane'</span>, <span class="attr">species</span>: <span class="string">'ferret'</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pets = &#123;</span><br><span class="line">  list: <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> names = <span class="built_in">Object</span>.keys(db);</span><br><span class="line">    ctx.body = <span class="string">'pets: '</span> + names.join(<span class="string">', '</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  show: <span class="function">(<span class="params">ctx, name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> pet = db[name];</span><br><span class="line">    <span class="keyword">if</span> (!pet) <span class="keyword">return</span> ctx.throw(<span class="string">'cannot find that pet'</span>, <span class="number">404</span>);</span><br><span class="line">    ctx.body = pet.name + <span class="string">' is a '</span> + pet.species;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.use(_.get(<span class="string">'/pets'</span>, pets.list));</span><br><span class="line">app.use(_.get(<span class="string">'/pets/:name'</span>, pets.show));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'listening on port 3000'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="koa-router"><a href="#koa-router" class="headerlink" title="koa-router"></a>koa-router</h2><blockquote>
<p><a href="https://github.com/koajs/router/blob/master/API.md" target="_blank" rel="noopener">API</a></p>
</blockquote>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i @koa/router -S</span><br></pre></td></tr></table></figure>
<p>Adm.js：在独立文件中创建路由、实例化并导出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'@koa/router'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, ctx =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">'admin home'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>
<p>app.js：在主程序中，<strong>设置前缀</strong>（嵌套路由）、添加到服务器应用中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 各类路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> AdmRouter = <span class="built_in">require</span>(<span class="string">'./routes/adm'</span>);</span><br><span class="line">app.use(AdmRouter.prefix(<span class="string">'/adm'</span>).routes());</span><br></pre></td></tr></table></figure>
<p>通过以上的路由配置，打开浏览器访问<code>http://localhost:8888/adm</code>，即可看到<code>admin home</code>的内容。</p>
<h3 id="router-prefix-设置路由前缀-级联路由"><a href="#router-prefix-设置路由前缀-级联路由" class="headerlink" title="router.prefix() 设置路由前缀/级联路由"></a>router.prefix() 设置路由前缀/级联路由</h3><p>可以为一个路由设置前缀，它的返回值是加完前缀的路由，有什么用呢，举个例子。</p>
<p>在<code>Express.js</code>中，添加路由前缀的方法是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(<span class="string">'/adm'</span>, AdmRouter);</span><br></pre></td></tr></table></figure>
<p>但是<code>Koa.js</code>中为了做到简洁，不允许这样的用法，<code>app.use</code>只能接受一个参数，要设置前缀就需要通过router自带的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(AdmRouter.prefix(<span class="string">'/adm'</span>).routes());</span><br></pre></td></tr></table></figure>
<h3 id="router-use-设置路由中间件"><a href="#router-use-设置路由中间件" class="headerlink" title="router.use() 设置路由中间件"></a>router.use() 设置路由中间件</h3><p>根据路由匹配，添加处理的中间件。可以指定1个或多个路由，也可以不指定；至少指定一个中间件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// session middleware will run before authorize</span></span><br><span class="line">router</span><br><span class="line">  .use(session())</span><br><span class="line">  .use(authorize());</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">router.use(session(), authorize());</span><br><span class="line"></span><br><span class="line"><span class="comment">// use middleware only with given path</span></span><br><span class="line">router.use(<span class="string">'/users'</span>, userAuth());</span><br><span class="line"></span><br><span class="line"><span class="comment">// or with an array of paths</span></span><br><span class="line">router.use([<span class="string">'/users'</span>, <span class="string">'/admin'</span>], userAuth());</span><br><span class="line"></span><br><span class="line">app.use(router.routes());</span><br></pre></td></tr></table></figure>
<h3 id="router-redirect-重定向方法"><a href="#router-redirect-重定向方法" class="headerlink" title="router.redirect() 重定向方法"></a>router.redirect() 重定向方法</h3><p>重定向</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.redirect(<span class="string">'/login'</span>, <span class="string">'/home'</span>);</span><br></pre></td></tr></table></figure>
<p>相等于：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.all(<span class="string">'/login'</span>, ctx =&gt; &#123;</span><br><span class="line">    ctx.redirect(<span class="string">'/home'</span>);</span><br><span class="line">    ctx.status = <span class="number">301</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="挂载实例或中间件"><a href="#挂载实例或中间件" class="headerlink" title="挂载实例或中间件"></a>挂载实例或中间件</h1><blockquote>
<p><a href="https://github.com/koajs/mount" target="_blank" rel="noopener">koajs/mount</a>：主要被设计来挂载其他Koa实例，但也可以挂载中间件。</p>
</blockquote>
<p>挂载在这里的意思是将某些中间件或者将Koa实例作为中间件对应到特定的路由上，类似于<code>koa-router</code>的<code>prefix()</code>功能。</p>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i koa-mount -S</span><br></pre></td></tr></table></figure>
<p>koa-mount可以挂载Koa实例，也可以挂载中间件。</p>
<p>挂载实例的示例代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mount = <span class="built_in">require</span>(<span class="string">'koa-mount'</span>);</span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例a：hello</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> Koa();</span><br><span class="line">a.use(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  ctx.body = <span class="string">'Hello'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例b：world</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> Koa();</span><br><span class="line">b.use(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  ctx.body = <span class="string">'World'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// app</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(mount(<span class="string">'/hello'</span>, a));</span><br><span class="line">app.use(mount(<span class="string">'/world'</span>, b));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'listening on port 3000'</span>);</span><br></pre></td></tr></table></figure>
<p>以上的a和b都是Koa的实例，通过koa-mount挂载到实例app上，并在app上执行监听，当服务器收到不同的请求时，得到的响应分别是：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> GET /</span></span><br><span class="line">Not Found</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> GET /hello</span></span><br><span class="line">Hello</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> GET /world</span></span><br><span class="line">World</span><br></pre></td></tr></table></figure>
<p>koa-mount还可以挂载中间件，例如挂载一个路由，或者挂载一些自定义的中间件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mount = <span class="built_in">require</span>(<span class="string">'koa-mount'</span>);</span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">ctx, next</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  ctx.body = <span class="string">'Hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">world</span>(<span class="params">ctx, next</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  ctx.body = <span class="string">'World'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(mount(<span class="string">'/hello'</span>, hello));</span><br><span class="line">app.use(mount(<span class="string">'/world'</span>, world));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'listening on port 3000'</span>);</span><br></pre></td></tr></table></figure>
<p>挂载函数的第一个参数是路由地址，可以不写，默认挂载到全路径下。在挂载中间件时，<code>app.use(ctx =&gt; {})</code>等价于<code>app.use(mount(ctx =&gt; {}))</code>。</p>
<h1 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h1><blockquote>
<p><a href="https://github.com/koajs/koa-body" target="_blank" rel="noopener">koajs/koa-body</a></p>
</blockquote>
<p><code>Koa.js</code>团队提供了一个用于参数解析的中间件<a href="https://github.com/koajs/koa-body" target="_blank" rel="noopener">koajs/koa-body</a>，支持<code>multipart</code>，<code>urlencoded</code>，<code>json</code>请求体的解析。</p>
<p>该中间件还提供了与<a href="https://github.com/expressjs/multer" target="_blank" rel="noopener">expressjs/multer</a>一至的功能（解析<code>multipart/form-data</code>，主要用于文件上传）。</p>
<p>也有另一个基于<a href="https://github.com/cojs/co-body" target="_blank" rel="noopener">cojs/co-body</a>的参数解析中间件<a href="https://github.com/koajs/bodyparser" target="_blank" rel="noopener">koajs/bodyparser</a>，不过已经一年多没更新了，因此这里我们用的是前者。</p>
<h2 id="安装koa-body"><a href="#安装koa-body" class="headerlink" title="安装koa-body"></a>安装koa-body</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i koa-body -S</span><br></pre></td></tr></table></figure>
<h2 id="使用koa-body"><a href="#使用koa-body" class="headerlink" title="使用koa-body"></a>使用koa-body</h2><p>使用<code>koa-body</code>有两种方式，一种是直接设置在Koa的根实例上，对每一个请求都解析一边参数，这样好处是一次配置永久省心，但缺点是会造成不必要的计算浪费，以及不够灵活。另一种方式是设置在<code>koa-router</code>的路由上，这样足够灵活且不会造成浪费，因此推荐使用第二种。</p>
<p>设置在Koa根实例上：对所有请求都解析参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数解析</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> KoaBody = <span class="built_in">require</span>(<span class="string">'koa-body'</span>);</span><br><span class="line">app.use(KoaBody());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.listen(<span class="number">8888</span>, <span class="string">'0.0.0.0'</span>);</span><br></pre></td></tr></table></figure>
<p>设置在路由中间件中：仅对特定路由生效</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'@koa/router'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"><span class="keyword">const</span> KoaBody = <span class="built_in">require</span>(<span class="string">'koa-body'</span>);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/login'</span>, KoaBody(), ctx =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; account, password &#125; = ctx.request.body;</span><br><span class="line">    <span class="keyword">if</span> (account == <span class="string">'test'</span> &amp;&amp; password == <span class="string">'123456'</span>) &#123;</span><br><span class="line">        ctx.body = &#123;</span><br><span class="line">            status: <span class="number">200</span>,</span><br><span class="line">            msg: <span class="string">'login succeed!'</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.body = &#123;</span><br><span class="line">            status: <span class="number">1</span>,</span><br><span class="line">            msg: <span class="string">'login failed!'</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要注意的是，<code>koa-body</code>不允许嵌套，即不允许层级调用，否则请求会没有响应（卡死），就像下面这句：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">'/login'</span>, KoaBody(), KoaBody(), ctx =&gt; &#123;</span><br><span class="line">   	ctx.body = <span class="string">'succeed!'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>客户端发送请求后迟迟没有收到响应，检查发现第三个中间件函数根本就没有执行。</p>
</blockquote>
<h2 id="koa-body的可选配置项"><a href="#koa-body的可选配置项" class="headerlink" title="koa-body的可选配置项"></a>koa-body的可选配置项</h2><p>KoaBody()初始化时默认开启了<code>text/urlencoded/json</code>的解析，不开启<code>multipart</code>的解析。相关的配置可以通过传入一个选项进行配置，可选的配置项如下所示：</p>
<ul>
<li><code>patchNode</code> <strong>{Boolean}</strong> Patch request body to Node’s <code>ctx.req</code>, default <code>false</code></li>
<li><code>patchKoa</code> <strong>{Boolean}</strong> Patch request body to Koa’s <code>ctx.request</code>, default <code>true</code></li>
<li><code>jsonLimit</code> <strong>{String|Integer}</strong> The byte (if integer) limit of the JSON body, default <code>1mb</code></li>
<li><code>formLimit</code> <strong>{String|Integer}</strong> The byte (if integer) limit of the form body, default <code>56kb</code></li>
<li><code>textLimit</code> <strong>{String|Integer}</strong> The byte (if integer) limit of the text body, default <code>56kb</code></li>
<li><code>encoding</code> <strong>{String}</strong> Sets encoding for incoming form fields, default <code>utf-8</code></li>
<li><code>multipart</code> <strong>{Boolean}</strong> Parse multipart bodies, default <code>false</code></li>
<li><code>urlencoded</code> <strong>{Boolean}</strong> Parse urlencoded bodies, default <code>true</code></li>
<li><code>text</code> <strong>{Boolean}</strong> Parse text bodies, such as XML, default <code>true</code></li>
<li><code>json</code> <strong>{Boolean}</strong> Parse JSON bodies, default <code>true</code></li>
<li><code>jsonStrict</code> <strong>{Boolean}</strong> Toggles co-body strict mode; if set to true - only parses arrays or objects, default <code>true</code></li>
<li><code>includeUnparsed</code> <strong>{Boolean}</strong> Toggles  co-body returnRawBody option; if set to true, for form encoded and JSON  requests the raw, unparsed request body will be attached to <code>ctx.request.body</code> using a <code>Symbol</code> (<a href="https://github.com/koajs/koa-body#a-note-about-unparsed-request-bodies" target="_blank" rel="noopener">see details</a>), default <code>false</code></li>
<li><code>formidable</code> <strong>{Object}</strong> Options to pass to the formidable multipart parser</li>
<li><code>onError</code> <strong>{Function}</strong> Custom error handle, if throw an error, you can customize the response - onError(error, context), default will throw</li>
<li><code>strict</code> <strong>{Boolean}</strong> <strong><em>DEPRECATED</em></strong> If enabled, don’t parse GET, HEAD, DELETE requests, default <code>true</code></li>
<li><code>parsedMethods</code> <strong>{String[]}</strong> Declares the HTTP methods where bodies will be parsed, default <code>[&#39;POST&#39;, &#39;PUT&#39;, &#39;PATCH&#39;]</code>. Replaces <code>strict</code> option.</li>
</ul>
<h1 id="静态页面"><a href="#静态页面" class="headerlink" title="静态页面"></a>静态页面</h1><blockquote>
<p><a href="https://github.com/koajs/static" target="_blank" rel="noopener">koajs/static</a></p>
</blockquote>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i koa-static -S</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态目录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> KoaStatic = <span class="built_in">require</span>(<span class="string">'koa-static'</span>);</span><br><span class="line">app.use(KoaStatic(path.join(__dirname, <span class="string">'public'</span>)));</span><br></pre></td></tr></table></figure>
<h1 id="其他中间件"><a href="#其他中间件" class="headerlink" title="其他中间件"></a>其他中间件</h1><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><blockquote>
<p><a href="https://github.com/koajs/logger" target="_blank" rel="noopener">koajs/logger</a></p>
</blockquote>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i koa-logger -S</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日志</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> KoaLogger = <span class="built_in">require</span>(<span class="string">'koa-logger'</span>);</span><br><span class="line">app.use(KoaLogger());</span><br></pre></td></tr></table></figure>
<p>当有请求发送时，终端会输出一些请求信息：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&lt;-- POST /adm/login</span><br><span class="line">--&gt; POST /adm/login <span class="number">200</span> <span class="number">14</span>ms <span class="number">34</span>b</span><br></pre></td></tr></table></figure>
<h2 id="用户身份验证"><a href="#用户身份验证" class="headerlink" title="用户身份验证"></a>用户身份验证</h2><h3 id="基本验证：Basic-Auth"><a href="#基本验证：Basic-Auth" class="headerlink" title="基本验证：Basic Auth"></a>基本验证：Basic Auth</h3><blockquote>
<p><a href="https://github.com/koajs/basic-auth" target="_blank" rel="noopener">koajs/basic-auth</a></p>
</blockquote>
<p>基本验证是什么？<a href="https://www.jianshu.com/p/4cd42f7359f4" target="_blank" rel="noopener">HTTP Authorization 之 Basic Auth</a></p>
<p>通过写在HTTP头的<code>用户名:密码</code>的base64编码后的字符串进行验证的一种手段。安全性极低。</p>
<h3 id="jwt验证：JSON-Web-Token"><a href="#jwt验证：JSON-Web-Token" class="headerlink" title="jwt验证：JSON Web Token"></a>jwt验证：JSON Web Token</h3><blockquote>
<p><a href="https://github.com/koajs/jwt" target="_blank" rel="noopener">koajs/jwt</a></p>
</blockquote>
<p>JSON Web Token是什么？<a href="https://ninghao.net/blog/2834" target="_blank" rel="noopener">基于 Token 的身份验证：JSON Web Token</a></p>
<p>通过加密、签名、指定JSON格式的方式指定一串密钥，当用户第一次登录时得到对应的口令（Token），之后每次请求都发送这一口令，表示用户已知晓服务端的口令，也就是值得信任。不需要涉及到数据库，能减少运算量和存储量（不需要额外存储session），但一旦对方拿到这个加密后的口令，比如登录一次之后，或者被抓包，那么都可以模拟这个口令发送请求。</p>
<p>而且由于口令不与用户关联（也可以关联，但是那就不是JWT的特点），具有通用性，容易泄露，因此要求经常更新。</p>
<p>有一定的加密手段，但一旦被破解或有内鬼泄露，那该加密手段就失效了。</p>
<h3 id="passport-js验证"><a href="#passport-js验证" class="headerlink" title="passport.js验证"></a>passport.js验证</h3><blockquote>
<p><a href="https://github.com/rkusa/koa-passport" target="_blank" rel="noopener">https://github.com/rkusa/koa-passport</a></p>
<p><a href="http://www.passportjs.org/" target="_blank" rel="noopener">http://www.passportjs.org/</a></p>
</blockquote>
<p>基于password.js，提供了一串从session中获取用户信息、查询数据库进行验证的接口。</p>
<h2 id="用户权限控制"><a href="#用户权限控制" class="headerlink" title="用户权限控制"></a>用户权限控制</h2><blockquote>
<p>ACL, RBAC, ABAC 是什么？</p>
<p>ACL/RBAC/ABAC都是用户权限控制的策略，区别在于指定的方式不同，具体可以参考以下三小节的内容（以下内容转载自：<a href="https://jeremyxu2010.github.io/2019/08/%E4%BD%BF%E7%94%A8casbin%E5%AE%8C%E6%88%90%E9%AA%8C%E8%AF%81%E6%8E%88%E6%9D%83/" target="_blank" rel="noopener">使用casbin完成验证授权</a>），ACL对每个用户指定权限，RBAC对一类用户指定，ABAC对具有某种属性的用户指定。<strong>用户权限控制首先需要给出权限列表，然后给用户指定列表中的权限，当一个用户想要执行某个权限下的操作时，首先将用户名、请求的权限输入系统进行查询，有权限返回<code>true</code>，无权限返回<code>false</code>。</strong></p>
</blockquote>
<h3 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h3><p><code>ACL</code>是<code>Access Control List</code>的缩写，称为访问控制列表. 定义了谁可以对某个数据进行何种操作. 关键数据模型有: 用户, 权限.</p>
<p>ACL规则简单, 也带来一些问题: 资源的权限需要在用户间切换的成本极大; 用户数或资源的数量增长, 都会加剧规则维护成本;</p>
<h4 id="典型应用"><a href="#典型应用" class="headerlink" title="典型应用"></a>典型应用</h4><ol>
<li>文件系统</li>
</ol>
<p>文件系统的文件或文件夹定义某个账号(user)或某个群组(group)对文件(夹)的读(read)/写(write)/执行(execute)权限.</p>
<ol>
<li>网络访问</li>
</ol>
<p>防火墙: 服务器限制不允许指定机器访问其指定端口, 或允许特定指定服务器访问其指定几个端口.</p>
<h3 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h3><p><code>RBAC</code>是<code>Role-based access control</code>的缩写, 称为 基于角色的访问控制. 核心数据模型有: 用户, 角色, 权限.</p>
<p>用户具有角色, 而角色具有权限, 从而表达用户具有权限.</p>
<p>由于有角色作为中间纽带, 当新增用户时, 只需要为用户赋予角色, 用户即获得角色所包含的所有权限.</p>
<p><code>RBAC</code>存在多个扩展版本, <code>RBAC0</code>、<code>RBAC1</code>、<code>RBAC2</code>、<code>RBAC3</code>。这些版本的详细说明可以参数<a href="https://www.jianshu.com/p/b078abe9534f" target="_blank" rel="noopener">这里</a>。我们在实际项目中经常使用的是<code>RBAC1</code>，即带有角色继承概念的RBAC模型。</p>
<h3 id="ABAC"><a href="#ABAC" class="headerlink" title="ABAC"></a>ABAC</h3><p><code>ABAC</code>是<code>Attribute-based access control</code>的缩写, 称为基于属性的访问控制.</p>
<p>权限和资源当时的状态(属性)有关, 属性的值可以用于正向判断(符合某种条件则通过), 也可以用于反向判断(符合某种条件则拒绝):</p>
<h4 id="典型应用-1"><a href="#典型应用-1" class="headerlink" title="典型应用"></a>典型应用</h4><ol>
<li>论坛的评论权限, 当帖子是锁定状态时, 则不再允许继续评论;</li>
<li>Github 私有仓库不允许其他人访问;</li>
<li>发帖者可以编辑/删除评论(如果是RBAC, 会为发帖者定义一个角色, 但是每个帖子都要新增一条用户/发帖角色的记录);</li>
<li>微信聊天消息超过2分钟则不再允许撤回;</li>
<li>12306 只有实名认证后的账号才能购票;</li>
<li>已过期的付费账号将不再允许使用付费功能;</li>
</ol>
<h3 id="koa-authz：基于Casbin实现的ACL-RBAC-ABAC控制"><a href="#koa-authz：基于Casbin实现的ACL-RBAC-ABAC控制" class="headerlink" title="koa-authz：基于Casbin实现的ACL/RBAC/ABAC控制"></a>koa-authz：基于Casbin实现的ACL/RBAC/ABAC控制</h3><blockquote>
<p><a href="https://github.com/casbin/node-casbin" target="_blank" rel="noopener">casbin/node-casbin</a></p>
<p><a href="https://github.com/node-casbin/koa-authz" target="_blank" rel="noopener">node-casbin/koa-authz</a></p>
<p><a href="https://casbin.org/" target="_blank" rel="noopener">Casbin 官网首页</a></p>
<p><a href="https://casbin.org/docs/en/syntax-for-models" target="_blank" rel="noopener">Casbin Model 语法说明</a></p>
<p><a href="https://casbin.org/docs/en/tutorials" target="_blank" rel="noopener">Casbin Tutorials</a></p>
</blockquote>
<p><code>koa-authz</code>是基于<code>Node-Casbin</code>实现的权限控制中间件，主要控制这么一件事：<strong>xx用户</strong>是否具有对<strong>xx资源</strong>进行<strong>xx操作</strong>的权限。在<code>koa-authz</code>的描述语言里，就是<code>{subject, object, action}</code>，其中：</p>
<ol>
<li><code>subject</code>：已经登录了的用户名，xx用户；</li>
<li><code>object</code>：网络资源的URL，如“dataset1/item1”，xx资源；</li>
<li><code>action</code>：HTTP方法（GET/POST/PUT/DELETE…）或其他语义化方法（如 read-file, write-blog），xx操作。</li>
</ol>
<p>具体的使用参考<a href="https://github.com/node-casbin/koa-authz" target="_blank" rel="noopener">node-casbin/koa-authz</a>和<a href="https://casbin.org/docs/en/tutorials" target="_blank" rel="noopener">Casbin Tutorials</a>。</p>
<h2 id="会话管理：session"><a href="#会话管理：session" class="headerlink" title="会话管理：session"></a>会话管理：session</h2><h3 id="koa-session的安装和使用"><a href="#koa-session的安装和使用" class="headerlink" title="koa-session的安装和使用"></a>koa-session的安装和使用</h3><blockquote>
<p><a href="https://github.com/koajs/session" target="_blank" rel="noopener">koajs/session</a></p>
</blockquote>
<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i koa-session -S</span><br></pre></td></tr></table></figure>
<p>基本使用。其中<code>app.keys</code>为必须字段，用于为cookies加密，除非在<code>koa-session</code>的配置项中把加密的关掉。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * session</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.keys = [<span class="string">'secret'</span>];</span><br><span class="line"><span class="keyword">const</span> KoaSession = <span class="built_in">require</span>(<span class="string">'koa-session'</span>);</span><br><span class="line">app.use(KoaSession(app));</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, ctx =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> n = ctx.session.views || <span class="number">0</span>;</span><br><span class="line">    ctx.session.views = ++n;</span><br><span class="line">    ctx.body = <span class="string">`<span class="subst">$&#123;n&#125;</span> views`</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>以上代码实现的是通过session存储某一网页的访问次数。（session存放在浏览器的cookie中）</p>
<p>当浏览器向客户端发送请求时，会附带上cookie，添加了<code>koa-session</code>中间件后，可以通过<code>ctx.session</code>拿到存储在浏览器cookie中的session信息（这里称作<code>cookie-based sessions</code>），当对session其进行修改后，响应这个请求时会把修改后的session发送到浏览器，更新存放在浏览器的cookie数据。</p>
<h3 id="koa-session的配置项"><a href="#koa-session的配置项" class="headerlink" title="koa-session的配置项"></a>koa-session的配置项</h3><p>可以通过如下形式为<code>koa-session</code>传入配置项：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SessionConfig = &#123;&#125;;</span><br><span class="line">app.use(KoaSession(SessionConfig, app));</span><br></pre></td></tr></table></figure>
<p>可选配置项有：</p>
<ul>
<li><code>key</code>: (string) 保存在cookie中的键名，默认为<code>koa.sess</code></li>
<li><code>maxAge</code>: (number || ‘session’)，当为一个数字时，表示以毫秒计算的最大session有效时间。默认为<code>86400000</code>，1天；当为<code>&#39;session&#39;</code>字符串时，关闭会话或浏览器时，session会过期。</li>
<li><code>autoCommit</code>: (boolean) 是否自动提交headers，默认为<code>true</code>。</li>
<li><code>overwrite</code>: (boolean) 是否重写cookie，默认为<code>true</code>。</li>
<li><code>httpOnly</code>: (boolean) 是否开启<code>httpOnly</code>，默认为<code>true</code>，带有<code>httpOnly</code>的Cookie不能通过非http方式来访问。</li>
<li><code>signed</code>: (boolean) 是否使用<code>app.keys</code>进行签名，默认为<code>true</code>，会在cookie中存放一个<code>key.sig</code>的签名字段，<strong>主要目的是防止cookie被篡改</strong>。（测试了一下，如果不设置签名，将cookie用base64解码后改成另一个值，还能生效；如果设置了签名，如果发生了修改，那么修改的字段和之前的字段都无效了，会重新设置cookie。<strong>如果有人同时复制了数据和签名，那么还是可以篡改数据的，只是不能篡改成他想要的样子</strong>，签名的原理和<code>app.keys</code>的签名原理一至，底层的实现依赖<a href="https://github.com/crypto-utils/keygrip" target="_blank" rel="noopener">crypto-utils/keygrip</a>和<a href="https://github.com/pillarjs/cookies" target="_blank" rel="noopener">pillarjs/cookies</a>）。</li>
<li><code>rolling</code>: (boolean) 强制在每个响应上设置会话标识符 cookie。到期重置为原来的maxAge，重置到期倒计时，默认为<code>false</code>。</li>
<li><code>renew</code>: (boolean) 当session将要过期时是否更新它，默认为<code>false</code>。</li>
<li><code>secure</code>: (boolean) 是否启用安全cookie，默认为<code>false</code>。</li>
<li><code>sameSite</code>: (string) session cookie的<code>sameSite</code>选项，默认为<code>None</code>，将允许声明Cookie是否仅限于第一方或同一站点上下文。接受三个值：<code>Lax</code>：Cookies允许与顶级导航一起发送，并将与第三方网站发起的GET请求一起发送，这是浏览器的默认值；<code>Strict</code>：Cookies只会在第一方上下文中发送，不会与第三方网站发起的请求一起发送；<code>None</code>：Cookies将在所有上下文中发送，即允许跨域发送。使用<code>None</code>时，需要设置<code>Secure</code>。</li>
</ul>
<p>options中还包括一些其他的自定义配置项，如<code>encode/decode</code>，<code>externalKey</code>，<code>store</code>，<code>ContextStore</code>，<code>genid/prefix</code>等，详细的功能和配置方法可以查看<a href="https://github.com/koajs/session/blob/master/index.js" target="_blank" rel="noopener">koajs/session/index.js</a>。</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Koa.js</tag>
      </tags>
  </entry>
  <entry>
    <title>常用正则表达式记录</title>
    <url>/2021/07/16/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="邮箱格式验证"><a href="#邮箱格式验证" class="headerlink" title="邮箱格式验证"></a>邮箱格式验证</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^[\w.]*@[\w.]*\.[\w]*$/</span><br></pre></td></tr></table></figure>
<p>核心在于验证<code>@</code>和<code>.</code>，接着就是使用<code>^</code>和<code>$</code>规定了开头结尾，使用<code>\w</code>匹配数字、字母、下划线（相等于<code>[A-Za-z0-9]</code>）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^[\w.]*@[\w.]*\.[\w]*$/.test(<span class="string">'123@123.com'</span>)  <span class="comment">// true</span></span><br><span class="line">/^[\w.]*@[\w.]*\.[\w]*$/.test(<span class="string">'a.b.c@a.b.c.com'</span>)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04下Node.js使用手记</title>
    <url>/2021/07/19/Ubuntu-18-04%E4%B8%8BNode-js%E4%BD%BF%E7%94%A8%E6%89%8B%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>n: <a href="https://github.com/tj/n" target="_blank" rel="noopener">https://github.com/tj/n</a></p>
<p>pm2: <a href="https://github.com/Unitech/pm2" target="_blank" rel="noopener">https://github.com/Unitech/pm2</a></p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>使用<code>apt</code>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install nodejs npm</span><br></pre></td></tr></table></figure>
<p>发现版本有点老：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v # v8.10.0</span><br><span class="line">npm -v  # 3.5.2</span><br></pre></td></tr></table></figure>
<p>看到有人推荐<a href="https://github.com/tj/n" target="_blank" rel="noopener">n</a>，就去尝试使用了一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -g n</span><br><span class="line">n -V  # 7.3.0</span><br></pre></td></tr></table></figure>
<p>安装好之后，可以使用以下命令管理<code>Node.js</code>:</p>
<p><code>n lts</code> - 安装最新的长期支持版本</p>
<p><code>n latest</code> - 安装最新版<code>Node.js</code></p>
<p><code>n stable</code> - 安装最新的稳定版<code>Node.js</code></p>
<p><code>n 12.14.0</code> - 安装指定版本<code>Node.js</code></p>
<p>如果是第一次使用<code>n</code>安装<code>Node.js</code>，会把<code>node</code>命令安装到<code>/usr/local/bin/node</code>（原先安装在<code>/usr/bin/node</code>），此时在终端中使用<code>node -v</code>查看版本时，依旧是原来的版本，只需要重新打开终端或在当前终端执行：<code>PATH=&quot;$PATH&quot;</code>，即可使用由<code>n</code>安装的<code>Node.js</code>。</p>
<p><code>n</code> - 已安装的nodejs列表，可以在此替换</p>
<p><code>n rm 0.9.4 v0.10.0</code> - 删除缓存的的指定版本的<code>Node.js</code></p>
<p><code>n prune</code> - 删掉除当前版本之外的缓存</p>
<p><code>n uninstall</code> - 删除当前版本的<code>Node.js</code>，当想要恢复使用系统安装的<code>Node.js</code>或不再使用<code>node</code>和<code>npm</code>时使用</p>
<h1 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h1><p>使用<a href="https://github.com/Unitech/pm2" target="_blank" rel="noopener">pm2</a>将运行在命令行的<code>Node.js</code>运行到后台</p>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -g pm2</span><br><span class="line">yarn global add pm2</span><br></pre></td></tr></table></figure>
<p>运行一个js（也可以运行一个<code>.sh</code>，python文件等）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pm2 start app.js --name app_name</span><br></pre></td></tr></table></figure>
<p>进程管理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pm2 restart app_name</span><br><span class="line">pm2 reload app_name</span><br><span class="line">pm2 stop app_name</span><br><span class="line">pm2 delete app_name</span><br></pre></td></tr></table></figure>
<p><code>app_name</code>除了运行<code>js</code>文件时指定，还可以替换为：</p>
<ul>
<li><code>all</code> 所有进程</li>
<li><code>id</code> 进程在列表中的序号，从1开始，<strong>不是PID！</strong></li>
</ul>
<p>状态查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pm2 [list|ls|status]</span><br></pre></td></tr></table></figure>
<p>查看日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pm2 logs --line 200  ## 行数限制</span><br></pre></td></tr></table></figure>
<p>更多配置请参考：</p>
<blockquote>
<p><a href="https://pm2.keymetrics.io/docs/usage/quick-start/" target="_blank" rel="noopener">https://pm2.keymetrics.io/docs/usage/quick-start/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP请求头中host的作用</title>
    <url>/2021/07/19/HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%B8%ADhost%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在发送HTTP请求时，由于忘记添加host头信息，导致向阿里云服务器发送请求时，服务器响应400，且服务器软件并没有收到请求信息；</p>
<p>但是在局域网中部署一台相同操作系统、相同服务器软件时，请求发送就能成功；</p>
<p>排除服务器软件和操作系统的错误后，发现问题出在host头信息上。在此对host的作用做简单记录。</p>
<h1 id="http请求头中host字段的作用"><a href="#http请求头中host字段的作用" class="headerlink" title="http请求头中host字段的作用"></a>http请求头中host字段的作用</h1><blockquote>
<p><a href="https://blog.csdn.net/netdxy/article/details/51195560" target="_blank" rel="noopener">一篇文章详解请求头Host的概念</a></p>
<p><a href="https://www.jianshu.com/p/5332f470e33c" target="_blank" rel="noopener">http头中Host字段的作用</a></p>
</blockquote>
<p>一个HTTP请求报文的格式为：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string"></span> /user/login <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="string">Host:</span> 127.0.0.1</span><br><span class="line"><span class="attribute">Content-Type:application/json</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">&#123;&#125;</span></span><br></pre></td></tr></table></figure>
<p>这段报文中指定了方法<code>POST</code>，路由<code>/user/login</code>，协议<code>HTTP/1.1</code>，以及头信息<code>Host, Content-Type</code>和内容<code>{}</code>。</p>
<p>发送这段报文时，通常通过“ip + 端口”指定接收方。</p>
<p>同时，也可以通过“域名 + 端口”指定接收方，通过这种方式发出的请求会被部署在某个位置的域名解析服务器（Domain Name System，DNS）进行解析，获取到域名背后的ip，实质上还是通过ip访问。</p>
<p>但是在互联网中，多个不同的域名可以同时指向一个ip，例如<code>www.ccc.com</code>, <code>www.aaa.com</code>, <code>www.bbb.com</code>三个域名都指向了同一个ip：<code>192.168.0.1</code>（可以在<code>C:\Windows\System32\drivers\etc\hosts</code>中添加几行<code>192.168.0.1 www.aaa.com</code>来实现）</p>
<p>但是服务器收到请求后，能看到的只是发送者的ip地址，并不能识别出域名。</p>
<p>此时记录在头信息中的host字段就派上了用场，它记录了发送请求的客户端所请求的主机信息，常见形式有：</p>
<ul>
<li>IP + 端口：<code>host: &#39;127.0.0.1:8888&#39;</code></li>
<li>域名+端口：<code>host: &#39;www.aaa.com:8888&#39;</code></li>
<li>域名或IP，没有端口：<code>host: &#39;127.0.0.1&#39;</code> or <code>host: &#39;www.aaa.com&#39;</code>，这种情况一般是默认80或443端口；</li>
</ul>
<p>这样服务器收到请求后，就可以根据这个字段对不同的域名和端口进行区分。</p>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Koa.js获取真实IP</title>
    <url>/2021/07/19/Koa-js%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9EIP/</url>
    <content><![CDATA[<h1 id="Koa-js设置"><a href="#Koa-js设置" class="headerlink" title="Koa.js设置"></a>Koa.js设置</h1><p>只需要把<code>app.proxy</code>打开</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.proxy = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<h1 id="Nginx设置"><a href="#Nginx设置" class="headerlink" title="Nginx设置"></a>Nginx设置</h1><p>代理服务器需要跟上设置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-Port <span class="variable">$remote_port</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Koa.js</tag>
      </tags>
  </entry>
  <entry>
    <title>console.log的占位符</title>
    <url>/2021/07/19/console-log%E7%9A%84%E5%8D%A0%E4%BD%8D%E7%AC%A6/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://javascript.ruanyifeng.com/stdlib/console.html" target="_blank" rel="noopener">https://javascript.ruanyifeng.com/stdlib/console.html</a></p>
</blockquote>
<p><code>console.log</code>方法支持以下几种占位符</p>
<ul>
<li><code>%s</code> 字符串</li>
<li><code>%d</code> 整数</li>
<li><code>%i</code> 整数</li>
<li><code>%f</code> 浮点数</li>
<li><code>%o</code> 对象的链接</li>
<li><code>%c</code> CSS 格式字符串</li>
</ul>
<p>在<code>Node.js</code>中测试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'%s'</span>, <span class="string">'string'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'%d'</span>, <span class="number">123</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'%i'</span>, <span class="number">321</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'%f'</span>, <span class="number">123.321</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj is %o'</span>, &#123; <span class="attr">name</span>: <span class="string">'123'</span> &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'%cThis text is styled'</span>, <span class="string">'color: red; background: yellow; font-size: 24px;'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20210719184247834.png" alt="image-20210719184247834" style="zoom:67%;" /></p>
<p><code>%o</code>可以使对象自动上色，而<code>%c</code>不起效果。</p>
<p>在浏览器中测试：</p>
<p><img src="/images/image-20210719184207047.png" alt="image-20210719184207047" style="zoom:67%;" /></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义JavaScript字符串占位替换</title>
    <url>/2021/07/19/%E8%87%AA%E5%AE%9A%E4%B9%89JavaScript%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8D%A0%E4%BD%8D%E6%9B%BF%E6%8D%A2/</url>
    <content><![CDATA[<p>API:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.t(...args)</span><br></pre></td></tr></table></figure>
<p>使用示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'String: %t'</span>.t(<span class="string">'123'</span>));</span><br><span class="line"><span class="comment">//String: 123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Number: %t'</span>.t(<span class="number">456</span>));</span><br><span class="line"><span class="comment">//Number: 456</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Multi parameters: %t, %t, %t'</span>.t(<span class="string">'123'</span>, <span class="number">456</span>, &#123; <span class="attr">num</span>: <span class="number">123</span>, <span class="attr">str</span>: <span class="string">'456'</span> &#125;));</span><br><span class="line"><span class="comment">//Multi parameters: 123, 456, &#123;"num":123,"str":"456"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'占位符数量不足：%t'</span>.t(<span class="number">123</span>, <span class="number">456</span>, <span class="string">'str'</span>));</span><br><span class="line"><span class="comment">//占位符数量不足：123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'占位符数量过多：%t, %t, %t, %t'</span>.t(&#123; <span class="attr">a</span>: <span class="string">'aaa'</span>, <span class="attr">b</span>: <span class="string">'bbb'</span> &#125;));</span><br><span class="line"><span class="comment">//占位符数量过多：&#123;"a":"aaa","b":"bbb"&#125;, %t, %t, %t</span></span><br></pre></td></tr></table></figure>
<p>实现源码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.t = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> template = <span class="string">'%t'</span>;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="keyword">this</span>.toString();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> idx = str.indexOf(template);</span><br><span class="line">        <span class="keyword">if</span> (idx === <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> args[i] === <span class="string">'object'</span>) &#123;</span><br><span class="line">            args[i] = <span class="built_in">JSON</span>.stringify(args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        str = str.substr(<span class="number">0</span>, idx) + args[i] +</span><br><span class="line">            str.substring(idx + template.length, str.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现思路</p>
<ul>
<li>字符串替换，将<code>%t</code>替换为参数列表中的参数</li>
<li><code>substr(start, length)</code></li>
<li><code>substring(start, end)</code></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
